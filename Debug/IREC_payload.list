
IREC_payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a69c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  0800a870  0800a870  0001a870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ace8  0800ace8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ace8  0800ace8  0001ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acf0  0800acf0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acf0  0800acf0  0001acf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acf4  0800acf4  0001acf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800acf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200001e0  0800aed4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800aed4  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001739f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e1  00000000  00000000  000375ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026409  00000000  00000000  0003ce20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a11f  00000000  00000000  00063229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4429  00000000  00000000  0007d348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00161771  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067a8  00000000  00000000  001617c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a854 	.word	0x0800a854

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a854 	.word	0x0800a854

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <MX_ADC1_Init+0x9c>)
 8000fa2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000faa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <MX_ADC1_Init+0xa0>)
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_ADC1_Init+0x98>)
 8000fee:	f001 fe37 	bl	8002c60 <HAL_ADC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ff8:	f001 f94c 	bl	8002294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001000:	2301      	movs	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001004:	2307      	movs	r3, #7
 8001006:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_ADC1_Init+0x98>)
 800100e:	f001 fe6b 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001018:	f001 f93c 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200001fc 	.word	0x200001fc
 8001028:	40012000 	.word	0x40012000
 800102c:	0f000001 	.word	0x0f000001

08001030 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <MX_ADC2_Init+0xa0>)
 8001046:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_ADC2_Init+0x9c>)
 800104a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001052:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001056:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_ADC2_Init+0x9c>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001060:	2200      	movs	r2, #0
 8001062:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_ADC2_Init+0x9c>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <MX_ADC2_Init+0xa4>)
 8001076:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_ADC2_Init+0x9c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001080:	2201      	movs	r2, #1
 8001082:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC2_Init+0x9c>)
 800108e:	2201      	movs	r2, #1
 8001090:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <MX_ADC2_Init+0x9c>)
 8001094:	f001 fde4 	bl	8002c60 <HAL_ADC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800109e:	f001 f8f9 	bl	8002294 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010a2:	2303      	movs	r3, #3
 80010a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010aa:	2303      	movs	r3, #3
 80010ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_ADC2_Init+0x9c>)
 80010b4:	f001 fe18 	bl	8002ce8 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80010be:	f001 f8e9 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000244 	.word	0x20000244
 80010d0:	40012100 	.word	0x40012100
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a2e      	ldr	r2, [pc, #184]	; (80011b0 <HAL_ADC_MspInit+0xd8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d128      	bne.n	800114c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	4a2c      	ldr	r2, [pc, #176]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	6453      	str	r3, [r2, #68]	; 0x44
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001132:	2340      	movs	r3, #64	; 0x40
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	481c      	ldr	r0, [pc, #112]	; (80011b8 <HAL_ADC_MspInit+0xe0>)
 8001146:	f002 f941 	bl	80033cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800114a:	e02c      	b.n	80011a6 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_ADC_MspInit+0xe4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d127      	bne.n	80011a6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <HAL_ADC_MspInit+0xdc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800118e:	2308      	movs	r3, #8
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_ADC_MspInit+0xe0>)
 80011a2:	f002 f913 	bl	80033cc <HAL_GPIO_Init>
}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	; 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40012000 	.word	0x40012000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40012100 	.word	0x40012100

080011c0 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
	BMI->rawDatas.isGyroUpdated = 0;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	745a      	strb	r2, [r3, #17]
	BMI->rawDatas.isAccelUpdated = 0;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	749a      	strb	r2, [r3, #18]
	isTimeUpdated = 0;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <bmi088_init+0x54>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
	isStarded = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <bmi088_init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	uint8_t buf[1];

	HAL_I2C_Mem_Read(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69d8      	ldr	r0, [r3, #28]
 80011e8:	2332      	movs	r3, #50	; 0x32
 80011ea:	9302      	str	r3, [sp, #8]
 80011ec:	2301      	movs	r3, #1
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2301      	movs	r3, #1
 80011f8:	2200      	movs	r2, #0
 80011fa:	21d0      	movs	r1, #208	; 0xd0
 80011fc:	f002 fcea 	bl	8003bd4 <HAL_I2C_Mem_Read>
	if(*buf == 0x0F){
 8001200:	7b3b      	ldrb	r3, [r7, #12]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	d101      	bne.n	800120a <bmi088_init+0x4a>
		ret_val = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
	}
	return ret_val;
 800120a:	7bfb      	ldrb	r3, [r7, #15]

}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000028c 	.word	0x2000028c
 8001218:	200002a8 	.word	0x200002a8

0800121c <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af04      	add	r7, sp, #16
 8001222:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->deviceConfig.acc_IRQ);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f8b3 	bl	8003396 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->deviceConfig.gyro_IRQ);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8001236:	4618      	mov	r0, r3
 8001238:	f002 f8ad 	bl	8003396 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8001240:	2301      	movs	r3, #1
 8001242:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69d8      	ldr	r0, [r3, #28]
 8001248:	2364      	movs	r3, #100	; 0x64
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	2301      	movs	r3, #1
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2301      	movs	r3, #1
 8001258:	227c      	movs	r2, #124	; 0x7c
 800125a:	2130      	movs	r1, #48	; 0x30
 800125c:	f002 fbc0 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	4313      	orrs	r3, r2
 8001268:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69d8      	ldr	r0, [r3, #28]
 8001272:	2364      	movs	r3, #100	; 0x64
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	227d      	movs	r2, #125	; 0x7d
 8001284:	2130      	movs	r1, #48	; 0x30
 8001286:	f002 fbab 	bl	80039e0 <HAL_I2C_Mem_Write>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	4313      	orrs	r3, r2
 8001292:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8001294:	2014      	movs	r0, #20
 8001296:	f001 fcbf 	bl	8002c18 <HAL_Delay>

	buf[0] = ACC_RESET;
 800129a:	23b6      	movs	r3, #182	; 0xb6
 800129c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69d8      	ldr	r0, [r3, #28]
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	2301      	movs	r3, #1
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	227e      	movs	r2, #126	; 0x7e
 80012b4:	2130      	movs	r1, #48	; 0x30
 80012b6:	f002 fb93 	bl	80039e0 <HAL_I2C_Mem_Write>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <bmi088_config+0xb4>
 80012ca:	4bb4      	ldr	r3, [pc, #720]	; (800159c <bmi088_config+0x380>)
 80012cc:	2292      	movs	r2, #146	; 0x92
 80012ce:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80012d0:	200a      	movs	r0, #10
 80012d2:	f001 fca1 	bl	8002c18 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80012d6:	23b0      	movs	r3, #176	; 0xb0
 80012d8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69d8      	ldr	r0, [r3, #28]
 80012de:	2364      	movs	r3, #100	; 0x64
 80012e0:	9302      	str	r3, [sp, #8]
 80012e2:	2301      	movs	r3, #1
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2301      	movs	r3, #1
 80012ee:	227e      	movs	r2, #126	; 0x7e
 80012f0:	2130      	movs	r1, #48	; 0x30
 80012f2:	f002 fb75 	bl	80039e0 <HAL_I2C_Mem_Write>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <bmi088_config+0xf0>
 8001306:	4ba5      	ldr	r3, [pc, #660]	; (800159c <bmi088_config+0x380>)
 8001308:	2297      	movs	r2, #151	; 0x97
 800130a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800130c:	200a      	movs	r0, #10
 800130e:	f001 fc83 	bl	8002c18 <HAL_Delay>

	buf[0] = GYRO_RESET;
 8001312:	23b6      	movs	r3, #182	; 0xb6
 8001314:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69d8      	ldr	r0, [r3, #28]
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2214      	movs	r2, #20
 800132c:	21d0      	movs	r1, #208	; 0xd0
 800132e:	f002 fb57 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4313      	orrs	r3, r2
 800133a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <bmi088_config+0x12c>
 8001342:	4b96      	ldr	r3, [pc, #600]	; (800159c <bmi088_config+0x380>)
 8001344:	229c      	movs	r2, #156	; 0x9c
 8001346:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8001348:	200a      	movs	r0, #10
 800134a:	f001 fc65 	bl	8002c18 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->deviceConfig.gyro_range;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e9b      	ldrb	r3, [r3, #26]
 8001352:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69d8      	ldr	r0, [r3, #28]
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2301      	movs	r3, #1
 8001368:	220f      	movs	r2, #15
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	f002 fb38 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	4313      	orrs	r3, r2
 8001378:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <bmi088_config+0x16a>
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <bmi088_config+0x380>)
 8001382:	22a2      	movs	r2, #162	; 0xa2
 8001384:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_bandWidth;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7e5b      	ldrb	r3, [r3, #25]
 800138a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69d8      	ldr	r0, [r3, #28]
 8001390:	2314      	movs	r3, #20
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	2301      	movs	r3, #1
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	2210      	movs	r2, #16
 80013a2:	21d0      	movs	r1, #208	; 0xd0
 80013a4:	f002 fb1c 	bl	80039e0 <HAL_I2C_Mem_Write>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <bmi088_config+0x1a2>
 80013b8:	4b78      	ldr	r3, [pc, #480]	; (800159c <bmi088_config+0x380>)
 80013ba:	22a6      	movs	r2, #166	; 0xa6
 80013bc:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.gyro_powerMode;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7e1b      	ldrb	r3, [r3, #24]
 80013c2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69d8      	ldr	r0, [r3, #28]
 80013c8:	2314      	movs	r3, #20
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	2211      	movs	r2, #17
 80013da:	21d0      	movs	r1, #208	; 0xd0
 80013dc:	f002 fb00 	bl	80039e0 <HAL_I2C_Mem_Write>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d002      	beq.n	80013f6 <bmi088_config+0x1da>
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <bmi088_config+0x380>)
 80013f2:	22aa      	movs	r2, #170	; 0xaa
 80013f4:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80013f6:	2014      	movs	r0, #20
 80013f8:	f001 fc0e 	bl	8002c18 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69d8      	ldr	r0, [r3, #28]
 8001404:	2314      	movs	r3, #20
 8001406:	9302      	str	r3, [sp, #8]
 8001408:	2301      	movs	r3, #1
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2301      	movs	r3, #1
 8001414:	2215      	movs	r2, #21
 8001416:	21d0      	movs	r1, #208	; 0xd0
 8001418:	f002 fae2 	bl	80039e0 <HAL_I2C_Mem_Write>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	4313      	orrs	r3, r2
 8001424:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <bmi088_config+0x216>
 800142c:	4b5b      	ldr	r3, [pc, #364]	; (800159c <bmi088_config+0x380>)
 800142e:	22b0      	movs	r2, #176	; 0xb0
 8001430:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0);
 8001432:	2301      	movs	r3, #1
 8001434:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 4 config
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69d8      	ldr	r0, [r3, #28]
 800143a:	2314      	movs	r3, #20
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	2301      	movs	r3, #1
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	2216      	movs	r2, #22
 800144c:	21d0      	movs	r1, #208	; 0xd0
 800144e:	f002 fac7 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	4313      	orrs	r3, r2
 800145a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <bmi088_config+0x24c>
 8001462:	4b4e      	ldr	r3, [pc, #312]	; (800159c <bmi088_config+0x380>)
 8001464:	22b4      	movs	r2, #180	; 0xb4
 8001466:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_3;
 8001468:	2301      	movs	r3, #1
 800146a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 4 mapped.
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69d8      	ldr	r0, [r3, #28]
 8001470:	2314      	movs	r3, #20
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	2218      	movs	r2, #24
 8001482:	21d0      	movs	r1, #208	; 0xd0
 8001484:	f002 faac 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	4313      	orrs	r3, r2
 8001490:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <bmi088_config+0x282>
 8001498:	4b40      	ldr	r3, [pc, #256]	; (800159c <bmi088_config+0x380>)
 800149a:	22b8      	movs	r2, #184	; 0xb8
 800149c:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800149e:	2304      	movs	r3, #4
 80014a0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69d8      	ldr	r0, [r3, #28]
 80014a6:	2314      	movs	r3, #20
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2301      	movs	r3, #1
 80014b6:	227d      	movs	r2, #125	; 0x7d
 80014b8:	2130      	movs	r1, #48	; 0x30
 80014ba:	f002 fa91 	bl	80039e0 <HAL_I2C_Mem_Write>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <bmi088_config+0x2b8>
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <bmi088_config+0x380>)
 80014d0:	22bd      	movs	r2, #189	; 0xbd
 80014d2:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80014d4:	2008      	movs	r0, #8
 80014d6:	f001 fb9f 	bl	8002c18 <HAL_Delay>

	buf[0] = BMI->deviceConfig.acc_powerMode;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7d1b      	ldrb	r3, [r3, #20]
 80014de:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69d8      	ldr	r0, [r3, #28]
 80014e4:	2314      	movs	r3, #20
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	227c      	movs	r2, #124	; 0x7c
 80014f6:	2130      	movs	r1, #48	; 0x30
 80014f8:	f002 fa72 	bl	80039e0 <HAL_I2C_Mem_Write>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	4313      	orrs	r3, r2
 8001504:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <bmi088_config+0x2f6>
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <bmi088_config+0x380>)
 800150e:	22c2      	movs	r2, #194	; 0xc2
 8001510:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 8001512:	2008      	movs	r0, #8
 8001514:	f001 fb80 	bl	8002c18 <HAL_Delay>

	buf[0] = (BMI->deviceConfig.acc_bandwith << 4) | BMI->deviceConfig.acc_outputDateRate;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7d9b      	ldrb	r3, [r3, #22]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	b25a      	sxtb	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7ddb      	ldrb	r3, [r3, #23]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b25b      	sxtb	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69d8      	ldr	r0, [r3, #28]
 8001532:	2314      	movs	r3, #20
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	2301      	movs	r3, #1
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2301      	movs	r3, #1
 8001542:	2240      	movs	r2, #64	; 0x40
 8001544:	2130      	movs	r1, #48	; 0x30
 8001546:	f002 fa4b 	bl	80039e0 <HAL_I2C_Mem_Write>
 800154a:	4603      	mov	r3, r0
 800154c:	461a      	mov	r2, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4313      	orrs	r3, r2
 8001552:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <bmi088_config+0x344>
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <bmi088_config+0x380>)
 800155c:	22c7      	movs	r2, #199	; 0xc7
 800155e:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->deviceConfig.acc_range;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7d5b      	ldrb	r3, [r3, #21]
 8001564:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69d8      	ldr	r0, [r3, #28]
 800156a:	2314      	movs	r3, #20
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	2301      	movs	r3, #1
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	2241      	movs	r2, #65	; 0x41
 800157c:	2130      	movs	r1, #48	; 0x30
 800157e:	f002 fa2f 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4313      	orrs	r3, r2
 800158a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <bmi088_config+0x384>
 8001592:	4b02      	ldr	r3, [pc, #8]	; (800159c <bmi088_config+0x380>)
 8001594:	22cb      	movs	r2, #203	; 0xcb
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e002      	b.n	80015a0 <bmi088_config+0x384>
 800159a:	bf00      	nop
 800159c:	200002ac 	.word	0x200002ac

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80015a0:	230a      	movs	r3, #10
 80015a2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69d8      	ldr	r0, [r3, #28]
 80015a8:	2314      	movs	r3, #20
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	2301      	movs	r3, #1
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	2253      	movs	r2, #83	; 0x53
 80015ba:	2130      	movs	r1, #48	; 0x30
 80015bc:	f002 fa10 	bl	80039e0 <HAL_I2C_Mem_Write>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80015ca:	2304      	movs	r3, #4
 80015cc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69d8      	ldr	r0, [r3, #28]
 80015d2:	2314      	movs	r3, #20
 80015d4:	9302      	str	r3, [sp, #8]
 80015d6:	2301      	movs	r3, #1
 80015d8:	9301      	str	r3, [sp, #4]
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2301      	movs	r3, #1
 80015e2:	2258      	movs	r2, #88	; 0x58
 80015e4:	2130      	movs	r1, #48	; 0x30
 80015e6:	f002 f9fb 	bl	80039e0 <HAL_I2C_Mem_Write>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->deviceConfig.acc_IRQ);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f993 3020 	ldrsb.w	r3, [r3, #32]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 febd 	bl	800337a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->deviceConfig.gyro_IRQ);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8001606:	4618      	mov	r0, r3
 8001608:	f001 feb7 	bl	800337a <HAL_NVIC_EnableIRQ>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0000      	movs	r0, r0
	...

08001618 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8001618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800161c:	b08c      	sub	sp, #48	; 0x30
 800161e:	af04      	add	r7, sp, #16
 8001620:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	77fb      	strb	r3, [r7, #31]

		if(BMI->rawDatas.isAccelUpdated)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7c9b      	ldrb	r3, [r3, #18]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 81ca 	beq.w	80019c4 <bmi088_update+0x3ac>
		{
			ret_val = HAL_I2C_Mem_Read(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.accel, 9, 20);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69d8      	ldr	r0, [r3, #28]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2214      	movs	r2, #20
 8001638:	9202      	str	r2, [sp, #8]
 800163a:	2209      	movs	r2, #9
 800163c:	9201      	str	r2, [sp, #4]
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	2212      	movs	r2, #18
 8001644:	2130      	movs	r1, #48	; 0x30
 8001646:	f002 fac5 	bl	8003bd4 <HAL_I2C_Mem_Read>
 800164a:	4603      	mov	r3, r0
 800164c:	77fb      	strb	r3, [r7, #31]
			if(ret_val)
 800164e:	7ffb      	ldrb	r3, [r7, #31]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f040 82f5 	bne.w	8001c40 <bmi088_update+0x628>
				return;
			HAL_I2C_Mem_Read(BMI->deviceConfig.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.temp, 2, 20);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69d8      	ldr	r0, [r3, #28]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3309      	adds	r3, #9
 800165e:	2214      	movs	r2, #20
 8001660:	9202      	str	r2, [sp, #8]
 8001662:	2202      	movs	r2, #2
 8001664:	9201      	str	r2, [sp, #4]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2301      	movs	r3, #1
 800166a:	2222      	movs	r2, #34	; 0x22
 800166c:	2130      	movs	r1, #48	; 0x30
 800166e:	f002 fab1 	bl	8003bd4 <HAL_I2C_Mem_Read>

			uint16_t Temp_uint11 = (BMI->rawDatas.temp[0] << 3) | (BMI->rawDatas.temp[1] >> 5);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7a5b      	ldrb	r3, [r3, #9]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	b21a      	sxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7a9b      	ldrb	r3, [r3, #10]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	b2db      	uxtb	r3, r3
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21b      	sxth	r3, r3
 8001688:	83bb      	strh	r3, [r7, #28]
			int16_t Temp_int11 = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	837b      	strh	r3, [r7, #26]
			if (Temp_uint11 > 1023){
 800168e:	8bbb      	ldrh	r3, [r7, #28]
 8001690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001694:	d305      	bcc.n	80016a2 <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 8001696:	8bbb      	ldrh	r3, [r7, #28]
 8001698:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800169c:	b29b      	uxth	r3, r3
 800169e:	837b      	strh	r3, [r7, #26]
 80016a0:	e024      	b.n	80016ec <bmi088_update+0xd4>
			}
			else{
				Temp_int11 = Temp_uint11;
 80016a2:	8bbb      	ldrh	r3, [r7, #28]
 80016a4:	837b      	strh	r3, [r7, #26]
				BMI->temp = (float)Temp_int11 * 0.125 + 23.0;
 80016a6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	ee17 0a90 	vmov	r0, s15
 80016b6:	f7fe ff67 	bl	8000588 <__aeabi_f2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80016c2:	f7fe ffb9 	bl	8000638 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4bad      	ldr	r3, [pc, #692]	; (8001988 <bmi088_update+0x370>)
 80016d4:	f7fe fdfa 	bl	80002cc <__adddf3>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa82 	bl	8000be8 <__aeabi_d2f>
 80016e4:	4602      	mov	r2, r0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			}
			uint32_t sensorTime = (BMI->rawDatas.accel[8] << 16) | (BMI->rawDatas.accel[7] << 8) | BMI->rawDatas.accel[6];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7a1b      	ldrb	r3, [r3, #8]
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	79db      	ldrb	r3, [r3, #7]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4313      	orrs	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	7992      	ldrb	r2, [r2, #6]
 80016fe:	4313      	orrs	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

			BMI->currentTime= (float)sensorTime * 39.0625 / 1000000.0;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170c:	ee17 0a90 	vmov	r0, s15
 8001710:	f7fe ff3a 	bl	8000588 <__aeabi_f2d>
 8001714:	a396      	add	r3, pc, #600	; (adr r3, 8001970 <bmi088_update+0x358>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff8d 	bl	8000638 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	a394      	add	r3, pc, #592	; (adr r3, 8001978 <bmi088_update+0x360>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7ff f8ae 	bl	800088c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa56 	bl	8000be8 <__aeabi_d2f>
 800173c:	4602      	mov	r2, r0
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

			int16_t acc_z_16 = (BMI->rawDatas.accel[5] << 8) | BMI->rawDatas.accel[4];
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	795b      	ldrb	r3, [r3, #5]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b21a      	sxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	791b      	ldrb	r3, [r3, #4]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	827b      	strh	r3, [r7, #18]
			int16_t acc_y_16 = (BMI->rawDatas.accel[3] << 8) | BMI->rawDatas.accel[2];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	021b      	lsls	r3, r3, #8
 800175c:	b21a      	sxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	789b      	ldrb	r3, [r3, #2]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	823b      	strh	r3, [r7, #16]
			int16_t acc_x_16 = (BMI->rawDatas.accel[1] << 8) | BMI->rawDatas.accel[0];
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	b21a      	sxth	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	b21b      	sxth	r3, r3
 8001776:	4313      	orrs	r3, r2
 8001778:	81fb      	strh	r3, [r7, #14]

			BMI->acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Z_OFFSET;
 800177a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001786:	ee17 0a90 	vmov	r0, s15
 800178a:	f7fe fefd 	bl	8000588 <__aeabi_f2d>
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b7e      	ldr	r3, [pc, #504]	; (800198c <bmi088_update+0x374>)
 8001794:	f7ff f87a 	bl	800088c <__aeabi_ddiv>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b7a      	ldr	r3, [pc, #488]	; (8001990 <bmi088_update+0x378>)
 80017a6:	f7fe ff47 	bl	8000638 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b77      	ldr	r3, [pc, #476]	; (8001994 <bmi088_update+0x37c>)
 80017b8:	f7fe ff3e 	bl	8000638 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7d5b      	ldrb	r3, [r3, #21]
 80017c8:	3301      	adds	r3, #1
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d2:	ee17 0a90 	vmov	r0, s15
 80017d6:	f7fe fed7 	bl	8000588 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ec43 2b11 	vmov	d1, r2, r3
 80017e2:	ed9f 0b67 	vldr	d0, [pc, #412]	; 8001980 <bmi088_update+0x368>
 80017e6:	f008 f91b 	bl	8009a20 <pow>
 80017ea:	ec53 2b10 	vmov	r2, r3, d0
 80017ee:	4620      	mov	r0, r4
 80017f0:	4629      	mov	r1, r5
 80017f2:	f7fe ff21 	bl	8000638 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f7ff f9f3 	bl	8000be8 <__aeabi_d2f>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			BMI->acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_Y_OFFSET;
 800180a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001816:	ee17 0a90 	vmov	r0, s15
 800181a:	f7fe feb5 	bl	8000588 <__aeabi_f2d>
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	4b5a      	ldr	r3, [pc, #360]	; (800198c <bmi088_update+0x374>)
 8001824:	f7ff f832 	bl	800088c <__aeabi_ddiv>
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <bmi088_update+0x378>)
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b53      	ldr	r3, [pc, #332]	; (8001994 <bmi088_update+0x37c>)
 8001848:	f7fe fef6 	bl	8000638 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4614      	mov	r4, r2
 8001852:	461d      	mov	r5, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7d5b      	ldrb	r3, [r3, #21]
 8001858:	3301      	adds	r3, #1
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001862:	ee17 0a90 	vmov	r0, s15
 8001866:	f7fe fe8f 	bl	8000588 <__aeabi_f2d>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b11 	vmov	d1, r2, r3
 8001872:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8001980 <bmi088_update+0x368>
 8001876:	f008 f8d3 	bl	8009a20 <pow>
 800187a:	ec53 2b10 	vmov	r2, r3, d0
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fed9 	bl	8000638 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9ab 	bl	8000be8 <__aeabi_d2f>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			BMI->acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->deviceConfig.acc_range + 1)) - ACCEL_X_OFFSET;
 800189a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a6:	ee17 0a90 	vmov	r0, s15
 80018aa:	f7fe fe6d 	bl	8000588 <__aeabi_f2d>
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <bmi088_update+0x374>)
 80018b4:	f7fe ffea 	bl	800088c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <bmi088_update+0x378>)
 80018c6:	f7fe feb7 	bl	8000638 <__aeabi_dmul>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <bmi088_update+0x37c>)
 80018d8:	f7fe feae 	bl	8000638 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4614      	mov	r4, r2
 80018e2:	461d      	mov	r5, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7d5b      	ldrb	r3, [r3, #21]
 80018e8:	3301      	adds	r3, #1
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fe47 	bl	8000588 <__aeabi_f2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	ec43 2b11 	vmov	d1, r2, r3
 8001902:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001980 <bmi088_update+0x368>
 8001906:	f008 f88b 	bl	8009a20 <pow>
 800190a:	ec53 2b10 	vmov	r2, r3, d0
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe fe91 	bl	8000638 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f963 	bl	8000be8 <__aeabi_d2f>
 8001922:	4602      	mov	r2, r0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

			if(isStarded)
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <bmi088_update+0x380>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d036      	beq.n	80019a0 <bmi088_update+0x388>
			{
				BMI->deltaTime = BMI->currentTime - BMI->lastTime < 0 ? 0.0 : BMI->currentTime - BMI->lastTime;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800193e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001942:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	d502      	bpl.n	8001952 <bmi088_update+0x33a>
 800194c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800199c <bmi088_update+0x384>
 8001950:	e007      	b.n	8001962 <bmi088_update+0x34a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
 8001968:	e020      	b.n	80019ac <bmi088_update+0x394>
 800196a:	bf00      	nop
 800196c:	f3af 8000 	nop.w
 8001970:	00000000 	.word	0x00000000
 8001974:	40438800 	.word	0x40438800
 8001978:	00000000 	.word	0x00000000
 800197c:	412e8480 	.word	0x412e8480
 8001980:	00000000 	.word	0x00000000
 8001984:	40000000 	.word	0x40000000
 8001988:	40370000 	.word	0x40370000
 800198c:	40e00000 	.word	0x40e00000
 8001990:	408f4000 	.word	0x408f4000
 8001994:	3ff80000 	.word	0x3ff80000
 8001998:	200002a8 	.word	0x200002a8
 800199c:	00000000 	.word	0x00000000
			}
			else
			{
				isStarded++;
 80019a0:	4bad      	ldr	r3, [pc, #692]	; (8001c58 <bmi088_update+0x640>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	4bab      	ldr	r3, [pc, #684]	; (8001c58 <bmi088_update+0x640>)
 80019aa:	701a      	strb	r2, [r3, #0]
			}
				BMI->lastTime = BMI->currentTime;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
			BMI->rawDatas.isAccelUpdated = 0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	749a      	strb	r2, [r3, #18]
			isTimeUpdated = 1;
 80019be:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <bmi088_update+0x644>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->rawDatas.isGyroUpdated && isTimeUpdated)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7c5b      	ldrb	r3, [r3, #17]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 813c 	beq.w	8001c46 <bmi088_update+0x62e>
 80019ce:	4ba3      	ldr	r3, [pc, #652]	; (8001c5c <bmi088_update+0x644>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8137 	beq.w	8001c46 <bmi088_update+0x62e>
		{
			if(isStarded){
 80019d8:	4b9f      	ldr	r3, [pc, #636]	; (8001c58 <bmi088_update+0x640>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8128 	beq.w	8001c32 <bmi088_update+0x61a>
				ret_val = HAL_I2C_Mem_Read(BMI->deviceConfig.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->rawDatas.gyro, 6, 10);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69d8      	ldr	r0, [r3, #28]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	330b      	adds	r3, #11
 80019ea:	220a      	movs	r2, #10
 80019ec:	9202      	str	r2, [sp, #8]
 80019ee:	2206      	movs	r2, #6
 80019f0:	9201      	str	r2, [sp, #4]
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2301      	movs	r3, #1
 80019f6:	2202      	movs	r2, #2
 80019f8:	21d0      	movs	r1, #208	; 0xd0
 80019fa:	f002 f8eb 	bl	8003bd4 <HAL_I2C_Mem_Read>
 80019fe:	4603      	mov	r3, r0
 8001a00:	77fb      	strb	r3, [r7, #31]
				if(ret_val)
 8001a02:	7ffb      	ldrb	r3, [r7, #31]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f040 811d 	bne.w	8001c44 <bmi088_update+0x62c>
					return;
				int16_t gyro_z_16 = (BMI->rawDatas.gyro[5] << 8) | BMI->rawDatas.gyro[4];
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	7c1b      	ldrb	r3, [r3, #16]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7bdb      	ldrb	r3, [r3, #15]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	81bb      	strh	r3, [r7, #12]
				int16_t gyro_y_16 = (BMI->rawDatas.gyro[3] << 8) | BMI->rawDatas.gyro[2];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7b9b      	ldrb	r3, [r3, #14]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7b5b      	ldrb	r3, [r3, #13]
 8001a28:	b21b      	sxth	r3, r3
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	817b      	strh	r3, [r7, #10]
				int16_t gyro_x_16 = (BMI->rawDatas.gyro[1] << 8) | BMI->rawDatas.gyro[0];
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7b1b      	ldrb	r3, [r3, #12]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7adb      	ldrb	r3, [r3, #11]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	813b      	strh	r3, [r7, #8]
				/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Z_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_Y_OFFSET) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->deviceConfig.gyro_range) - GYRO_X_OFFSET) * BMI->deltaTime;
				 */
				BMI->gyro_z = (((double)gyro_z_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals[0]);
 8001a40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd8d 	bl	8000564 <__aeabi_i2d>
 8001a4a:	a381      	add	r3, pc, #516	; (adr r3, 8001c50 <bmi088_update+0x638>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe ff1c 	bl	800088c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7e9b      	ldrb	r3, [r3, #26]
 8001a60:	461a      	mov	r2, r3
 8001a62:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a66:	4113      	asrs	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd7b 	bl	8000564 <__aeabi_i2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fddf 	bl	8000638 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	4b77      	ldr	r3, [pc, #476]	; (8001c60 <bmi088_update+0x648>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fc1e 	bl	80002c8 <__aeabi_dsub>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
				BMI->gyro_y = (((double)gyro_y_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals[1]);
 8001a96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd62 	bl	8000564 <__aeabi_i2d>
 8001aa0:	a36b      	add	r3, pc, #428	; (adr r3, 8001c50 <bmi088_update+0x638>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fef1 	bl	800088c <__aeabi_ddiv>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7e9b      	ldrb	r3, [r3, #26]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001abc:	4113      	asrs	r3, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd50 	bl	8000564 <__aeabi_i2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fdb4 	bl	8000638 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4b61      	ldr	r3, [pc, #388]	; (8001c60 <bmi088_update+0x648>)
 8001ada:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ade:	f7fe fbf3 	bl	80002c8 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
				BMI->gyro_x = (((double)gyro_x_16 / 32767.0) * (double)(2000 >> BMI->deviceConfig.gyro_range) - offset_vals[2]);
 8001aec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd37 	bl	8000564 <__aeabi_i2d>
 8001af6:	a356      	add	r3, pc, #344	; (adr r3, 8001c50 <bmi088_update+0x638>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fec6 	bl	800088c <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	461d      	mov	r5, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e9b      	ldrb	r3, [r3, #26]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b12:	4113      	asrs	r3, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fd25 	bl	8000564 <__aeabi_i2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fd89 	bl	8000638 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <bmi088_update+0x648>)
 8001b30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b34:	f7fe fbc8 	bl	80002c8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

				BMI->gyro_z_angle += (BMI->gyro_z) * BMI->deltaTime;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd1d 	bl	8000588 <__aeabi_f2d>
 8001b4e:	4680      	mov	r8, r0
 8001b50:	4689      	mov	r9, r1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fd12 	bl	8000588 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4640      	mov	r0, r8
 8001b76:	4649      	mov	r1, r9
 8001b78:	f7fe fba8 	bl	80002cc <__adddf3>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7ff f830 	bl	8000be8 <__aeabi_d2f>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				BMI->gyro_y_angle += (BMI->gyro_y) * BMI->deltaTime;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcf6 	bl	8000588 <__aeabi_f2d>
 8001b9c:	4680      	mov	r8, r0
 8001b9e:	4689      	mov	r9, r1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe fceb 	bl	8000588 <__aeabi_f2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fd3d 	bl	8000638 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4640      	mov	r0, r8
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	f7fe fb81 	bl	80002cc <__adddf3>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7ff f809 	bl	8000be8 <__aeabi_d2f>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				BMI->gyro_x_angle += (BMI->gyro_x) * BMI->deltaTime;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fccf 	bl	8000588 <__aeabi_f2d>
 8001bea:	4680      	mov	r8, r0
 8001bec:	4689      	mov	r9, r1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	e9d3 4522 	ldrd	r4, r5, [r3, #136]	; 0x88
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcc4 	bl	8000588 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4620      	mov	r0, r4
 8001c06:	4629      	mov	r1, r5
 8001c08:	f7fe fd16 	bl	8000638 <__aeabi_dmul>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4640      	mov	r0, r8
 8001c12:	4649      	mov	r1, r9
 8001c14:	f7fe fb5a 	bl	80002cc <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ffe2 	bl	8000be8 <__aeabi_d2f>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/*
				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
				quaternionToEuler();
				*/
				is_gyro_offset = 1;
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <bmi088_update+0x64c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
			}
			BMI->rawDatas.isGyroUpdated = 0;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	745a      	strb	r2, [r3, #17]
			isTimeUpdated = 0;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <bmi088_update+0x644>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <bmi088_update+0x62e>
				return;
 8001c40:	bf00      	nop
 8001c42:	e000      	b.n	8001c46 <bmi088_update+0x62e>
					return;
 8001c44:	bf00      	nop
		}
}
 8001c46:	3720      	adds	r7, #32
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c4e:	bf00      	nop
 8001c50:	00000000 	.word	0x00000000
 8001c54:	40dfffc0 	.word	0x40dfffc0
 8001c58:	200002a8 	.word	0x200002a8
 8001c5c:	2000028c 	.word	0x2000028c
 8001c60:	20000290 	.word	0x20000290
 8001c64:	200002a9 	.word	0x200002a9

08001c68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a3b      	ldr	r2, [pc, #236]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a34      	ldr	r2, [pc, #208]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b32      	ldr	r3, [pc, #200]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a2d      	ldr	r2, [pc, #180]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <MX_GPIO_Init+0x128>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MD_IN_B_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f241 0110 	movw	r1, #4112	; 0x1010
 8001cf4:	4827      	ldr	r0, [pc, #156]	; (8001d94 <MX_GPIO_Init+0x12c>)
 8001cf6:	f001 fcfd 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_Pin|SENSOR_EN_Pin|MD_IN_A_Pin, GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001d00:	4825      	ldr	r0, [pc, #148]	; (8001d98 <MX_GPIO_Init+0x130>)
 8001d02:	f001 fcf7 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MD_IN_B_Pin|BUZZER_Pin;
 8001d06:	f241 0310 	movw	r3, #4112	; 0x1010
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481d      	ldr	r0, [pc, #116]	; (8001d94 <MX_GPIO_Init+0x12c>)
 8001d20:	f001 fb54 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MD_ISEN_B_Pin|MD_ISEN_A_Pin;
 8001d24:	23a0      	movs	r3, #160	; 0xa0
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4817      	ldr	r0, [pc, #92]	; (8001d94 <MX_GPIO_Init+0x12c>)
 8001d38:	f001 fb48 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_Pin|SENSOR_EN_Pin|MD_IN_A_Pin;
 8001d3c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4810      	ldr	r0, [pc, #64]	; (8001d98 <MX_GPIO_Init+0x130>)
 8001d56:	f001 fb39 	bl	80033cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = INT2_XL_Pin|INT_GYRO_Pin|INT_ACC_Pin;
 8001d5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <MX_GPIO_Init+0x130>)
 8001d72:	f001 fb2b 	bl	80033cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2017      	movs	r0, #23
 8001d7c:	f001 fae1 	bl	8003342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d80:	2017      	movs	r0, #23
 8001d82:	f001 fafa 	bl	800337a <HAL_NVIC_EnableIRQ>

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	; 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40020400 	.word	0x40020400

08001d9c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <MX_I2C1_Init+0x50>)
 8001da2:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <MX_I2C1_Init+0x54>)
 8001da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <MX_I2C1_Init+0x50>)
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <MX_I2C1_Init+0x58>)
 8001daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_I2C1_Init+0x50>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_I2C1_Init+0x50>)
 8001dda:	f001 fcbd 	bl	8003758 <HAL_I2C_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de4:	f000 fa56 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200002b0 	.word	0x200002b0
 8001df0:	40005400 	.word	0x40005400
 8001df4:	000186a0 	.word	0x000186a0

08001df8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <MX_I2C3_Init+0x54>)
 8001e00:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <MX_I2C3_Init+0x58>)
 8001e06:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	; (8001e48 <MX_I2C3_Init+0x50>)
 8001e36:	f001 fc8f 	bl	8003758 <HAL_I2C_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e40:	f000 fa28 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000304 	.word	0x20000304
 8001e4c:	40005c00 	.word	0x40005c00
 8001e50:	000186a0 	.word	0x000186a0

08001e54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08c      	sub	sp, #48	; 0x30
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <HAL_I2C_MspInit+0x128>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d12c      	bne.n	8001ed0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e96:	2312      	movs	r3, #18
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4835      	ldr	r0, [pc, #212]	; (8001f84 <HAL_I2C_MspInit+0x130>)
 8001eae:	f001 fa8d 	bl	80033cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001ece:	e050      	b.n	8001f72 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <HAL_I2C_MspInit+0x134>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d14b      	bne.n	8001f72 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f18:	2312      	movs	r3, #18
 8001f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f24:	2304      	movs	r3, #4
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4817      	ldr	r0, [pc, #92]	; (8001f8c <HAL_I2C_MspInit+0x138>)
 8001f30:	f001 fa4c 	bl	80033cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f46:	2304      	movs	r3, #4
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <HAL_I2C_MspInit+0x13c>)
 8001f52:	f001 fa3b 	bl	80033cc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_I2C_MspInit+0x12c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
}
 8001f72:	bf00      	nop
 8001f74:	3730      	adds	r7, #48	; 0x30
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40005400 	.word	0x40005400
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40005c00 	.word	0x40005c00
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020000 	.word	0x40020000

08001f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b09a      	sub	sp, #104	; 0x68
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f9a:	f000 fdcb 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9e:	f000 f893 	bl	80020c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa2:	f7ff fe61 	bl	8001c68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001fa6:	f7ff fef9 	bl	8001d9c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001faa:	f7ff ff25 	bl	8001df8 <MX_I2C3_Init>
  MX_SPI3_Init();
 8001fae:	f000 f977 	bl	80022a0 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001fb2:	f000 fd03 	bl	80029bc <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001fb6:	f000 fb6b 	bl	8002690 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001fba:	f7fe ffe7 	bl	8000f8c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001fbe:	f7ff f837 	bl	8001030 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001fc2:	f000 fc05 	bl	80027d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001fc6:	2017      	movs	r0, #23
 8001fc8:	f001 f9e5 	bl	8003396 <HAL_NVIC_DisableIRQ>

  //HAL_Delay(4000);

  reg_3v3_on();
 8001fcc:	f000 f91a 	bl	8002204 <reg_3v3_on>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001fd0:	2104      	movs	r1, #4
 8001fd2:	4833      	ldr	r0, [pc, #204]	; (80020a0 <main+0x10c>)
 8001fd4:	f003 faea 	bl	80055ac <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001fd8:	213c      	movs	r1, #60	; 0x3c
 8001fda:	4832      	ldr	r0, [pc, #200]	; (80020a4 <main+0x110>)
 8001fdc:	f003 fc54 	bl	8005888 <HAL_TIM_Encoder_Start>

  //imu start
  if(!bmi_imu_init()){
 8001fe0:	f000 f8e4 	bl	80021ac <bmi_imu_init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <main+0x5e>
	  serial_println("bmi fail");
 8001fea:	482f      	ldr	r0, [pc, #188]	; (80020a8 <main+0x114>)
 8001fec:	f000 f91a 	bl	8002224 <serial_println>
 8001ff0:	e002      	b.n	8001ff8 <main+0x64>
  }
  else{
	  serial_println("bmi success");
 8001ff2:	482e      	ldr	r0, [pc, #184]	; (80020ac <main+0x118>)
 8001ff4:	f000 f916 	bl	8002224 <serial_println>
  }

  bmi088_config(&bmi_imu);
 8001ff8:	482d      	ldr	r0, [pc, #180]	; (80020b0 <main+0x11c>)
 8001ffa:	f7ff f90f 	bl	800121c <bmi088_config>

  HAL_GPIO_WritePin(MD_IN_A_GPIO_Port, MD_IN_A_Pin, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002004:	482b      	ldr	r0, [pc, #172]	; (80020b4 <main+0x120>)
 8002006:	f001 fb75 	bl	80036f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MD_IN_B_GPIO_Port, MD_IN_B_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2110      	movs	r1, #16
 800200e:	482a      	ldr	r0, [pc, #168]	; (80020b8 <main+0x124>)
 8002010:	f001 fb70 	bl	80036f4 <HAL_GPIO_WritePin>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <main+0x10c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2264      	movs	r2, #100	; 0x64
 800201a:	639a      	str	r2, [r3, #56]	; 0x38
*/

//	  sprintf((char*)str, "encoder =  %lu\n\r", (TIM2->CNT)>>2);
//	  HAL_UART_Transmit(&TTL_HNDLR, str, strlen((char*)str), 50);

	  sprintf((char*)str, "bmi accel x =  %f\n\r", bmi_imu.acc_x);
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <main+0x11c>)
 800201e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fab0 	bl	8000588 <__aeabi_f2d>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	1d38      	adds	r0, r7, #4
 800202e:	4923      	ldr	r1, [pc, #140]	; (80020bc <main+0x128>)
 8002030:	f005 fa7e 	bl	8007530 <siprintf>
	  HAL_UART_Transmit(&TTL_HNDLR, str, strlen((char*)str), 50);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f8ea 	bl	8000210 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	b29a      	uxth	r2, r3
 8002040:	1d39      	adds	r1, r7, #4
 8002042:	2332      	movs	r3, #50	; 0x32
 8002044:	481e      	ldr	r0, [pc, #120]	; (80020c0 <main+0x12c>)
 8002046:	f004 fa62 	bl	800650e <HAL_UART_Transmit>

	  HAL_UART_Transmit(&TTL_HNDLR, (uint8_t*)"---------------------------\r\n", strlen("---------------------------\r\n"), 50);
 800204a:	2332      	movs	r3, #50	; 0x32
 800204c:	221d      	movs	r2, #29
 800204e:	491d      	ldr	r1, [pc, #116]	; (80020c4 <main+0x130>)
 8002050:	481b      	ldr	r0, [pc, #108]	; (80020c0 <main+0x12c>)
 8002052:	f004 fa5c 	bl	800650e <HAL_UART_Transmit>


	  bmi088_update(&bmi_imu);
 8002056:	4816      	ldr	r0, [pc, #88]	; (80020b0 <main+0x11c>)
 8002058:	f7ff fade 	bl	8001618 <bmi088_update>

	  HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <main+0x120>)
 8002064:	f001 fb46 	bl	80036f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800206e:	4812      	ldr	r0, [pc, #72]	; (80020b8 <main+0x124>)
 8002070:	f001 fb40 	bl	80036f4 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 8002074:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002078:	f000 fdce 	bl	8002c18 <HAL_Delay>

	  HAL_GPIO_WritePin(MCU_LED_GPIO_Port, MCU_LED_Pin, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <main+0x120>)
 8002084:	f001 fb36 	bl	80036f4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800208e:	480a      	ldr	r0, [pc, #40]	; (80020b8 <main+0x124>)
 8002090:	f001 fb30 	bl	80036f4 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 8002094:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002098:	f000 fdbe 	bl	8002c18 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 800209c:	e7ba      	b.n	8002014 <main+0x80>
 800209e:	bf00      	nop
 80020a0:	20000494 	.word	0x20000494
 80020a4:	200004dc 	.word	0x200004dc
 80020a8:	0800a870 	.word	0x0800a870
 80020ac:	0800a87c 	.word	0x0800a87c
 80020b0:	20000358 	.word	0x20000358
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020000 	.word	0x40020000
 80020bc:	0800a888 	.word	0x0800a888
 80020c0:	20000524 	.word	0x20000524
 80020c4:	0800a89c 	.word	0x0800a89c

080020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	; 0x50
 80020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	2234      	movs	r2, #52	; 0x34
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 fdb8 	bl	8006c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <SystemClock_Config+0xdc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <SystemClock_Config+0xdc>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <SystemClock_Config+0xdc>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002108:	2300      	movs	r3, #0
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <SystemClock_Config+0xe0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a25      	ldr	r2, [pc, #148]	; (80021a8 <SystemClock_Config+0xe0>)
 8002112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <SystemClock_Config+0xe0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002124:	2301      	movs	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212e:	2302      	movs	r3, #2
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002138:	2304      	movs	r3, #4
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800213c:	23b4      	movs	r3, #180	; 0xb4
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002140:	2302      	movs	r3, #2
 8002142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002144:	2302      	movs	r3, #2
 8002146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800214c:	f107 031c 	add.w	r3, r7, #28
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fe5b 	bl	8004e0c <HAL_RCC_OscConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800215c:	f000 f89a 	bl	8002294 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002160:	f002 faba 	bl	80046d8 <HAL_PWREx_EnableOverDrive>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800216a:	f000 f893 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216e:	230f      	movs	r3, #15
 8002170:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002172:	2302      	movs	r3, #2
 8002174:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800217a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800217e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002184:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	2105      	movs	r1, #5
 800218c:	4618      	mov	r0, r3
 800218e:	f002 faf3 	bl	8004778 <HAL_RCC_ClockConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002198:	f000 f87c 	bl	8002294 <Error_Handler>
  }
}
 800219c:	bf00      	nop
 800219e:	3750      	adds	r7, #80	; 0x50
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40007000 	.word	0x40007000

080021ac <bmi_imu_init>:

/* USER CODE BEGIN 4 */

//BMI sensor initialize function.
uint8_t bmi_imu_init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	//Acc config
	bmi_imu.deviceConfig.acc_bandwith = ACC_BWP_OSR4;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <bmi_imu_init+0x50>)
 80021b2:	2208      	movs	r2, #8
 80021b4:	759a      	strb	r2, [r3, #22]
	bmi_imu.deviceConfig.acc_outputDateRate = ACC_ODR_200;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <bmi_imu_init+0x50>)
 80021b8:	2209      	movs	r2, #9
 80021ba:	75da      	strb	r2, [r3, #23]
	bmi_imu.deviceConfig.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <bmi_imu_init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	751a      	strb	r2, [r3, #20]
	bmi_imu.deviceConfig.acc_range = ACC_RANGE_12G;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <bmi_imu_init+0x50>)
 80021c4:	2202      	movs	r2, #2
 80021c6:	755a      	strb	r2, [r3, #21]

	// Gyro config
	bmi_imu.deviceConfig.gyro_bandWidth = GYRO_BW_230;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <bmi_imu_init+0x50>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	765a      	strb	r2, [r3, #25]
	bmi_imu.deviceConfig.gyro_range = GYRO_RANGE_2000;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <bmi_imu_init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	769a      	strb	r2, [r3, #26]
	bmi_imu.deviceConfig.gyro_powerMode = GYRO_LPM_NORMAL;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <bmi_imu_init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	761a      	strb	r2, [r3, #24]

	bmi_imu.deviceConfig.acc_IRQ = EXTI9_5_IRQn;
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <bmi_imu_init+0x50>)
 80021dc:	2217      	movs	r2, #23
 80021de:	f883 2020 	strb.w	r2, [r3, #32]
	bmi_imu.deviceConfig.gyro_IRQ = EXTI9_5_IRQn;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <bmi_imu_init+0x50>)
 80021e4:	2217      	movs	r2, #23
 80021e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bmi_imu.deviceConfig.BMI_I2c = &IMU_I2C_HNDLR;
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <bmi_imu_init+0x50>)
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <bmi_imu_init+0x54>)
 80021ee:	61da      	str	r2, [r3, #28]

	return	bmi088_init(&bmi_imu);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <bmi_imu_init+0x50>)
 80021f2:	f7fe ffe5 	bl	80011c0 <bmi088_init>
 80021f6:	4603      	mov	r3, r0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000358 	.word	0x20000358
 8002200:	200002b0 	.word	0x200002b0

08002204 <reg_3v3_on>:

//Pcb 3.3 v regulator on function.
void reg_3v3_on()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SENSOR_EN_GPIO_Port, SENSOR_EN_Pin, GPIO_PIN_SET);
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220e:	4804      	ldr	r0, [pc, #16]	; (8002220 <reg_3v3_on+0x1c>)
 8002210:	f001 fa70 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8002214:	2032      	movs	r0, #50	; 0x32
 8002216:	f000 fcff 	bl	8002c18 <HAL_Delay>
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40020400 	.word	0x40020400

08002224 <serial_println>:
	HAL_GPIO_WritePin(SENSOR_EN_GPIO_Port, SENSOR_EN_Pin, GPIO_PIN_RESET);
	HAL_Delay(50);
}

void serial_println(char* str)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&TTL_HNDLR, (uint8_t*)str, strlen(str), 50);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7fd ffef 	bl	8000210 <strlen>
 8002232:	4603      	mov	r3, r0
 8002234:	b29a      	uxth	r2, r3
 8002236:	2332      	movs	r3, #50	; 0x32
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <serial_println+0x30>)
 800223c:	f004 f967 	bl	800650e <HAL_UART_Transmit>
	HAL_UART_Transmit(&TTL_HNDLR, (uint8_t*)"\r\n", 2, 50);
 8002240:	2332      	movs	r3, #50	; 0x32
 8002242:	2202      	movs	r2, #2
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <serial_println+0x34>)
 8002246:	4803      	ldr	r0, [pc, #12]	; (8002254 <serial_println+0x30>)
 8002248:	f004 f961 	bl	800650e <HAL_UART_Transmit>
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000524 	.word	0x20000524
 8002258:	0800a8bc 	.word	0x0800a8bc

0800225c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d102      	bne.n	8002274 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi_imu.rawDatas.isAccelUpdated = 1;
 800226e:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_GPIO_EXTI_Callback+0x34>)
 8002270:	2201      	movs	r2, #1
 8002272:	749a      	strb	r2, [r3, #18]
	}
	if(GPIO_Pin == INT_GYRO_Pin)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800227a:	d102      	bne.n	8002282 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi_imu.rawDatas.isGyroUpdated = 1;
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <HAL_GPIO_EXTI_Callback+0x34>)
 800227e:	2201      	movs	r2, #1
 8002280:	745a      	strb	r2, [r3, #17]
	}
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000358 	.word	0x20000358

08002294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800229c:	e7fe      	b.n	800229c <Error_Handler+0x8>
	...

080022a0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <MX_SPI3_Init+0x64>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <MX_SPI3_Init+0x68>)
 80022a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <MX_SPI3_Init+0x64>)
 80022ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <MX_SPI3_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <MX_SPI3_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_SPI3_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <MX_SPI3_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_SPI3_Init+0x64>)
 80022cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_SPI3_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <MX_SPI3_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_SPI3_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <MX_SPI3_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_SPI3_Init+0x64>)
 80022ec:	220a      	movs	r2, #10
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022f0:	4804      	ldr	r0, [pc, #16]	; (8002304 <MX_SPI3_Init+0x64>)
 80022f2:	f003 f829 	bl	8005348 <HAL_SPI_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80022fc:	f7ff ffca 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000438 	.word	0x20000438
 8002308:	40003c00 	.word	0x40003c00

0800230c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	; 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 031c 	add.w	r3, r7, #28
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a38      	ldr	r2, [pc, #224]	; (800240c <HAL_SPI_MspInit+0x100>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d169      	bne.n	8002402 <HAL_SPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	4a36      	ldr	r2, [pc, #216]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800233c:	6413      	str	r3, [r2, #64]	; 0x40
 800233e:	4b34      	ldr	r3, [pc, #208]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	4b30      	ldr	r3, [pc, #192]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_SPI_MspInit+0x104>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_SPI_MspInit+0x104>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a28      	ldr	r2, [pc, #160]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <HAL_SPI_MspInit+0x104>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_SPI_MspInit+0x104>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> SPI3_NSS
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800239e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023b0:	2306      	movs	r3, #6
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	4619      	mov	r1, r3
 80023ba:	4816      	ldr	r0, [pc, #88]	; (8002414 <HAL_SPI_MspInit+0x108>)
 80023bc:	f001 f806 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ce:	2303      	movs	r3, #3
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023d2:	2306      	movs	r3, #6
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	480e      	ldr	r0, [pc, #56]	; (8002418 <HAL_SPI_MspInit+0x10c>)
 80023de:	f000 fff5 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80023e2:	2318      	movs	r3, #24
 80023e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023f2:	2306      	movs	r3, #6
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 031c 	add.w	r3, r7, #28
 80023fa:	4619      	mov	r1, r3
 80023fc:	4807      	ldr	r0, [pc, #28]	; (800241c <HAL_SPI_MspInit+0x110>)
 80023fe:	f000 ffe5 	bl	80033cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	; 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40003c00 	.word	0x40003c00
 8002410:	40023800 	.word	0x40023800
 8002414:	40020000 	.word	0x40020000
 8002418:	40020800 	.word	0x40020800
 800241c:	40020400 	.word	0x40020400

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <HAL_MspInit+0x4c>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a0f      	ldr	r2, [pc, #60]	; (800246c <HAL_MspInit+0x4c>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b0d      	ldr	r3, [pc, #52]	; (800246c <HAL_MspInit+0x4c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_MspInit+0x4c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	4a08      	ldr	r2, [pc, #32]	; (800246c <HAL_MspInit+0x4c>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	; 0x40
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <HAL_MspInit+0x4c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <NMI_Handler+0x4>

08002476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247a:	e7fe      	b.n	800247a <HardFault_Handler+0x4>

0800247c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <MemManage_Handler+0x4>

08002482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <BusFault_Handler+0x4>

08002488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler+0x4>

0800248e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024bc:	f000 fb8c 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT2_XL_Pin);
 80024c8:	2020      	movs	r0, #32
 80024ca:	f001 f92d 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80024ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024d2:	f001 f929 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80024d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024da:	f001 f925 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0
	return 1;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_kill>:

int _kill(int pid, int sig)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024fc:	f004 fb7c 	bl	8006bf8 <__errno>
 8002500:	4603      	mov	r3, r0
 8002502:	2216      	movs	r2, #22
 8002504:	601a      	str	r2, [r3, #0]
	return -1;
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_exit>:

void _exit (int status)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800251a:	f04f 31ff 	mov.w	r1, #4294967295
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffe7 	bl	80024f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002524:	e7fe      	b.n	8002524 <_exit+0x12>

08002526 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	e00a      	b.n	800254e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002538:	f3af 8000 	nop.w
 800253c:	4601      	mov	r1, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	60ba      	str	r2, [r7, #8]
 8002544:	b2ca      	uxtb	r2, r1
 8002546:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	429a      	cmp	r2, r3
 8002554:	dbf0      	blt.n	8002538 <_read+0x12>
	}

return len;
 8002556:	687b      	ldr	r3, [r7, #4]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	e009      	b.n	8002586 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	dbf1      	blt.n	8002572 <_write+0x12>
	}
	return len;
 800258e:	687b      	ldr	r3, [r7, #4]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_close>:

int _close(int file)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c0:	605a      	str	r2, [r3, #4]
	return 0;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <_isatty>:

int _isatty(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
	return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f004 fae2 	bl	8006bf8 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20020000 	.word	0x20020000
 8002660:	00000400 	.word	0x00000400
 8002664:	20000490 	.word	0x20000490
 8002668:	20000580 	.word	0x20000580

0800266c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b096      	sub	sp, #88	; 0x58
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	615a      	str	r2, [r3, #20]
 80026c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2220      	movs	r2, #32
 80026c6:	2100      	movs	r1, #0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fabf 	bl	8006c4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026d0:	4a3e      	ldr	r2, [pc, #248]	; (80027cc <MX_TIM1_Init+0x13c>)
 80026d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 80026d4:	4b3c      	ldr	r3, [pc, #240]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026d6:	22b3      	movs	r2, #179	; 0xb3
 80026d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026e2:	2263      	movs	r2, #99	; 0x63
 80026e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026f8:	4833      	ldr	r0, [pc, #204]	; (80027c8 <MX_TIM1_Init+0x138>)
 80026fa:	f002 feae 	bl	800545a <HAL_TIM_Base_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002704:	f7ff fdc6 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800270e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002712:	4619      	mov	r1, r3
 8002714:	482c      	ldr	r0, [pc, #176]	; (80027c8 <MX_TIM1_Init+0x138>)
 8002716:	f003 fa07 	bl	8005b28 <HAL_TIM_ConfigClockSource>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002720:	f7ff fdb8 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002724:	4828      	ldr	r0, [pc, #160]	; (80027c8 <MX_TIM1_Init+0x138>)
 8002726:	f002 fee7 	bl	80054f8 <HAL_TIM_PWM_Init>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002730:	f7ff fdb0 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002734:	2300      	movs	r3, #0
 8002736:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800273c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002740:	4619      	mov	r1, r3
 8002742:	4821      	ldr	r0, [pc, #132]	; (80027c8 <MX_TIM1_Init+0x138>)
 8002744:	f003 fdc8 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800274e:	f7ff fda1 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002752:	2360      	movs	r3, #96	; 0x60
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800275e:	2300      	movs	r3, #0
 8002760:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800276e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002772:	2204      	movs	r2, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4814      	ldr	r0, [pc, #80]	; (80027c8 <MX_TIM1_Init+0x138>)
 8002778:	f003 f914 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002782:	f7ff fd87 	bl	8002294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800279a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4807      	ldr	r0, [pc, #28]	; (80027c8 <MX_TIM1_Init+0x138>)
 80027aa:	f003 fe11 	bl	80063d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80027b4:	f7ff fd6e 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027b8:	4803      	ldr	r0, [pc, #12]	; (80027c8 <MX_TIM1_Init+0x138>)
 80027ba:	f000 f8c5 	bl	8002948 <HAL_TIM_MspPostInit>

}
 80027be:	bf00      	nop
 80027c0:	3758      	adds	r7, #88	; 0x58
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000494 	.word	0x20000494
 80027cc:	40010000 	.word	0x40010000

080027d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fa34 	bl	8006c4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ec:	4b21      	ldr	r3, [pc, #132]	; (8002874 <MX_TIM2_Init+0xa4>)
 80027ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <MX_TIM2_Init+0xa4>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <MX_TIM2_Init+0xa4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002800:	4b1c      	ldr	r3, [pc, #112]	; (8002874 <MX_TIM2_Init+0xa4>)
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <MX_TIM2_Init+0xa4>)
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <MX_TIM2_Init+0xa4>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002814:	2301      	movs	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800281c:	2301      	movs	r3, #1
 800281e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002824:	230a      	movs	r3, #10
 8002826:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002828:	2300      	movs	r3, #0
 800282a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002834:	230a      	movs	r3, #10
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002838:	f107 030c 	add.w	r3, r7, #12
 800283c:	4619      	mov	r1, r3
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <MX_TIM2_Init+0xa4>)
 8002840:	f002 ff7c 	bl	800573c <HAL_TIM_Encoder_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800284a:	f7ff fd23 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	; (8002874 <MX_TIM2_Init+0xa4>)
 800285c:	f003 fd3c 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002866:	f7ff fd15 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	3730      	adds	r7, #48	; 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200004dc 	.word	0x200004dc

08002878 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a0b      	ldr	r2, [pc, #44]	; (80028b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d10d      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_TIM_Base_MspInit+0x40>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	4a09      	ldr	r2, [pc, #36]	; (80028b8 <HAL_TIM_Base_MspInit+0x40>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6453      	str	r3, [r2, #68]	; 0x44
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_TIM_Base_MspInit+0x40>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	; 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028dc:	d12b      	bne.n	8002936 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_TIM_Encoder_MspInit+0x84>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a16      	ldr	r2, [pc, #88]	; (8002940 <HAL_TIM_Encoder_MspInit+0x84>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
 80028ee:	4b14      	ldr	r3, [pc, #80]	; (8002940 <HAL_TIM_Encoder_MspInit+0x84>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_TIM_Encoder_MspInit+0x84>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_TIM_Encoder_MspInit+0x84>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_TIM_Encoder_MspInit+0x84>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002916:	2303      	movs	r3, #3
 8002918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002926:	2301      	movs	r3, #1
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	4804      	ldr	r0, [pc, #16]	; (8002944 <HAL_TIM_Encoder_MspInit+0x88>)
 8002932:	f000 fd4b 	bl	80033cc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	; 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40020000 	.word	0x40020000

08002948 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_TIM_MspPostInit+0x68>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d11e      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_TIM_MspPostInit+0x6c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a10      	ldr	r2, [pc, #64]	; (80029b4 <HAL_TIM_MspPostInit+0x6c>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_TIM_MspPostInit+0x6c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002998:	2301      	movs	r3, #1
 800299a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_TIM_MspPostInit+0x70>)
 80029a4:	f000 fd12 	bl	80033cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029a8:	bf00      	nop
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40010000 	.word	0x40010000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <MX_USART3_UART_Init+0x50>)
 80029c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ce:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029e0:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029e2:	220c      	movs	r2, #12
 80029e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e6:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <MX_USART3_UART_Init+0x4c>)
 80029f4:	f003 fd3e 	bl	8006474 <HAL_UART_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80029fe:	f7ff fc49 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000524 	.word	0x20000524
 8002a0c:	40004800 	.word	0x40004800

08002a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a28      	ldr	r2, [pc, #160]	; (8002ad0 <HAL_UART_MspInit+0xc0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d14a      	bne.n	8002ac8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a26      	ldr	r2, [pc, #152]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PB10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a86:	2320      	movs	r3, #32
 8002a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a96:	2307      	movs	r3, #7
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <HAL_UART_MspInit+0xc8>)
 8002aa2:	f000 fc93 	bl	80033cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ab8:	2307      	movs	r3, #7
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4806      	ldr	r0, [pc, #24]	; (8002adc <HAL_UART_MspInit+0xcc>)
 8002ac4:	f000 fc82 	bl	80033cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40004800 	.word	0x40004800
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020400 	.word	0x40020400

08002ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae4:	480d      	ldr	r0, [pc, #52]	; (8002b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ae6:	490e      	ldr	r1, [pc, #56]	; (8002b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aec:	e002      	b.n	8002af4 <LoopCopyDataInit>

08002aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af2:	3304      	adds	r3, #4

08002af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af8:	d3f9      	bcc.n	8002aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002afc:	4c0b      	ldr	r4, [pc, #44]	; (8002b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b00:	e001      	b.n	8002b06 <LoopFillZerobss>

08002b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b04:	3204      	adds	r2, #4

08002b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b08:	d3fb      	bcc.n	8002b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b0a:	f7ff fdaf 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f004 f879 	bl	8006c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b12:	f7ff fa3f 	bl	8001f94 <main>
  bx  lr    
 8002b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b24:	0800acf8 	.word	0x0800acf8
  ldr r2, =_sbss
 8002b28:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002b2c:	2000057c 	.word	0x2000057c

08002b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <HAL_Init+0x40>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_Init+0x40>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_Init+0x40>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 fbe5 	bl	800332c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	200f      	movs	r0, #15
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff fc5a 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fc0b 	bl	80033b2 <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f000 fbc5 	bl	8003342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000008 	.word	0x20000008
 8002bfc:	20000568 	.word	0x20000568

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000568 	.word	0x20000568

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e033      	b.n	8002cde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe fa2a 	bl	80010d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca6:	f023 0302 	bic.w	r3, r3, #2
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f94a 	bl	8002f4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e113      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x244>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b09      	cmp	r3, #9
 8002d12:	d925      	bls.n	8002d60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68d9      	ldr	r1, [r3, #12]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	3b1e      	subs	r3, #30
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43da      	mvns	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	400a      	ands	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68d9      	ldr	r1, [r3, #12]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4403      	add	r3, r0
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	409a      	lsls	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	60da      	str	r2, [r3, #12]
 8002d5e:	e022      	b.n	8002da6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6919      	ldr	r1, [r3, #16]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	2207      	movs	r2, #7
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	400a      	ands	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6919      	ldr	r1, [r3, #16]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4403      	add	r3, r0
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b06      	cmp	r3, #6
 8002dac:	d824      	bhi.n	8002df8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b05      	subs	r3, #5
 8002dc0:	221f      	movs	r2, #31
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	400a      	ands	r2, r1
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	4618      	mov	r0, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b05      	subs	r3, #5
 8002dea:	fa00 f203 	lsl.w	r2, r0, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34
 8002df6:	e04c      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d824      	bhi.n	8002e4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b23      	subs	r3, #35	; 0x23
 8002e12:	221f      	movs	r2, #31
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	400a      	ands	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	3b23      	subs	r3, #35	; 0x23
 8002e3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	631a      	str	r2, [r3, #48]	; 0x30
 8002e48:	e023      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b41      	subs	r3, #65	; 0x41
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b41      	subs	r3, #65	; 0x41
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_ADC_ConfigChannel+0x250>)
 8002e94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a28      	ldr	r2, [pc, #160]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b12      	cmp	r3, #18
 8002ea6:	d10b      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_ADC_ConfigChannel+0x254>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12b      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x23a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_ADC_ConfigChannel+0x258>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <HAL_ADC_ConfigChannel+0x1f4>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b11      	cmp	r3, #17
 8002eda:	d122      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_ADC_ConfigChannel+0x258>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d111      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_ADC_ConfigChannel+0x25c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_ADC_ConfigChannel+0x260>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	0c9a      	lsrs	r2, r3, #18
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f14:	e002      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f9      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40012300 	.word	0x40012300
 8002f3c:	40012000 	.word	0x40012000
 8002f40:	10000012 	.word	0x10000012
 8002f44:	20000000 	.word	0x20000000
 8002f48:	431bde83 	.word	0x431bde83

08002f4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f54:	4b79      	ldr	r3, [pc, #484]	; (800313c <ADC_Init+0x1f0>)
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6859      	ldr	r1, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	4a58      	ldr	r2, [pc, #352]	; (8003140 <ADC_Init+0x1f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ff2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6899      	ldr	r1, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	e00f      	b.n	800304a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003048:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0202 	bic.w	r2, r2, #2
 8003058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6899      	ldr	r1, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7e1b      	ldrb	r3, [r3, #24]
 8003064:	005a      	lsls	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003096:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a2:	3b01      	subs	r3, #1
 80030a4:	035a      	lsls	r2, r3, #13
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e007      	b.n	80030c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	3b01      	subs	r3, #1
 80030dc:	051a      	lsls	r2, r3, #20
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6899      	ldr	r1, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003102:	025a      	lsls	r2, r3, #9
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6899      	ldr	r1, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	029a      	lsls	r2, r3, #10
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	40012300 	.word	0x40012300
 8003140:	0f000001 	.word	0x0f000001

08003144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003154:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003160:	4013      	ands	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800316c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003176:	4a04      	ldr	r2, [pc, #16]	; (8003188 <__NVIC_SetPriorityGrouping+0x44>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	60d3      	str	r3, [r2, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0a1b      	lsrs	r3, r3, #8
 8003196:	f003 0307 	and.w	r3, r3, #7
}
 800319a:	4618      	mov	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	db0b      	blt.n	80031d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	4907      	ldr	r1, [pc, #28]	; (80031e0 <__NVIC_EnableIRQ+0x38>)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	2001      	movs	r0, #1
 80031ca:	fa00 f202 	lsl.w	r2, r0, r2
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000e100 	.word	0xe000e100

080031e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	db12      	blt.n	800321c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f003 021f 	and.w	r2, r3, #31
 80031fc:	490a      	ldr	r1, [pc, #40]	; (8003228 <__NVIC_DisableIRQ+0x44>)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	2001      	movs	r0, #1
 8003206:	fa00 f202 	lsl.w	r2, r0, r2
 800320a:	3320      	adds	r3, #32
 800320c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003210:	f3bf 8f4f 	dsb	sy
}
 8003214:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003216:	f3bf 8f6f 	isb	sy
}
 800321a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100

0800322c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	2b00      	cmp	r3, #0
 800323e:	db0a      	blt.n	8003256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2da      	uxtb	r2, r3
 8003244:	490c      	ldr	r1, [pc, #48]	; (8003278 <__NVIC_SetPriority+0x4c>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	0112      	lsls	r2, r2, #4
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	440b      	add	r3, r1
 8003250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003254:	e00a      	b.n	800326c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	4908      	ldr	r1, [pc, #32]	; (800327c <__NVIC_SetPriority+0x50>)
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	3b04      	subs	r3, #4
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	b2d2      	uxtb	r2, r2
 8003268:	440b      	add	r3, r1
 800326a:	761a      	strb	r2, [r3, #24]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000e100 	.word	0xe000e100
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	; 0x24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f1c3 0307 	rsb	r3, r3, #7
 800329a:	2b04      	cmp	r3, #4
 800329c:	bf28      	it	cs
 800329e:	2304      	movcs	r3, #4
 80032a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2b06      	cmp	r3, #6
 80032a8:	d902      	bls.n	80032b0 <NVIC_EncodePriority+0x30>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3b03      	subs	r3, #3
 80032ae:	e000      	b.n	80032b2 <NVIC_EncodePriority+0x32>
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	f04f 32ff 	mov.w	r2, #4294967295
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43da      	mvns	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43d9      	mvns	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	4313      	orrs	r3, r2
         );
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f8:	d301      	bcc.n	80032fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032fa:	2301      	movs	r3, #1
 80032fc:	e00f      	b.n	800331e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <SysTick_Config+0x40>)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003306:	210f      	movs	r1, #15
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	f7ff ff8e 	bl	800322c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SysTick_Config+0x40>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <SysTick_Config+0x40>)
 8003318:	2207      	movs	r2, #7
 800331a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	e000e010 	.word	0xe000e010

0800332c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff ff05 	bl	8003144 <__NVIC_SetPriorityGrouping>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	4603      	mov	r3, r0
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003354:	f7ff ff1a 	bl	800318c <__NVIC_GetPriorityGrouping>
 8003358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f7ff ff8e 	bl	8003280 <NVIC_EncodePriority>
 8003364:	4602      	mov	r2, r0
 8003366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff5d 	bl	800322c <__NVIC_SetPriority>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	4603      	mov	r3, r0
 8003382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff0d 	bl	80031a8 <__NVIC_EnableIRQ>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff1d 	bl	80031e4 <__NVIC_DisableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ff94 	bl	80032e8 <SysTick_Config>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	e165      	b.n	80036b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	429a      	cmp	r2, r3
 8003402:	f040 8154 	bne.w	80036ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d005      	beq.n	800341e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	2b02      	cmp	r3, #2
 800341c:	d130      	bne.n	8003480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003454:	2201      	movs	r2, #1
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 0201 	and.w	r2, r3, #1
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	2b03      	cmp	r3, #3
 800348a:	d017      	beq.n	80034bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2203      	movs	r2, #3
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d123      	bne.n	8003510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	08da      	lsrs	r2, r3, #3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3208      	adds	r2, #8
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	220f      	movs	r2, #15
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4013      	ands	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4313      	orrs	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	08da      	lsrs	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3208      	adds	r2, #8
 800350a:	69b9      	ldr	r1, [r7, #24]
 800350c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	2203      	movs	r2, #3
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0203 	and.w	r2, r3, #3
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fa02 f303 	lsl.w	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80ae 	beq.w	80036ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b5d      	ldr	r3, [pc, #372]	; (80036cc <HAL_GPIO_Init+0x300>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <HAL_GPIO_Init+0x300>)
 800355c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <HAL_GPIO_Init+0x300>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800356e:	4a58      	ldr	r2, [pc, #352]	; (80036d0 <HAL_GPIO_Init+0x304>)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	220f      	movs	r2, #15
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4f      	ldr	r2, [pc, #316]	; (80036d4 <HAL_GPIO_Init+0x308>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d025      	beq.n	80035e6 <HAL_GPIO_Init+0x21a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4e      	ldr	r2, [pc, #312]	; (80036d8 <HAL_GPIO_Init+0x30c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01f      	beq.n	80035e2 <HAL_GPIO_Init+0x216>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4d      	ldr	r2, [pc, #308]	; (80036dc <HAL_GPIO_Init+0x310>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d019      	beq.n	80035de <HAL_GPIO_Init+0x212>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a4c      	ldr	r2, [pc, #304]	; (80036e0 <HAL_GPIO_Init+0x314>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_GPIO_Init+0x20e>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <HAL_GPIO_Init+0x318>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00d      	beq.n	80035d6 <HAL_GPIO_Init+0x20a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_GPIO_Init+0x31c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x206>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a49      	ldr	r2, [pc, #292]	; (80036ec <HAL_GPIO_Init+0x320>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_GPIO_Init+0x202>
 80035ca:	2306      	movs	r3, #6
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035ce:	2307      	movs	r3, #7
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x21c>
 80035e6:	2300      	movs	r3, #0
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f8:	4935      	ldr	r1, [pc, #212]	; (80036d0 <HAL_GPIO_Init+0x304>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003606:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362a:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <HAL_GPIO_Init+0x324>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_GPIO_Init+0x324>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_GPIO_Init+0x324>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_GPIO_Init+0x324>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f ae96 	bls.w	80033e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	3724      	adds	r7, #36	; 0x24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40013800 	.word	0x40013800
 80036d4:	40020000 	.word	0x40020000
 80036d8:	40020400 	.word	0x40020400
 80036dc:	40020800 	.word	0x40020800
 80036e0:	40020c00 	.word	0x40020c00
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40021400 	.word	0x40021400
 80036ec:	40021800 	.word	0x40021800
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fd88 	bl	800225c <HAL_GPIO_EXTI_Callback>
  }
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e12b      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fb68 	bl	8001e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f001 f8ce 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a81      	ldr	r2, [pc, #516]	; (80039cc <HAL_I2C_Init+0x274>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a80      	ldr	r2, [pc, #512]	; (80039d0 <HAL_I2C_Init+0x278>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a7d      	ldr	r2, [pc, #500]	; (80039d4 <HAL_I2C_Init+0x27c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0e7      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a78      	ldr	r2, [pc, #480]	; (80039d8 <HAL_I2C_Init+0x280>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_I2C_Init+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a69      	ldr	r2, [pc, #420]	; (80039dc <HAL_I2C_Init+0x284>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	495c      	ldr	r1, [pc, #368]	; (80039cc <HAL_I2C_Init+0x274>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d819      	bhi.n	8003894 <HAL_I2C_Init+0x13c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003874:	400b      	ands	r3, r1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_I2C_Init+0x138>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e59      	subs	r1, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fbb1 f3f3 	udiv	r3, r1, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	e051      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003890:	2304      	movs	r3, #4
 8003892:	e04f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_I2C_Init+0x168>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e012      	b.n	80038e6 <HAL_I2C_Init+0x18e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x196>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <HAL_I2C_Init+0x1bc>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e58      	subs	r0, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	fbb0 f3f3 	udiv	r3, r0, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003912:	e00f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003962:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6911      	ldr	r1, [r2, #16]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	000186a0 	.word	0x000186a0
 80039d0:	001e847f 	.word	0x001e847f
 80039d4:	003d08ff 	.word	0x003d08ff
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fa:	f7ff f901 	bl	8002c00 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 80d9 	bne.w	8003bc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2319      	movs	r3, #25
 8003a14:	2201      	movs	r2, #1
 8003a16:	496d      	ldr	r1, [pc, #436]	; (8003bcc <HAL_I2C_Mem_Write+0x1ec>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fc7f 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
 8003a26:	e0cc      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Mem_Write+0x56>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0c5      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d007      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	; 0x21
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	; 0x40
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a4d      	ldr	r2, [pc, #308]	; (8003bd0 <HAL_I2C_Mem_Write+0x1f0>)
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9e:	88f8      	ldrh	r0, [r7, #6]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	8979      	ldrh	r1, [r7, #10]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4603      	mov	r3, r0
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fab6 	bl	8004020 <I2C_RequestMemoryWrite>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d052      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e081      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fd00 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d107      	bne.n	8003ae6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06b      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d11b      	bne.n	8003b60 <HAL_I2C_Mem_Write+0x180>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d017      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1aa      	bne.n	8003abe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fcec 	bl	800454a <I2C_WaitOnBTFFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d107      	bne.n	8003b90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e016      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	00100002 	.word	0x00100002
 8003bd0:	ffff0000 	.word	0xffff0000

08003bd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bee:	f7ff f807 	bl	8002c00 <HAL_GetTick>
 8003bf2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	f040 8208 	bne.w	8004012 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2319      	movs	r3, #25
 8003c08:	2201      	movs	r2, #1
 8003c0a:	497b      	ldr	r1, [pc, #492]	; (8003df8 <HAL_I2C_Mem_Read+0x224>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fb85 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e1fb      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_I2C_Mem_Read+0x56>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e1f4      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d007      	beq.n	8003c50 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2222      	movs	r2, #34	; 0x22
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2240      	movs	r2, #64	; 0x40
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a5b      	ldr	r2, [pc, #364]	; (8003dfc <HAL_I2C_Mem_Read+0x228>)
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c92:	88f8      	ldrh	r0, [r7, #6]
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	8979      	ldrh	r1, [r7, #10]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fa52 	bl	800414c <I2C_RequestMemoryRead>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1b0      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d113      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	623b      	str	r3, [r7, #32]
 8003cce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e184      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d11b      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e164      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d11b      	bne.n	8003d62 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	e144      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	617b      	str	r3, [r7, #20]
 8003d76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d78:	e138      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	f200 80f1 	bhi.w	8003f66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d123      	bne.n	8003dd4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fc1b 	bl	80045cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e139      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd2:	e10b      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d14e      	bne.n	8003e7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de2:	2200      	movs	r2, #0
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <HAL_I2C_Mem_Read+0x22c>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fa98 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e10e      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
 8003df6:	bf00      	nop
 8003df8:	00100002 	.word	0x00100002
 8003dfc:	ffff0000 	.word	0xffff0000
 8003e00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691a      	ldr	r2, [r3, #16]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e78:	e0b8      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	4966      	ldr	r1, [pc, #408]	; (800401c <HAL_I2C_Mem_Read+0x448>)
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fa49 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0bf      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003edc:	2200      	movs	r2, #0
 8003ede:	494f      	ldr	r1, [pc, #316]	; (800401c <HAL_I2C_Mem_Read+0x448>)
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fa1b 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e091      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f64:	e042      	b.n	8003fec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fb2e 	bl	80045cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e04c      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691a      	ldr	r2, [r3, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d118      	bne.n	8003fec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f47f aec2 	bne.w	8003d7a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3728      	adds	r7, #40	; 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	00010004 	.word	0x00010004

08004020 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4603      	mov	r3, r0
 8004030:	817b      	strh	r3, [r7, #10]
 8004032:	460b      	mov	r3, r1
 8004034:	813b      	strh	r3, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004048:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	2200      	movs	r2, #0
 8004052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f960 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d103      	bne.n	800407a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e05f      	b.n	800413e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800408c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	492d      	ldr	r1, [pc, #180]	; (8004148 <I2C_RequestMemoryWrite+0x128>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f998 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e04c      	b.n	800413e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	6a39      	ldr	r1, [r7, #32]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 fa02 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00d      	beq.n	80040e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d107      	bne.n	80040e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e02b      	b.n	800413e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d105      	bne.n	80040f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ec:	893b      	ldrh	r3, [r7, #8]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]
 80040f6:	e021      	b.n	800413c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040f8:	893b      	ldrh	r3, [r7, #8]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	6a39      	ldr	r1, [r7, #32]
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f9dc 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00d      	beq.n	8004132 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b04      	cmp	r3, #4
 800411c:	d107      	bne.n	800412e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e005      	b.n	800413e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004132:	893b      	ldrh	r3, [r7, #8]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	00010002 	.word	0x00010002

0800414c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	461a      	mov	r2, r3
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	460b      	mov	r3, r1
 8004160:	813b      	strh	r3, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004174:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2200      	movs	r2, #0
 800418e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8c2 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ac:	d103      	bne.n	80041b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0aa      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	4952      	ldr	r1, [pc, #328]	; (8004318 <I2C_RequestMemoryRead+0x1cc>)
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f8fa 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e097      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f964 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b04      	cmp	r3, #4
 800420c:	d107      	bne.n	800421e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e076      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004228:	893b      	ldrh	r3, [r7, #8]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	611a      	str	r2, [r3, #16]
 8004232:	e021      	b.n	8004278 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004234:	893b      	ldrh	r3, [r7, #8]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	b29b      	uxth	r3, r3
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f93e 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b04      	cmp	r3, #4
 8004258:	d107      	bne.n	800426a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e050      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	6a39      	ldr	r1, [r7, #32]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f923 	bl	80044c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00d      	beq.n	80042a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	2b04      	cmp	r3, #4
 800428e:	d107      	bne.n	80042a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e035      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f82b 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d103      	bne.n	80042e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e013      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042e8:	897b      	ldrh	r3, [r7, #10]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	4906      	ldr	r1, [pc, #24]	; (8004318 <I2C_RequestMemoryRead+0x1cc>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f863 	bl	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	00010002 	.word	0x00010002

0800431c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432c:	e025      	b.n	800437a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d021      	beq.n	800437a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fe fc63 	bl	8002c00 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e023      	b.n	80043c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10d      	bne.n	80043a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	e00c      	b.n	80043ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d0b6      	beq.n	800432e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
 80043d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043d8:	e051      	b.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e8:	d123      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004402:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0204 	orr.w	r2, r3, #4
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e046      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d021      	beq.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443a:	f7fe fbe1 	bl	8002c00 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d302      	bcc.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d116      	bne.n	800447e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0220 	orr.w	r2, r3, #32
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e020      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d10c      	bne.n	80044a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	43da      	mvns	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	e00b      	b.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	43da      	mvns	r2, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d18d      	bne.n	80043da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d4:	e02d      	b.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f8ce 	bl	8004678 <I2C_IsAcknowledgeFailed>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02d      	b.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d021      	beq.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe fb87 	bl	8002c00 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d116      	bne.n	8004532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f043 0220 	orr.w	r2, r3, #32
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e007      	b.n	8004542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b80      	cmp	r3, #128	; 0x80
 800453e:	d1ca      	bne.n	80044d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b084      	sub	sp, #16
 800454e:	af00      	add	r7, sp, #0
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004556:	e02d      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f88d 	bl	8004678 <I2C_IsAcknowledgeFailed>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e02d      	b.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d021      	beq.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7fe fb46 	bl	8002c00 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d1ca      	bne.n	8004558 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d8:	e042      	b.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d119      	bne.n	800461c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e029      	b.n	8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461c:	f7fe faf0 	bl	8002c00 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d116      	bne.n	8004660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	f043 0220 	orr.w	r2, r3, #32
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e007      	b.n	8004670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d1b5      	bne.n	80045da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468e:	d11b      	bne.n	80046c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f043 0204 	orr.w	r2, r3, #4
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	603b      	str	r3, [r7, #0]
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <HAL_PWREx_EnableOverDrive+0x90>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a1f      	ldr	r2, [pc, #124]	; (8004768 <HAL_PWREx_EnableOverDrive+0x90>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <HAL_PWREx_EnableOverDrive+0x90>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046fe:	4b1b      	ldr	r3, [pc, #108]	; (800476c <HAL_PWREx_EnableOverDrive+0x94>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004704:	f7fe fa7c 	bl	8002c00 <HAL_GetTick>
 8004708:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800470a:	e009      	b.n	8004720 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800470c:	f7fe fa78 	bl	8002c00 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800471a:	d901      	bls.n	8004720 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e01f      	b.n	8004760 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HAL_PWREx_EnableOverDrive+0x98>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d1ee      	bne.n	800470c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004734:	f7fe fa64 	bl	8002c00 <HAL_GetTick>
 8004738:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800473a:	e009      	b.n	8004750 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800473c:	f7fe fa60 	bl	8002c00 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474a:	d901      	bls.n	8004750 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e007      	b.n	8004760 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_EnableOverDrive+0x98>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800475c:	d1ee      	bne.n	800473c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	420e0040 	.word	0x420e0040
 8004770:	40007000 	.word	0x40007000
 8004774:	420e0044 	.word	0x420e0044

08004778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0cc      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d90c      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b65      	ldr	r3, [pc, #404]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a2:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d001      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0b8      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d020      	beq.n	8004802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0304 	and.w	r3, r3, #4
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047cc:	4b59      	ldr	r3, [pc, #356]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	4a58      	ldr	r2, [pc, #352]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e4:	4b53      	ldr	r3, [pc, #332]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	494d      	ldr	r1, [pc, #308]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004816:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d119      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e07f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004832:	2b03      	cmp	r3, #3
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004836:	4b3f      	ldr	r3, [pc, #252]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e06f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e067      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004856:	4b37      	ldr	r3, [pc, #220]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0203 	bic.w	r2, r3, #3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4934      	ldr	r1, [pc, #208]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004864:	4313      	orrs	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004868:	f7fe f9ca 	bl	8002c00 <HAL_GetTick>
 800486c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486e:	e00a      	b.n	8004886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004870:	f7fe f9c6 	bl	8002c00 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e04f      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004886:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 020c 	and.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	429a      	cmp	r2, r3
 8004896:	d1eb      	bne.n	8004870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d20c      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e032      	b.n	8004926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d008      	beq.n	80048de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d009      	beq.n	80048fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	490e      	ldr	r1, [pc, #56]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fe:	f000 f855 	bl	80049ac <HAL_RCC_GetSysClockFreq>
 8004902:	4602      	mov	r2, r0
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	490a      	ldr	r1, [pc, #40]	; (8004938 <HAL_RCC_ClockConfig+0x1c0>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a09      	ldr	r2, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe f92a 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40023c00 	.word	0x40023c00
 8004934:	40023800 	.word	0x40023800
 8004938:	0800a8c0 	.word	0x0800a8c0
 800493c:	20000000 	.word	0x20000000
 8004940:	20000004 	.word	0x20000004

08004944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <HAL_RCC_GetHCLKFreq+0x14>)
 800494a:	681b      	ldr	r3, [r3, #0]
}
 800494c:	4618      	mov	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000000 	.word	0x20000000

0800495c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004960:	f7ff fff0 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 8004964:	4602      	mov	r2, r0
 8004966:	4b05      	ldr	r3, [pc, #20]	; (800497c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	0a9b      	lsrs	r3, r3, #10
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	4903      	ldr	r1, [pc, #12]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004972:	5ccb      	ldrb	r3, [r1, r3]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004978:	4618      	mov	r0, r3
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40023800 	.word	0x40023800
 8004980:	0800a8d0 	.word	0x0800a8d0

08004984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004988:	f7ff ffdc 	bl	8004944 <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0b5b      	lsrs	r3, r3, #13
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	0800a8d0 	.word	0x0800a8d0

080049ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b0:	b0ae      	sub	sp, #184	; 0xb8
 80049b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d2:	4bcb      	ldr	r3, [pc, #812]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	f200 8206 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x440>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a1d 	.word	0x08004a1d
 80049ec:	08004ded 	.word	0x08004ded
 80049f0:	08004ded 	.word	0x08004ded
 80049f4:	08004ded 	.word	0x08004ded
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004ded 	.word	0x08004ded
 8004a00:	08004ded 	.word	0x08004ded
 8004a04:	08004ded 	.word	0x08004ded
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004ded 	.word	0x08004ded
 8004a10:	08004ded 	.word	0x08004ded
 8004a14:	08004ded 	.word	0x08004ded
 8004a18:	08004c1d 	.word	0x08004c1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4bb9      	ldr	r3, [pc, #740]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004a22:	e1e7      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a24:	4bb8      	ldr	r3, [pc, #736]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004a2a:	e1e3      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a2c:	4bb4      	ldr	r3, [pc, #720]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a38:	4bb1      	ldr	r3, [pc, #708]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d071      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a44:	4bae      	ldr	r3, [pc, #696]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	099b      	lsrs	r3, r3, #6
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a50:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	f04f 0000 	mov.w	r0, #0
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	0159      	lsls	r1, r3, #5
 8004a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a7c:	0150      	lsls	r0, r2, #5
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4621      	mov	r1, r4
 8004a84:	1a51      	subs	r1, r2, r1
 8004a86:	6439      	str	r1, [r7, #64]	; 0x40
 8004a88:	4629      	mov	r1, r5
 8004a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	018b      	lsls	r3, r1, #6
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aa6:	4641      	mov	r1, r8
 8004aa8:	018a      	lsls	r2, r1, #6
 8004aaa:	4641      	mov	r1, r8
 8004aac:	1a51      	subs	r1, r2, r1
 8004aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	00cb      	lsls	r3, r1, #3
 8004ac8:	4641      	mov	r1, r8
 8004aca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ace:	4641      	mov	r1, r8
 8004ad0:	00ca      	lsls	r2, r1, #3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4622      	mov	r2, r4
 8004ada:	189b      	adds	r3, r3, r2
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ade:	462b      	mov	r3, r5
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	eb42 0303 	adc.w	r3, r2, r3
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004af4:	4629      	mov	r1, r5
 8004af6:	024b      	lsls	r3, r1, #9
 8004af8:	4621      	mov	r1, r4
 8004afa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004afe:	4621      	mov	r1, r4
 8004b00:	024a      	lsls	r2, r1, #9
 8004b02:	4610      	mov	r0, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b14:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004b18:	f7fc f8b6 	bl	8000c88 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4613      	mov	r3, r2
 8004b22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b26:	e067      	b.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b28:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b34:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b40:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b42:	2300      	movs	r3, #0
 8004b44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b46:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004b4a:	4622      	mov	r2, r4
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	f04f 0000 	mov.w	r0, #0
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	0159      	lsls	r1, r3, #5
 8004b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5c:	0150      	lsls	r0, r2, #5
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4621      	mov	r1, r4
 8004b64:	1a51      	subs	r1, r2, r1
 8004b66:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b68:	4629      	mov	r1, r5
 8004b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	018b      	lsls	r3, r1, #6
 8004b80:	4641      	mov	r1, r8
 8004b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b86:	4641      	mov	r1, r8
 8004b88:	018a      	lsls	r2, r1, #6
 8004b8a:	4641      	mov	r1, r8
 8004b8c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b90:	4649      	mov	r1, r9
 8004b92:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ba2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004baa:	4692      	mov	sl, r2
 8004bac:	469b      	mov	fp, r3
 8004bae:	4623      	mov	r3, r4
 8004bb0:	eb1a 0303 	adds.w	r3, sl, r3
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	028b      	lsls	r3, r1, #10
 8004bce:	4621      	mov	r1, r4
 8004bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	028a      	lsls	r2, r1, #10
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004be0:	2200      	movs	r2, #0
 8004be2:	673b      	str	r3, [r7, #112]	; 0x70
 8004be4:	677a      	str	r2, [r7, #116]	; 0x74
 8004be6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004bea:	f7fc f84d 	bl	8000c88 <__aeabi_uldivmod>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bf8:	4b41      	ldr	r3, [pc, #260]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	3301      	adds	r3, #1
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004c0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c1a:	e0eb      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c1c:	4b38      	ldr	r3, [pc, #224]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c28:	4b35      	ldr	r3, [pc, #212]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d06b      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c34:	4b32      	ldr	r3, [pc, #200]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c46:	663b      	str	r3, [r7, #96]	; 0x60
 8004c48:	2300      	movs	r3, #0
 8004c4a:	667b      	str	r3, [r7, #100]	; 0x64
 8004c4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004c50:	4622      	mov	r2, r4
 8004c52:	462b      	mov	r3, r5
 8004c54:	f04f 0000 	mov.w	r0, #0
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	0159      	lsls	r1, r3, #5
 8004c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c62:	0150      	lsls	r0, r2, #5
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4621      	mov	r1, r4
 8004c6a:	1a51      	subs	r1, r2, r1
 8004c6c:	61b9      	str	r1, [r7, #24]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	eb63 0301 	sbc.w	r3, r3, r1
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004c82:	4659      	mov	r1, fp
 8004c84:	018b      	lsls	r3, r1, #6
 8004c86:	4651      	mov	r1, sl
 8004c88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c8c:	4651      	mov	r1, sl
 8004c8e:	018a      	lsls	r2, r1, #6
 8004c90:	4651      	mov	r1, sl
 8004c92:	ebb2 0801 	subs.w	r8, r2, r1
 8004c96:	4659      	mov	r1, fp
 8004c98:	eb63 0901 	sbc.w	r9, r3, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb0:	4690      	mov	r8, r2
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	eb18 0303 	adds.w	r3, r8, r3
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	eb49 0303 	adc.w	r3, r9, r3
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	024b      	lsls	r3, r1, #9
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cda:	4621      	mov	r1, r4
 8004cdc:	024a      	lsls	r2, r1, #9
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004cea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004cec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cf0:	f7fb ffca 	bl	8000c88 <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cfe:	e065      	b.n	8004dcc <HAL_RCC_GetSysClockFreq+0x420>
 8004d00:	40023800 	.word	0x40023800
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0c:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	2200      	movs	r2, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	4611      	mov	r1, r2
 8004d18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d1c:	653b      	str	r3, [r7, #80]	; 0x50
 8004d1e:	2300      	movs	r3, #0
 8004d20:	657b      	str	r3, [r7, #84]	; 0x54
 8004d22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004d26:	4642      	mov	r2, r8
 8004d28:	464b      	mov	r3, r9
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	0159      	lsls	r1, r3, #5
 8004d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d38:	0150      	lsls	r0, r2, #5
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4641      	mov	r1, r8
 8004d40:	1a51      	subs	r1, r2, r1
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	4649      	mov	r1, r9
 8004d46:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d58:	4659      	mov	r1, fp
 8004d5a:	018b      	lsls	r3, r1, #6
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d62:	4651      	mov	r1, sl
 8004d64:	018a      	lsls	r2, r1, #6
 8004d66:	4651      	mov	r1, sl
 8004d68:	1a54      	subs	r4, r2, r1
 8004d6a:	4659      	mov	r1, fp
 8004d6c:	eb63 0501 	sbc.w	r5, r3, r1
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	00eb      	lsls	r3, r5, #3
 8004d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d7e:	00e2      	lsls	r2, r4, #3
 8004d80:	4614      	mov	r4, r2
 8004d82:	461d      	mov	r5, r3
 8004d84:	4643      	mov	r3, r8
 8004d86:	18e3      	adds	r3, r4, r3
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	eb45 0303 	adc.w	r3, r5, r3
 8004d90:	607b      	str	r3, [r7, #4]
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d9e:	4629      	mov	r1, r5
 8004da0:	028b      	lsls	r3, r1, #10
 8004da2:	4621      	mov	r1, r4
 8004da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004da8:	4621      	mov	r1, r4
 8004daa:	028a      	lsls	r2, r1, #10
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db4:	2200      	movs	r2, #0
 8004db6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004dba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dbe:	f7fb ff63 	bl	8000c88 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	0f1b      	lsrs	r3, r3, #28
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dea:	e003      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004df2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	37b8      	adds	r7, #184	; 0xb8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	00f42400 	.word	0x00f42400

08004e0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e28d      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8083 	beq.w	8004f32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e2c:	4b94      	ldr	r3, [pc, #592]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	d019      	beq.n	8004e6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e38:	4b91      	ldr	r3, [pc, #580]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d106      	bne.n	8004e52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e44:	4b8e      	ldr	r3, [pc, #568]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e50:	d00c      	beq.n	8004e6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e52:	4b8b      	ldr	r3, [pc, #556]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d112      	bne.n	8004e84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e5e:	4b88      	ldr	r3, [pc, #544]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e6a:	d10b      	bne.n	8004e84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6c:	4b84      	ldr	r3, [pc, #528]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d05b      	beq.n	8004f30 <HAL_RCC_OscConfig+0x124>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d157      	bne.n	8004f30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e25a      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e8c:	d106      	bne.n	8004e9c <HAL_RCC_OscConfig+0x90>
 8004e8e:	4b7c      	ldr	r3, [pc, #496]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a7b      	ldr	r2, [pc, #492]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e01d      	b.n	8004ed8 <HAL_RCC_OscConfig+0xcc>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xb4>
 8004ea6:	4b76      	ldr	r3, [pc, #472]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a75      	ldr	r2, [pc, #468]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4b73      	ldr	r3, [pc, #460]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a72      	ldr	r2, [pc, #456]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCC_OscConfig+0xcc>
 8004ec0:	4b6f      	ldr	r3, [pc, #444]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a6e      	ldr	r2, [pc, #440]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	4b6c      	ldr	r3, [pc, #432]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a6b      	ldr	r2, [pc, #428]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d013      	beq.n	8004f08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fd fe8e 	bl	8002c00 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee8:	f7fd fe8a 	bl	8002c00 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e21f      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	4b61      	ldr	r3, [pc, #388]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCC_OscConfig+0xdc>
 8004f06:	e014      	b.n	8004f32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd fe7a 	bl	8002c00 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fd fe76 	bl	8002c00 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e20b      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	4b57      	ldr	r3, [pc, #348]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x104>
 8004f2e:	e000      	b.n	8004f32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d06f      	beq.n	800501e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f3e:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 030c 	and.w	r3, r3, #12
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d017      	beq.n	8004f7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f4a:	4b4d      	ldr	r3, [pc, #308]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d105      	bne.n	8004f62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f56:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6e:	4b44      	ldr	r3, [pc, #272]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x186>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1d3      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b3b      	ldr	r3, [pc, #236]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4937      	ldr	r1, [pc, #220]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e03a      	b.n	800501e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b34      	ldr	r3, [pc, #208]	; (8005084 <HAL_RCC_OscConfig+0x278>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fd fe23 	bl	8002c00 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fd fe1f 	bl	8002c00 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e1b4      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b28      	ldr	r3, [pc, #160]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4925      	ldr	r1, [pc, #148]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
 8004ff0:	e015      	b.n	800501e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b24      	ldr	r3, [pc, #144]	; (8005084 <HAL_RCC_OscConfig+0x278>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fd fe02 	bl	8002c00 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005000:	f7fd fdfe 	bl	8002c00 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e193      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d016      	beq.n	8005060 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005032:	4b15      	ldr	r3, [pc, #84]	; (8005088 <HAL_RCC_OscConfig+0x27c>)
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005038:	f7fd fde2 	bl	8002c00 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005040:	f7fd fdde 	bl	8002c00 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e173      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x274>)
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0x234>
 800505e:	e01b      	b.n	8005098 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005060:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_RCC_OscConfig+0x27c>)
 8005062:	2200      	movs	r2, #0
 8005064:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005066:	f7fd fdcb 	bl	8002c00 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	e00e      	b.n	800508c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800506e:	f7fd fdc7 	bl	8002c00 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d907      	bls.n	800508c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e15c      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
 8005080:	40023800 	.word	0x40023800
 8005084:	42470000 	.word	0x42470000
 8005088:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	4b8a      	ldr	r3, [pc, #552]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800508e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ea      	bne.n	800506e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8097 	beq.w	80051d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050aa:	4b83      	ldr	r3, [pc, #524]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10f      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	4b7f      	ldr	r3, [pc, #508]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	4a7e      	ldr	r2, [pc, #504]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	6413      	str	r3, [r2, #64]	; 0x40
 80050c6:	4b7c      	ldr	r3, [pc, #496]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b79      	ldr	r3, [pc, #484]	; (80052bc <HAL_RCC_OscConfig+0x4b0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b76      	ldr	r3, [pc, #472]	; (80052bc <HAL_RCC_OscConfig+0x4b0>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a75      	ldr	r2, [pc, #468]	; (80052bc <HAL_RCC_OscConfig+0x4b0>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fd fd87 	bl	8002c00 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fd fd83 	bl	8002c00 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e118      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b6c      	ldr	r3, [pc, #432]	; (80052bc <HAL_RCC_OscConfig+0x4b0>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x31e>
 800511c:	4b66      	ldr	r3, [pc, #408]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800511e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005120:	4a65      	ldr	r2, [pc, #404]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6713      	str	r3, [r2, #112]	; 0x70
 8005128:	e01c      	b.n	8005164 <HAL_RCC_OscConfig+0x358>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x340>
 8005132:	4b61      	ldr	r3, [pc, #388]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	4a60      	ldr	r2, [pc, #384]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6713      	str	r3, [r2, #112]	; 0x70
 800513e:	4b5e      	ldr	r3, [pc, #376]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005142:	4a5d      	ldr	r2, [pc, #372]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	6713      	str	r3, [r2, #112]	; 0x70
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0x358>
 800514c:	4b5a      	ldr	r3, [pc, #360]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800514e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005150:	4a59      	ldr	r2, [pc, #356]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005152:	f023 0301 	bic.w	r3, r3, #1
 8005156:	6713      	str	r3, [r2, #112]	; 0x70
 8005158:	4b57      	ldr	r3, [pc, #348]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800515a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515c:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800515e:	f023 0304 	bic.w	r3, r3, #4
 8005162:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d015      	beq.n	8005198 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800516c:	f7fd fd48 	bl	8002c00 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005172:	e00a      	b.n	800518a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005174:	f7fd fd44 	bl	8002c00 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e0d7      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518a:	4b4b      	ldr	r3, [pc, #300]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800518c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0ee      	beq.n	8005174 <HAL_RCC_OscConfig+0x368>
 8005196:	e014      	b.n	80051c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fd fd32 	bl	8002c00 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fd fd2e 	bl	8002c00 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0c1      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b6:	4b40      	ldr	r3, [pc, #256]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ee      	bne.n	80051a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d105      	bne.n	80051d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80051ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80ad 	beq.w	8005338 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 030c 	and.w	r3, r3, #12
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d060      	beq.n	80052ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d145      	bne.n	800527e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f2:	4b33      	ldr	r3, [pc, #204]	; (80052c0 <HAL_RCC_OscConfig+0x4b4>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fd fd02 	bl	8002c00 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fd fcfe 	bl	8002c00 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e093      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	019b      	lsls	r3, r3, #6
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	085b      	lsrs	r3, r3, #1
 8005236:	3b01      	subs	r3, #1
 8005238:	041b      	lsls	r3, r3, #16
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	061b      	lsls	r3, r3, #24
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005248:	071b      	lsls	r3, r3, #28
 800524a:	491b      	ldr	r1, [pc, #108]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCC_OscConfig+0x4b4>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fd fcd3 	bl	8002c00 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7fd fccf 	bl	8002c00 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e064      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x452>
 800527c:	e05c      	b.n	8005338 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCC_OscConfig+0x4b4>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fd fcbc 	bl	8002c00 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fd fcb8 	bl	8002c00 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e04d      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_RCC_OscConfig+0x4ac>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x480>
 80052aa:	e045      	b.n	8005338 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e040      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c4:	4b1f      	ldr	r3, [pc, #124]	; (8005344 <HAL_RCC_OscConfig+0x538>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d030      	beq.n	8005334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d129      	bne.n	8005334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d122      	bne.n	8005334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d119      	bne.n	8005334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	3b01      	subs	r3, #1
 800530e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d10f      	bne.n	8005334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d107      	bne.n	8005334 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800

08005348 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e07b      	b.n	8005452 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d108      	bne.n	8005374 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536a:	d009      	beq.n	8005380 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
 8005372:	e005      	b.n	8005380 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fc ffb6 	bl	800230c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005404:	ea42 0103 	orr.w	r1, r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	f003 0104 	and.w	r1, r3, #4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f003 0210 	and.w	r2, r3, #16
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005440:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e041      	b.n	80054f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d106      	bne.n	8005486 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fd f9f9 	bl	8002878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2202      	movs	r2, #2
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 fc0d 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e041      	b.n	800558e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f839 	bl	8005596 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3304      	adds	r3, #4
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f000 fbbe 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d109      	bne.n	80055d0 <HAL_TIM_PWM_Start+0x24>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	bf14      	ite	ne
 80055c8:	2301      	movne	r3, #1
 80055ca:	2300      	moveq	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	e022      	b.n	8005616 <HAL_TIM_PWM_Start+0x6a>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d109      	bne.n	80055ea <HAL_TIM_PWM_Start+0x3e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	e015      	b.n	8005616 <HAL_TIM_PWM_Start+0x6a>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d109      	bne.n	8005604 <HAL_TIM_PWM_Start+0x58>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e008      	b.n	8005616 <HAL_TIM_PWM_Start+0x6a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e07c      	b.n	8005718 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_TIM_PWM_Start+0x82>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800562c:	e013      	b.n	8005656 <HAL_TIM_PWM_Start+0xaa>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b04      	cmp	r3, #4
 8005632:	d104      	bne.n	800563e <HAL_TIM_PWM_Start+0x92>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800563c:	e00b      	b.n	8005656 <HAL_TIM_PWM_Start+0xaa>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d104      	bne.n	800564e <HAL_TIM_PWM_Start+0xa2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800564c:	e003      	b.n	8005656 <HAL_TIM_PWM_Start+0xaa>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	6839      	ldr	r1, [r7, #0]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fe14 	bl	800628c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a2d      	ldr	r2, [pc, #180]	; (8005720 <HAL_TIM_PWM_Start+0x174>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_TIM_PWM_Start+0xcc>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a2c      	ldr	r2, [pc, #176]	; (8005724 <HAL_TIM_PWM_Start+0x178>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d101      	bne.n	800567c <HAL_TIM_PWM_Start+0xd0>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <HAL_TIM_PWM_Start+0xd2>
 800567c:	2300      	movs	r3, #0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005690:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a22      	ldr	r2, [pc, #136]	; (8005720 <HAL_TIM_PWM_Start+0x174>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a4:	d01d      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1f      	ldr	r2, [pc, #124]	; (8005728 <HAL_TIM_PWM_Start+0x17c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1d      	ldr	r2, [pc, #116]	; (800572c <HAL_TIM_PWM_Start+0x180>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1c      	ldr	r2, [pc, #112]	; (8005730 <HAL_TIM_PWM_Start+0x184>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_TIM_PWM_Start+0x178>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_TIM_PWM_Start+0x188>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_TIM_PWM_Start+0x136>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a16      	ldr	r2, [pc, #88]	; (8005738 <HAL_TIM_PWM_Start+0x18c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d111      	bne.n	8005706 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d010      	beq.n	8005716 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005704:	e007      	b.n	8005716 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0201 	orr.w	r2, r2, #1
 8005714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40010000 	.word	0x40010000
 8005724:	40010400 	.word	0x40010400
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40014000 	.word	0x40014000
 8005738:	40001800 	.word	0x40001800

0800573c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e097      	b.n	8005880 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fd f8a9 	bl	80028bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005780:	f023 0307 	bic.w	r3, r3, #7
 8005784:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f000 fa91 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	4313      	orrs	r3, r2
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80057dc:	f023 030c 	bic.w	r3, r3, #12
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	4313      	orrs	r3, r2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	031b      	lsls	r3, r3, #12
 800580c:	4313      	orrs	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	4313      	orrs	r3, r2
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005898:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d110      	bne.n	80058da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d102      	bne.n	80058c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058be:	7b7b      	ldrb	r3, [r7, #13]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e069      	b.n	800599c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d8:	e031      	b.n	800593e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d110      	bne.n	8005902 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d102      	bne.n	80058ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e6:	7b3b      	ldrb	r3, [r7, #12]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e055      	b.n	800599c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005900:	e01d      	b.n	800593e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d108      	bne.n	800591a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	7b7b      	ldrb	r3, [r7, #13]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d102      	bne.n	800591a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005914:	7b3b      	ldrb	r3, [r7, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e03e      	b.n	800599c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_TIM_Encoder_Start+0xc4>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d008      	beq.n	800595c <HAL_TIM_Encoder_Start+0xd4>
 800594a:	e00f      	b.n	800596c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2201      	movs	r2, #1
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fc99 	bl	800628c <TIM_CCxChannelCmd>
      break;
 800595a:	e016      	b.n	800598a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	2104      	movs	r1, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fc91 	bl	800628c <TIM_CCxChannelCmd>
      break;
 800596a:	e00e      	b.n	800598a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fc89 	bl	800628c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	2104      	movs	r1, #4
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fc82 	bl	800628c <TIM_CCxChannelCmd>
      break;
 8005988:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059be:	2302      	movs	r3, #2
 80059c0:	e0ae      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	f200 809f 	bhi.w	8005b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059d2:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	08005a0d 	.word	0x08005a0d
 80059dc:	08005b11 	.word	0x08005b11
 80059e0:	08005b11 	.word	0x08005b11
 80059e4:	08005b11 	.word	0x08005b11
 80059e8:	08005a4d 	.word	0x08005a4d
 80059ec:	08005b11 	.word	0x08005b11
 80059f0:	08005b11 	.word	0x08005b11
 80059f4:	08005b11 	.word	0x08005b11
 80059f8:	08005a8f 	.word	0x08005a8f
 80059fc:	08005b11 	.word	0x08005b11
 8005a00:	08005b11 	.word	0x08005b11
 8005a04:	08005b11 	.word	0x08005b11
 8005a08:	08005acf 	.word	0x08005acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68b9      	ldr	r1, [r7, #8]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 f9f0 	bl	8005df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0208 	orr.w	r2, r2, #8
 8005a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699a      	ldr	r2, [r3, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6999      	ldr	r1, [r3, #24]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	619a      	str	r2, [r3, #24]
      break;
 8005a4a:	e064      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fa40 	bl	8005ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699a      	ldr	r2, [r3, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6999      	ldr	r1, [r3, #24]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	021a      	lsls	r2, r3, #8
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	619a      	str	r2, [r3, #24]
      break;
 8005a8c:	e043      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fa95 	bl	8005fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0208 	orr.w	r2, r2, #8
 8005aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0204 	bic.w	r2, r2, #4
 8005ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69d9      	ldr	r1, [r3, #28]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	61da      	str	r2, [r3, #28]
      break;
 8005acc:	e023      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 fae9 	bl	80060ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69d9      	ldr	r1, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	021a      	lsls	r2, r3, #8
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	61da      	str	r2, [r3, #28]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_ConfigClockSource+0x1c>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0b4      	b.n	8005cae <HAL_TIM_ConfigClockSource+0x186>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b7c:	d03e      	beq.n	8005bfc <HAL_TIM_ConfigClockSource+0xd4>
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	f200 8087 	bhi.w	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8a:	f000 8086 	beq.w	8005c9a <HAL_TIM_ConfigClockSource+0x172>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d87f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b94:	2b70      	cmp	r3, #112	; 0x70
 8005b96:	d01a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0xa6>
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d87b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005b9c:	2b60      	cmp	r3, #96	; 0x60
 8005b9e:	d050      	beq.n	8005c42 <HAL_TIM_ConfigClockSource+0x11a>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d877      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba4:	2b50      	cmp	r3, #80	; 0x50
 8005ba6:	d03c      	beq.n	8005c22 <HAL_TIM_ConfigClockSource+0xfa>
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d873      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bac:	2b40      	cmp	r3, #64	; 0x40
 8005bae:	d058      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0x13a>
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d86f      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d064      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d86b      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d060      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d867      	bhi.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05c      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d05a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	e062      	b.n	8005c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	6899      	ldr	r1, [r3, #8]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f000 fb35 	bl	800624c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	609a      	str	r2, [r3, #8]
      break;
 8005bfa:	e04f      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	6899      	ldr	r1, [r3, #8]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f000 fb1e 	bl	800624c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c1e:	609a      	str	r2, [r3, #8]
      break;
 8005c20:	e03c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6859      	ldr	r1, [r3, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f000 fa92 	bl	8006158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2150      	movs	r1, #80	; 0x50
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 faeb 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005c40:	e02c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6859      	ldr	r1, [r3, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f000 fab1 	bl	80061b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2160      	movs	r1, #96	; 0x60
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fadb 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005c60:	e01c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f000 fa72 	bl	8006158 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2140      	movs	r1, #64	; 0x40
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 facb 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005c80:	e00c      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f000 fac2 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005c92:	e003      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      break;
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a40      	ldr	r2, [pc, #256]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3d      	ldr	r2, [pc, #244]	; (8005dd0 <TIM_Base_SetConfig+0x118>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a3c      	ldr	r2, [pc, #240]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a3b      	ldr	r2, [pc, #236]	; (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a3a      	ldr	r2, [pc, #232]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d108      	bne.n	8005d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2f      	ldr	r2, [pc, #188]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d02b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d18:	d027      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	; (8005dd0 <TIM_Base_SetConfig+0x118>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d023      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <TIM_Base_SetConfig+0x11c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01f      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <TIM_Base_SetConfig+0x120>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d01b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d017      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	; (8005de0 <TIM_Base_SetConfig+0x128>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <TIM_Base_SetConfig+0x12c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00f      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <TIM_Base_SetConfig+0x130>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00b      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a25      	ldr	r2, [pc, #148]	; (8005dec <TIM_Base_SetConfig+0x134>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a24      	ldr	r2, [pc, #144]	; (8005df0 <TIM_Base_SetConfig+0x138>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a23      	ldr	r2, [pc, #140]	; (8005df4 <TIM_Base_SetConfig+0x13c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d108      	bne.n	8005d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <TIM_Base_SetConfig+0x114>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0xf8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <TIM_Base_SetConfig+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d103      	bne.n	8005db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	615a      	str	r2, [r3, #20]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40000800 	.word	0x40000800
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40010400 	.word	0x40010400
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800
 8005dec:	40001800 	.word	0x40001800
 8005df0:	40001c00 	.word	0x40001c00
 8005df4:	40002000 	.word	0x40002000

08005df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f023 0201 	bic.w	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0303 	bic.w	r3, r3, #3
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 0302 	bic.w	r3, r3, #2
 8005e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <TIM_OC1_SetConfig+0xd8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_OC1_SetConfig+0x64>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1f      	ldr	r2, [pc, #124]	; (8005ed4 <TIM_OC1_SetConfig+0xdc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d10c      	bne.n	8005e76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	f023 0308 	bic.w	r3, r3, #8
 8005e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f023 0304 	bic.w	r3, r3, #4
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a15      	ldr	r2, [pc, #84]	; (8005ed0 <TIM_OC1_SetConfig+0xd8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC1_SetConfig+0x8e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <TIM_OC1_SetConfig+0xdc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d111      	bne.n	8005eaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	621a      	str	r2, [r3, #32]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40010400 	.word	0x40010400

08005ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f023 0210 	bic.w	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 0320 	bic.w	r3, r3, #32
 8005f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <TIM_OC2_SetConfig+0xe4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_OC2_SetConfig+0x68>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	; (8005fc0 <TIM_OC2_SetConfig+0xe8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d10d      	bne.n	8005f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <TIM_OC2_SetConfig+0xe4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_OC2_SetConfig+0x94>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <TIM_OC2_SetConfig+0xe8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d113      	bne.n	8005f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400

08005fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <TIM_OC3_SetConfig+0xe0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x66>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <TIM_OC3_SetConfig+0xe4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10d      	bne.n	8006046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <TIM_OC3_SetConfig+0xe0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_OC3_SetConfig+0x92>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <TIM_OC3_SetConfig+0xe4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d113      	bne.n	800607e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800605c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	4313      	orrs	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	031b      	lsls	r3, r3, #12
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a12      	ldr	r2, [pc, #72]	; (8006150 <TIM_OC4_SetConfig+0xa4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC4_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a11      	ldr	r2, [pc, #68]	; (8006154 <TIM_OC4_SetConfig+0xa8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d109      	bne.n	8006128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800611a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0210 	bic.w	r2, r3, #16
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	f043 0307 	orr.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e05a      	b.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a21      	ldr	r2, [pc, #132]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d01d      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1d      	ldr	r2, [pc, #116]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a15      	ldr	r2, [pc, #84]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d10c      	bne.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4313      	orrs	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40001800 	.word	0x40001800

080063d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e03d      	b.n	8006468 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e03f      	b.n	8006506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fc fab8 	bl	8002a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f929 	bl	8006710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b08a      	sub	sp, #40	; 0x28
 8006512:	af02      	add	r7, sp, #8
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b20      	cmp	r3, #32
 800652c:	d17c      	bne.n	8006628 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <HAL_UART_Transmit+0x2c>
 8006534:	88fb      	ldrh	r3, [r7, #6]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e075      	b.n	800662a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_UART_Transmit+0x3e>
 8006548:	2302      	movs	r3, #2
 800654a:	e06e      	b.n	800662a <HAL_UART_Transmit+0x11c>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2221      	movs	r2, #33	; 0x21
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006562:	f7fc fb4d 	bl	8002c00 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	88fa      	ldrh	r2, [r7, #6]
 800656c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	88fa      	ldrh	r2, [r7, #6]
 8006572:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d108      	bne.n	8006590 <HAL_UART_Transmit+0x82>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e003      	b.n	8006598 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065a0:	e02a      	b.n	80065f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f840 	bl	8006632 <UART_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e036      	b.n	800662a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10b      	bne.n	80065da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	3302      	adds	r3, #2
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e007      	b.n	80065ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	781a      	ldrb	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1cf      	bne.n	80065a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	2140      	movs	r1, #64	; 0x40
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f810 	bl	8006632 <UART_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e006      	b.n	800662a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e000      	b.n	800662a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006628:	2302      	movs	r3, #2
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b090      	sub	sp, #64	; 0x40
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	4613      	mov	r3, r2
 8006640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006642:	e050      	b.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d04c      	beq.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800664c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <UART_WaitOnFlagUntilTimeout+0x30>
 8006652:	f7fc fad5 	bl	8002c00 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665e:	429a      	cmp	r2, r3
 8006660:	d241      	bcs.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	330c      	adds	r3, #12
 8006668:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006682:	637a      	str	r2, [r7, #52]	; 0x34
 8006684:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e5      	bne.n	8006662 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3314      	adds	r3, #20
 800669c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	613b      	str	r3, [r7, #16]
   return(result);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	3314      	adds	r3, #20
 80066b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b6:	623a      	str	r2, [r7, #32]
 80066b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	69f9      	ldr	r1, [r7, #28]
 80066bc:	6a3a      	ldr	r2, [r7, #32]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e00f      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4013      	ands	r3, r2
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	429a      	cmp	r2, r3
 8006702:	d09f      	beq.n	8006644 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3740      	adds	r7, #64	; 0x40
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006714:	b0c0      	sub	sp, #256	; 0x100
 8006716:	af00      	add	r7, sp, #0
 8006718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800672c:	68d9      	ldr	r1, [r3, #12]
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	ea40 0301 	orr.w	r3, r0, r1
 8006738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	431a      	orrs	r2, r3
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	431a      	orrs	r2, r3
 8006750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006768:	f021 010c 	bic.w	r1, r1, #12
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006776:	430b      	orrs	r3, r1
 8006778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678a:	6999      	ldr	r1, [r3, #24]
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	ea40 0301 	orr.w	r3, r0, r1
 8006796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	4b8f      	ldr	r3, [pc, #572]	; (80069dc <UART_SetConfig+0x2cc>)
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d005      	beq.n	80067b0 <UART_SetConfig+0xa0>
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b8d      	ldr	r3, [pc, #564]	; (80069e0 <UART_SetConfig+0x2d0>)
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d104      	bne.n	80067ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80067b0:	f7fe f8e8 	bl	8004984 <HAL_RCC_GetPCLK2Freq>
 80067b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80067b8:	e003      	b.n	80067c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067ba:	f7fe f8cf 	bl	800495c <HAL_RCC_GetPCLK1Freq>
 80067be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067cc:	f040 810c 	bne.w	80069e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80067d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80067de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80067e2:	4622      	mov	r2, r4
 80067e4:	462b      	mov	r3, r5
 80067e6:	1891      	adds	r1, r2, r2
 80067e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80067ea:	415b      	adcs	r3, r3
 80067ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80067f2:	4621      	mov	r1, r4
 80067f4:	eb12 0801 	adds.w	r8, r2, r1
 80067f8:	4629      	mov	r1, r5
 80067fa:	eb43 0901 	adc.w	r9, r3, r1
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	f04f 0300 	mov.w	r3, #0
 8006806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800680a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800680e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006812:	4690      	mov	r8, r2
 8006814:	4699      	mov	r9, r3
 8006816:	4623      	mov	r3, r4
 8006818:	eb18 0303 	adds.w	r3, r8, r3
 800681c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006820:	462b      	mov	r3, r5
 8006822:	eb49 0303 	adc.w	r3, r9, r3
 8006826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800683a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800683e:	460b      	mov	r3, r1
 8006840:	18db      	adds	r3, r3, r3
 8006842:	653b      	str	r3, [r7, #80]	; 0x50
 8006844:	4613      	mov	r3, r2
 8006846:	eb42 0303 	adc.w	r3, r2, r3
 800684a:	657b      	str	r3, [r7, #84]	; 0x54
 800684c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006854:	f7fa fa18 	bl	8000c88 <__aeabi_uldivmod>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4b61      	ldr	r3, [pc, #388]	; (80069e4 <UART_SetConfig+0x2d4>)
 800685e:	fba3 2302 	umull	r2, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	011c      	lsls	r4, r3, #4
 8006866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686a:	2200      	movs	r2, #0
 800686c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006878:	4642      	mov	r2, r8
 800687a:	464b      	mov	r3, r9
 800687c:	1891      	adds	r1, r2, r2
 800687e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006880:	415b      	adcs	r3, r3
 8006882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006888:	4641      	mov	r1, r8
 800688a:	eb12 0a01 	adds.w	sl, r2, r1
 800688e:	4649      	mov	r1, r9
 8006890:	eb43 0b01 	adc.w	fp, r3, r1
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80068a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068a8:	4692      	mov	sl, r2
 80068aa:	469b      	mov	fp, r3
 80068ac:	4643      	mov	r3, r8
 80068ae:	eb1a 0303 	adds.w	r3, sl, r3
 80068b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068b6:	464b      	mov	r3, r9
 80068b8:	eb4b 0303 	adc.w	r3, fp, r3
 80068bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80068d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80068d4:	460b      	mov	r3, r1
 80068d6:	18db      	adds	r3, r3, r3
 80068d8:	643b      	str	r3, [r7, #64]	; 0x40
 80068da:	4613      	mov	r3, r2
 80068dc:	eb42 0303 	adc.w	r3, r2, r3
 80068e0:	647b      	str	r3, [r7, #68]	; 0x44
 80068e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80068e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068ea:	f7fa f9cd 	bl	8000c88 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	4b3b      	ldr	r3, [pc, #236]	; (80069e4 <UART_SetConfig+0x2d4>)
 80068f6:	fba3 2301 	umull	r2, r3, r3, r1
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	2264      	movs	r2, #100	; 0x64
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	1acb      	subs	r3, r1, r3
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800690a:	4b36      	ldr	r3, [pc, #216]	; (80069e4 <UART_SetConfig+0x2d4>)
 800690c:	fba3 2302 	umull	r2, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006918:	441c      	add	r4, r3
 800691a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800691e:	2200      	movs	r2, #0
 8006920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	1891      	adds	r1, r2, r2
 8006932:	63b9      	str	r1, [r7, #56]	; 0x38
 8006934:	415b      	adcs	r3, r3
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800693c:	4641      	mov	r1, r8
 800693e:	1851      	adds	r1, r2, r1
 8006940:	6339      	str	r1, [r7, #48]	; 0x30
 8006942:	4649      	mov	r1, r9
 8006944:	414b      	adcs	r3, r1
 8006946:	637b      	str	r3, [r7, #52]	; 0x34
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006954:	4659      	mov	r1, fp
 8006956:	00cb      	lsls	r3, r1, #3
 8006958:	4651      	mov	r1, sl
 800695a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800695e:	4651      	mov	r1, sl
 8006960:	00ca      	lsls	r2, r1, #3
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	4603      	mov	r3, r0
 8006968:	4642      	mov	r2, r8
 800696a:	189b      	adds	r3, r3, r2
 800696c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006970:	464b      	mov	r3, r9
 8006972:	460a      	mov	r2, r1
 8006974:	eb42 0303 	adc.w	r3, r2, r3
 8006978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800698c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006990:	460b      	mov	r3, r1
 8006992:	18db      	adds	r3, r3, r3
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
 8006996:	4613      	mov	r3, r2
 8006998:	eb42 0303 	adc.w	r3, r2, r3
 800699c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800699e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80069a6:	f7fa f96f 	bl	8000c88 <__aeabi_uldivmod>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <UART_SetConfig+0x2d4>)
 80069b0:	fba3 1302 	umull	r1, r3, r3, r2
 80069b4:	095b      	lsrs	r3, r3, #5
 80069b6:	2164      	movs	r1, #100	; 0x64
 80069b8:	fb01 f303 	mul.w	r3, r1, r3
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	3332      	adds	r3, #50	; 0x32
 80069c2:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <UART_SetConfig+0x2d4>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	f003 0207 	and.w	r2, r3, #7
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4422      	add	r2, r4
 80069d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069d8:	e105      	b.n	8006be6 <UART_SetConfig+0x4d6>
 80069da:	bf00      	nop
 80069dc:	40011000 	.word	0x40011000
 80069e0:	40011400 	.word	0x40011400
 80069e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80069f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80069f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80069fa:	4642      	mov	r2, r8
 80069fc:	464b      	mov	r3, r9
 80069fe:	1891      	adds	r1, r2, r2
 8006a00:	6239      	str	r1, [r7, #32]
 8006a02:	415b      	adcs	r3, r3
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
 8006a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	1854      	adds	r4, r2, r1
 8006a0e:	4649      	mov	r1, r9
 8006a10:	eb43 0501 	adc.w	r5, r3, r1
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	00eb      	lsls	r3, r5, #3
 8006a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a22:	00e2      	lsls	r2, r4, #3
 8006a24:	4614      	mov	r4, r2
 8006a26:	461d      	mov	r5, r3
 8006a28:	4643      	mov	r3, r8
 8006a2a:	18e3      	adds	r3, r4, r3
 8006a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a30:	464b      	mov	r3, r9
 8006a32:	eb45 0303 	adc.w	r3, r5, r3
 8006a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006a56:	4629      	mov	r1, r5
 8006a58:	008b      	lsls	r3, r1, #2
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a60:	4621      	mov	r1, r4
 8006a62:	008a      	lsls	r2, r1, #2
 8006a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006a68:	f7fa f90e 	bl	8000c88 <__aeabi_uldivmod>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4b60      	ldr	r3, [pc, #384]	; (8006bf4 <UART_SetConfig+0x4e4>)
 8006a72:	fba3 2302 	umull	r2, r3, r3, r2
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	011c      	lsls	r4, r3, #4
 8006a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a8c:	4642      	mov	r2, r8
 8006a8e:	464b      	mov	r3, r9
 8006a90:	1891      	adds	r1, r2, r2
 8006a92:	61b9      	str	r1, [r7, #24]
 8006a94:	415b      	adcs	r3, r3
 8006a96:	61fb      	str	r3, [r7, #28]
 8006a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	1851      	adds	r1, r2, r1
 8006aa0:	6139      	str	r1, [r7, #16]
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	414b      	adcs	r3, r1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	f04f 0200 	mov.w	r2, #0
 8006aac:	f04f 0300 	mov.w	r3, #0
 8006ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	00cb      	lsls	r3, r1, #3
 8006ab8:	4651      	mov	r1, sl
 8006aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006abe:	4651      	mov	r1, sl
 8006ac0:	00ca      	lsls	r2, r1, #3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4642      	mov	r2, r8
 8006aca:	189b      	adds	r3, r3, r2
 8006acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	460a      	mov	r2, r1
 8006ad4:	eb42 0303 	adc.w	r3, r2, r3
 8006ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ae8:	f04f 0200 	mov.w	r2, #0
 8006aec:	f04f 0300 	mov.w	r3, #0
 8006af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006af4:	4649      	mov	r1, r9
 8006af6:	008b      	lsls	r3, r1, #2
 8006af8:	4641      	mov	r1, r8
 8006afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006afe:	4641      	mov	r1, r8
 8006b00:	008a      	lsls	r2, r1, #2
 8006b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006b06:	f7fa f8bf 	bl	8000c88 <__aeabi_uldivmod>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4b39      	ldr	r3, [pc, #228]	; (8006bf4 <UART_SetConfig+0x4e4>)
 8006b10:	fba3 1302 	umull	r1, r3, r3, r2
 8006b14:	095b      	lsrs	r3, r3, #5
 8006b16:	2164      	movs	r1, #100	; 0x64
 8006b18:	fb01 f303 	mul.w	r3, r1, r3
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	011b      	lsls	r3, r3, #4
 8006b20:	3332      	adds	r3, #50	; 0x32
 8006b22:	4a34      	ldr	r2, [pc, #208]	; (8006bf4 <UART_SetConfig+0x4e4>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b2e:	441c      	add	r4, r3
 8006b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b34:	2200      	movs	r2, #0
 8006b36:	673b      	str	r3, [r7, #112]	; 0x70
 8006b38:	677a      	str	r2, [r7, #116]	; 0x74
 8006b3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006b3e:	4642      	mov	r2, r8
 8006b40:	464b      	mov	r3, r9
 8006b42:	1891      	adds	r1, r2, r2
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	415b      	adcs	r3, r3
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b4e:	4641      	mov	r1, r8
 8006b50:	1851      	adds	r1, r2, r1
 8006b52:	6039      	str	r1, [r7, #0]
 8006b54:	4649      	mov	r1, r9
 8006b56:	414b      	adcs	r3, r1
 8006b58:	607b      	str	r3, [r7, #4]
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b66:	4659      	mov	r1, fp
 8006b68:	00cb      	lsls	r3, r1, #3
 8006b6a:	4651      	mov	r1, sl
 8006b6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b70:	4651      	mov	r1, sl
 8006b72:	00ca      	lsls	r2, r1, #3
 8006b74:	4610      	mov	r0, r2
 8006b76:	4619      	mov	r1, r3
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4642      	mov	r2, r8
 8006b7c:	189b      	adds	r3, r3, r2
 8006b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b80:	464b      	mov	r3, r9
 8006b82:	460a      	mov	r2, r1
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	663b      	str	r3, [r7, #96]	; 0x60
 8006b94:	667a      	str	r2, [r7, #100]	; 0x64
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	008b      	lsls	r3, r1, #2
 8006ba6:	4641      	mov	r1, r8
 8006ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bac:	4641      	mov	r1, r8
 8006bae:	008a      	lsls	r2, r1, #2
 8006bb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006bb4:	f7fa f868 	bl	8000c88 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4b0d      	ldr	r3, [pc, #52]	; (8006bf4 <UART_SetConfig+0x4e4>)
 8006bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	2164      	movs	r1, #100	; 0x64
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	3332      	adds	r3, #50	; 0x32
 8006bd0:	4a08      	ldr	r2, [pc, #32]	; (8006bf4 <UART_SetConfig+0x4e4>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4422      	add	r2, r4
 8006be4:	609a      	str	r2, [r3, #8]
}
 8006be6:	bf00      	nop
 8006be8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bf2:	bf00      	nop
 8006bf4:	51eb851f 	.word	0x51eb851f

08006bf8 <__errno>:
 8006bf8:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <__errno+0x8>)
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	2000000c 	.word	0x2000000c

08006c04 <__libc_init_array>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	4d0d      	ldr	r5, [pc, #52]	; (8006c3c <__libc_init_array+0x38>)
 8006c08:	4c0d      	ldr	r4, [pc, #52]	; (8006c40 <__libc_init_array+0x3c>)
 8006c0a:	1b64      	subs	r4, r4, r5
 8006c0c:	10a4      	asrs	r4, r4, #2
 8006c0e:	2600      	movs	r6, #0
 8006c10:	42a6      	cmp	r6, r4
 8006c12:	d109      	bne.n	8006c28 <__libc_init_array+0x24>
 8006c14:	4d0b      	ldr	r5, [pc, #44]	; (8006c44 <__libc_init_array+0x40>)
 8006c16:	4c0c      	ldr	r4, [pc, #48]	; (8006c48 <__libc_init_array+0x44>)
 8006c18:	f003 fe1c 	bl	800a854 <_init>
 8006c1c:	1b64      	subs	r4, r4, r5
 8006c1e:	10a4      	asrs	r4, r4, #2
 8006c20:	2600      	movs	r6, #0
 8006c22:	42a6      	cmp	r6, r4
 8006c24:	d105      	bne.n	8006c32 <__libc_init_array+0x2e>
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c2c:	4798      	blx	r3
 8006c2e:	3601      	adds	r6, #1
 8006c30:	e7ee      	b.n	8006c10 <__libc_init_array+0xc>
 8006c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c36:	4798      	blx	r3
 8006c38:	3601      	adds	r6, #1
 8006c3a:	e7f2      	b.n	8006c22 <__libc_init_array+0x1e>
 8006c3c:	0800acf0 	.word	0x0800acf0
 8006c40:	0800acf0 	.word	0x0800acf0
 8006c44:	0800acf0 	.word	0x0800acf0
 8006c48:	0800acf4 	.word	0x0800acf4

08006c4c <memset>:
 8006c4c:	4402      	add	r2, r0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d100      	bne.n	8006c56 <memset+0xa>
 8006c54:	4770      	bx	lr
 8006c56:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5a:	e7f9      	b.n	8006c50 <memset+0x4>

08006c5c <__cvt>:
 8006c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c60:	ec55 4b10 	vmov	r4, r5, d0
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	460e      	mov	r6, r1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	462b      	mov	r3, r5
 8006c6c:	bfbb      	ittet	lt
 8006c6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c72:	461d      	movlt	r5, r3
 8006c74:	2300      	movge	r3, #0
 8006c76:	232d      	movlt	r3, #45	; 0x2d
 8006c78:	700b      	strb	r3, [r1, #0]
 8006c7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c80:	4691      	mov	r9, r2
 8006c82:	f023 0820 	bic.w	r8, r3, #32
 8006c86:	bfbc      	itt	lt
 8006c88:	4622      	movlt	r2, r4
 8006c8a:	4614      	movlt	r4, r2
 8006c8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c90:	d005      	beq.n	8006c9e <__cvt+0x42>
 8006c92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c96:	d100      	bne.n	8006c9a <__cvt+0x3e>
 8006c98:	3601      	adds	r6, #1
 8006c9a:	2102      	movs	r1, #2
 8006c9c:	e000      	b.n	8006ca0 <__cvt+0x44>
 8006c9e:	2103      	movs	r1, #3
 8006ca0:	ab03      	add	r3, sp, #12
 8006ca2:	9301      	str	r3, [sp, #4]
 8006ca4:	ab02      	add	r3, sp, #8
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	ec45 4b10 	vmov	d0, r4, r5
 8006cac:	4653      	mov	r3, sl
 8006cae:	4632      	mov	r2, r6
 8006cb0:	f000 fcea 	bl	8007688 <_dtoa_r>
 8006cb4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cb8:	4607      	mov	r7, r0
 8006cba:	d102      	bne.n	8006cc2 <__cvt+0x66>
 8006cbc:	f019 0f01 	tst.w	r9, #1
 8006cc0:	d022      	beq.n	8006d08 <__cvt+0xac>
 8006cc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cc6:	eb07 0906 	add.w	r9, r7, r6
 8006cca:	d110      	bne.n	8006cee <__cvt+0x92>
 8006ccc:	783b      	ldrb	r3, [r7, #0]
 8006cce:	2b30      	cmp	r3, #48	; 0x30
 8006cd0:	d10a      	bne.n	8006ce8 <__cvt+0x8c>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 ff15 	bl	8000b08 <__aeabi_dcmpeq>
 8006cde:	b918      	cbnz	r0, 8006ce8 <__cvt+0x8c>
 8006ce0:	f1c6 0601 	rsb	r6, r6, #1
 8006ce4:	f8ca 6000 	str.w	r6, [sl]
 8006ce8:	f8da 3000 	ldr.w	r3, [sl]
 8006cec:	4499      	add	r9, r3
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 ff07 	bl	8000b08 <__aeabi_dcmpeq>
 8006cfa:	b108      	cbz	r0, 8006d00 <__cvt+0xa4>
 8006cfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d00:	2230      	movs	r2, #48	; 0x30
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	454b      	cmp	r3, r9
 8006d06:	d307      	bcc.n	8006d18 <__cvt+0xbc>
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d0c:	1bdb      	subs	r3, r3, r7
 8006d0e:	4638      	mov	r0, r7
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	b004      	add	sp, #16
 8006d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d18:	1c59      	adds	r1, r3, #1
 8006d1a:	9103      	str	r1, [sp, #12]
 8006d1c:	701a      	strb	r2, [r3, #0]
 8006d1e:	e7f0      	b.n	8006d02 <__cvt+0xa6>

08006d20 <__exponent>:
 8006d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d22:	4603      	mov	r3, r0
 8006d24:	2900      	cmp	r1, #0
 8006d26:	bfb8      	it	lt
 8006d28:	4249      	neglt	r1, r1
 8006d2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006d2e:	bfb4      	ite	lt
 8006d30:	222d      	movlt	r2, #45	; 0x2d
 8006d32:	222b      	movge	r2, #43	; 0x2b
 8006d34:	2909      	cmp	r1, #9
 8006d36:	7042      	strb	r2, [r0, #1]
 8006d38:	dd2a      	ble.n	8006d90 <__exponent+0x70>
 8006d3a:	f10d 0407 	add.w	r4, sp, #7
 8006d3e:	46a4      	mov	ip, r4
 8006d40:	270a      	movs	r7, #10
 8006d42:	46a6      	mov	lr, r4
 8006d44:	460a      	mov	r2, r1
 8006d46:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d4a:	fb07 1516 	mls	r5, r7, r6, r1
 8006d4e:	3530      	adds	r5, #48	; 0x30
 8006d50:	2a63      	cmp	r2, #99	; 0x63
 8006d52:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	dcf1      	bgt.n	8006d42 <__exponent+0x22>
 8006d5e:	3130      	adds	r1, #48	; 0x30
 8006d60:	f1ae 0502 	sub.w	r5, lr, #2
 8006d64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d68:	1c44      	adds	r4, r0, #1
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4561      	cmp	r1, ip
 8006d6e:	d30a      	bcc.n	8006d86 <__exponent+0x66>
 8006d70:	f10d 0209 	add.w	r2, sp, #9
 8006d74:	eba2 020e 	sub.w	r2, r2, lr
 8006d78:	4565      	cmp	r5, ip
 8006d7a:	bf88      	it	hi
 8006d7c:	2200      	movhi	r2, #0
 8006d7e:	4413      	add	r3, r2
 8006d80:	1a18      	subs	r0, r3, r0
 8006d82:	b003      	add	sp, #12
 8006d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d8e:	e7ed      	b.n	8006d6c <__exponent+0x4c>
 8006d90:	2330      	movs	r3, #48	; 0x30
 8006d92:	3130      	adds	r1, #48	; 0x30
 8006d94:	7083      	strb	r3, [r0, #2]
 8006d96:	70c1      	strb	r1, [r0, #3]
 8006d98:	1d03      	adds	r3, r0, #4
 8006d9a:	e7f1      	b.n	8006d80 <__exponent+0x60>

08006d9c <_printf_float>:
 8006d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	ed2d 8b02 	vpush	{d8}
 8006da4:	b08d      	sub	sp, #52	; 0x34
 8006da6:	460c      	mov	r4, r1
 8006da8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006dac:	4616      	mov	r6, r2
 8006dae:	461f      	mov	r7, r3
 8006db0:	4605      	mov	r5, r0
 8006db2:	f001 fa57 	bl	8008264 <_localeconv_r>
 8006db6:	f8d0 a000 	ldr.w	sl, [r0]
 8006dba:	4650      	mov	r0, sl
 8006dbc:	f7f9 fa28 	bl	8000210 <strlen>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	9305      	str	r3, [sp, #20]
 8006dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006dcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006dd0:	3307      	adds	r3, #7
 8006dd2:	f023 0307 	bic.w	r3, r3, #7
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	f8c8 2000 	str.w	r2, [r8]
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006de6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006dea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dee:	9307      	str	r3, [sp, #28]
 8006df0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006df4:	ee08 0a10 	vmov	s16, r0
 8006df8:	4b9f      	ldr	r3, [pc, #636]	; (8007078 <_printf_float+0x2dc>)
 8006dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006e02:	f7f9 feb3 	bl	8000b6c <__aeabi_dcmpun>
 8006e06:	bb88      	cbnz	r0, 8006e6c <_printf_float+0xd0>
 8006e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e0c:	4b9a      	ldr	r3, [pc, #616]	; (8007078 <_printf_float+0x2dc>)
 8006e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e12:	f7f9 fe8d 	bl	8000b30 <__aeabi_dcmple>
 8006e16:	bb48      	cbnz	r0, 8006e6c <_printf_float+0xd0>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	4640      	mov	r0, r8
 8006e1e:	4649      	mov	r1, r9
 8006e20:	f7f9 fe7c 	bl	8000b1c <__aeabi_dcmplt>
 8006e24:	b110      	cbz	r0, 8006e2c <_printf_float+0x90>
 8006e26:	232d      	movs	r3, #45	; 0x2d
 8006e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e2c:	4b93      	ldr	r3, [pc, #588]	; (800707c <_printf_float+0x2e0>)
 8006e2e:	4894      	ldr	r0, [pc, #592]	; (8007080 <_printf_float+0x2e4>)
 8006e30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e34:	bf94      	ite	ls
 8006e36:	4698      	movls	r8, r3
 8006e38:	4680      	movhi	r8, r0
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	9b05      	ldr	r3, [sp, #20]
 8006e40:	f023 0204 	bic.w	r2, r3, #4
 8006e44:	6022      	str	r2, [r4, #0]
 8006e46:	f04f 0900 	mov.w	r9, #0
 8006e4a:	9700      	str	r7, [sp, #0]
 8006e4c:	4633      	mov	r3, r6
 8006e4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f000 f9d8 	bl	8007208 <_printf_common>
 8006e58:	3001      	adds	r0, #1
 8006e5a:	f040 8090 	bne.w	8006f7e <_printf_float+0x1e2>
 8006e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e62:	b00d      	add	sp, #52	; 0x34
 8006e64:	ecbd 8b02 	vpop	{d8}
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	464b      	mov	r3, r9
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fe7a 	bl	8000b6c <__aeabi_dcmpun>
 8006e78:	b140      	cbz	r0, 8006e8c <_printf_float+0xf0>
 8006e7a:	464b      	mov	r3, r9
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bfbc      	itt	lt
 8006e80:	232d      	movlt	r3, #45	; 0x2d
 8006e82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e86:	487f      	ldr	r0, [pc, #508]	; (8007084 <_printf_float+0x2e8>)
 8006e88:	4b7f      	ldr	r3, [pc, #508]	; (8007088 <_printf_float+0x2ec>)
 8006e8a:	e7d1      	b.n	8006e30 <_printf_float+0x94>
 8006e8c:	6863      	ldr	r3, [r4, #4]
 8006e8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e92:	9206      	str	r2, [sp, #24]
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	d13f      	bne.n	8006f18 <_printf_float+0x17c>
 8006e98:	2306      	movs	r3, #6
 8006e9a:	6063      	str	r3, [r4, #4]
 8006e9c:	9b05      	ldr	r3, [sp, #20]
 8006e9e:	6861      	ldr	r1, [r4, #4]
 8006ea0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	ab0a      	add	r3, sp, #40	; 0x28
 8006eaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eae:	ab09      	add	r3, sp, #36	; 0x24
 8006eb0:	ec49 8b10 	vmov	d0, r8, r9
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	6022      	str	r2, [r4, #0]
 8006eb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	f7ff fecd 	bl	8006c5c <__cvt>
 8006ec2:	9b06      	ldr	r3, [sp, #24]
 8006ec4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec6:	2b47      	cmp	r3, #71	; 0x47
 8006ec8:	4680      	mov	r8, r0
 8006eca:	d108      	bne.n	8006ede <_printf_float+0x142>
 8006ecc:	1cc8      	adds	r0, r1, #3
 8006ece:	db02      	blt.n	8006ed6 <_printf_float+0x13a>
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	4299      	cmp	r1, r3
 8006ed4:	dd41      	ble.n	8006f5a <_printf_float+0x1be>
 8006ed6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006eda:	fa5f fb8b 	uxtb.w	fp, fp
 8006ede:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ee2:	d820      	bhi.n	8006f26 <_printf_float+0x18a>
 8006ee4:	3901      	subs	r1, #1
 8006ee6:	465a      	mov	r2, fp
 8006ee8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006eec:	9109      	str	r1, [sp, #36]	; 0x24
 8006eee:	f7ff ff17 	bl	8006d20 <__exponent>
 8006ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef4:	1813      	adds	r3, r2, r0
 8006ef6:	2a01      	cmp	r2, #1
 8006ef8:	4681      	mov	r9, r0
 8006efa:	6123      	str	r3, [r4, #16]
 8006efc:	dc02      	bgt.n	8006f04 <_printf_float+0x168>
 8006efe:	6822      	ldr	r2, [r4, #0]
 8006f00:	07d2      	lsls	r2, r2, #31
 8006f02:	d501      	bpl.n	8006f08 <_printf_float+0x16c>
 8006f04:	3301      	adds	r3, #1
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d09c      	beq.n	8006e4a <_printf_float+0xae>
 8006f10:	232d      	movs	r3, #45	; 0x2d
 8006f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f16:	e798      	b.n	8006e4a <_printf_float+0xae>
 8006f18:	9a06      	ldr	r2, [sp, #24]
 8006f1a:	2a47      	cmp	r2, #71	; 0x47
 8006f1c:	d1be      	bne.n	8006e9c <_printf_float+0x100>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1bc      	bne.n	8006e9c <_printf_float+0x100>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e7b9      	b.n	8006e9a <_printf_float+0xfe>
 8006f26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f2a:	d118      	bne.n	8006f5e <_printf_float+0x1c2>
 8006f2c:	2900      	cmp	r1, #0
 8006f2e:	6863      	ldr	r3, [r4, #4]
 8006f30:	dd0b      	ble.n	8006f4a <_printf_float+0x1ae>
 8006f32:	6121      	str	r1, [r4, #16]
 8006f34:	b913      	cbnz	r3, 8006f3c <_printf_float+0x1a0>
 8006f36:	6822      	ldr	r2, [r4, #0]
 8006f38:	07d0      	lsls	r0, r2, #31
 8006f3a:	d502      	bpl.n	8006f42 <_printf_float+0x1a6>
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	440b      	add	r3, r1
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f44:	f04f 0900 	mov.w	r9, #0
 8006f48:	e7de      	b.n	8006f08 <_printf_float+0x16c>
 8006f4a:	b913      	cbnz	r3, 8006f52 <_printf_float+0x1b6>
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	07d2      	lsls	r2, r2, #31
 8006f50:	d501      	bpl.n	8006f56 <_printf_float+0x1ba>
 8006f52:	3302      	adds	r3, #2
 8006f54:	e7f4      	b.n	8006f40 <_printf_float+0x1a4>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e7f2      	b.n	8006f40 <_printf_float+0x1a4>
 8006f5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f60:	4299      	cmp	r1, r3
 8006f62:	db05      	blt.n	8006f70 <_printf_float+0x1d4>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	6121      	str	r1, [r4, #16]
 8006f68:	07d8      	lsls	r0, r3, #31
 8006f6a:	d5ea      	bpl.n	8006f42 <_printf_float+0x1a6>
 8006f6c:	1c4b      	adds	r3, r1, #1
 8006f6e:	e7e7      	b.n	8006f40 <_printf_float+0x1a4>
 8006f70:	2900      	cmp	r1, #0
 8006f72:	bfd4      	ite	le
 8006f74:	f1c1 0202 	rsble	r2, r1, #2
 8006f78:	2201      	movgt	r2, #1
 8006f7a:	4413      	add	r3, r2
 8006f7c:	e7e0      	b.n	8006f40 <_printf_float+0x1a4>
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	055a      	lsls	r2, r3, #21
 8006f82:	d407      	bmi.n	8006f94 <_printf_float+0x1f8>
 8006f84:	6923      	ldr	r3, [r4, #16]
 8006f86:	4642      	mov	r2, r8
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d12c      	bne.n	8006fec <_printf_float+0x250>
 8006f92:	e764      	b.n	8006e5e <_printf_float+0xc2>
 8006f94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f98:	f240 80e0 	bls.w	800715c <_printf_float+0x3c0>
 8006f9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f7f9 fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d034      	beq.n	8007016 <_printf_float+0x27a>
 8006fac:	4a37      	ldr	r2, [pc, #220]	; (800708c <_printf_float+0x2f0>)
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4631      	mov	r1, r6
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	f43f af51 	beq.w	8006e5e <_printf_float+0xc2>
 8006fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	db02      	blt.n	8006fca <_printf_float+0x22e>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	07d8      	lsls	r0, r3, #31
 8006fc8:	d510      	bpl.n	8006fec <_printf_float+0x250>
 8006fca:	ee18 3a10 	vmov	r3, s16
 8006fce:	4652      	mov	r2, sl
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f43f af41 	beq.w	8006e5e <_printf_float+0xc2>
 8006fdc:	f04f 0800 	mov.w	r8, #0
 8006fe0:	f104 091a 	add.w	r9, r4, #26
 8006fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	4543      	cmp	r3, r8
 8006fea:	dc09      	bgt.n	8007000 <_printf_float+0x264>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	079b      	lsls	r3, r3, #30
 8006ff0:	f100 8105 	bmi.w	80071fe <_printf_float+0x462>
 8006ff4:	68e0      	ldr	r0, [r4, #12]
 8006ff6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ff8:	4298      	cmp	r0, r3
 8006ffa:	bfb8      	it	lt
 8006ffc:	4618      	movlt	r0, r3
 8006ffe:	e730      	b.n	8006e62 <_printf_float+0xc6>
 8007000:	2301      	movs	r3, #1
 8007002:	464a      	mov	r2, r9
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f af27 	beq.w	8006e5e <_printf_float+0xc2>
 8007010:	f108 0801 	add.w	r8, r8, #1
 8007014:	e7e6      	b.n	8006fe4 <_printf_float+0x248>
 8007016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007018:	2b00      	cmp	r3, #0
 800701a:	dc39      	bgt.n	8007090 <_printf_float+0x2f4>
 800701c:	4a1b      	ldr	r2, [pc, #108]	; (800708c <_printf_float+0x2f0>)
 800701e:	2301      	movs	r3, #1
 8007020:	4631      	mov	r1, r6
 8007022:	4628      	mov	r0, r5
 8007024:	47b8      	blx	r7
 8007026:	3001      	adds	r0, #1
 8007028:	f43f af19 	beq.w	8006e5e <_printf_float+0xc2>
 800702c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007030:	4313      	orrs	r3, r2
 8007032:	d102      	bne.n	800703a <_printf_float+0x29e>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	07d9      	lsls	r1, r3, #31
 8007038:	d5d8      	bpl.n	8006fec <_printf_float+0x250>
 800703a:	ee18 3a10 	vmov	r3, s16
 800703e:	4652      	mov	r2, sl
 8007040:	4631      	mov	r1, r6
 8007042:	4628      	mov	r0, r5
 8007044:	47b8      	blx	r7
 8007046:	3001      	adds	r0, #1
 8007048:	f43f af09 	beq.w	8006e5e <_printf_float+0xc2>
 800704c:	f04f 0900 	mov.w	r9, #0
 8007050:	f104 0a1a 	add.w	sl, r4, #26
 8007054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007056:	425b      	negs	r3, r3
 8007058:	454b      	cmp	r3, r9
 800705a:	dc01      	bgt.n	8007060 <_printf_float+0x2c4>
 800705c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705e:	e792      	b.n	8006f86 <_printf_float+0x1ea>
 8007060:	2301      	movs	r3, #1
 8007062:	4652      	mov	r2, sl
 8007064:	4631      	mov	r1, r6
 8007066:	4628      	mov	r0, r5
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f aef7 	beq.w	8006e5e <_printf_float+0xc2>
 8007070:	f109 0901 	add.w	r9, r9, #1
 8007074:	e7ee      	b.n	8007054 <_printf_float+0x2b8>
 8007076:	bf00      	nop
 8007078:	7fefffff 	.word	0x7fefffff
 800707c:	0800a8dc 	.word	0x0800a8dc
 8007080:	0800a8e0 	.word	0x0800a8e0
 8007084:	0800a8e8 	.word	0x0800a8e8
 8007088:	0800a8e4 	.word	0x0800a8e4
 800708c:	0800a8ec 	.word	0x0800a8ec
 8007090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007094:	429a      	cmp	r2, r3
 8007096:	bfa8      	it	ge
 8007098:	461a      	movge	r2, r3
 800709a:	2a00      	cmp	r2, #0
 800709c:	4691      	mov	r9, r2
 800709e:	dc37      	bgt.n	8007110 <_printf_float+0x374>
 80070a0:	f04f 0b00 	mov.w	fp, #0
 80070a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070a8:	f104 021a 	add.w	r2, r4, #26
 80070ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ae:	9305      	str	r3, [sp, #20]
 80070b0:	eba3 0309 	sub.w	r3, r3, r9
 80070b4:	455b      	cmp	r3, fp
 80070b6:	dc33      	bgt.n	8007120 <_printf_float+0x384>
 80070b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070bc:	429a      	cmp	r2, r3
 80070be:	db3b      	blt.n	8007138 <_printf_float+0x39c>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	07da      	lsls	r2, r3, #31
 80070c4:	d438      	bmi.n	8007138 <_printf_float+0x39c>
 80070c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c8:	9a05      	ldr	r2, [sp, #20]
 80070ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070cc:	1a9a      	subs	r2, r3, r2
 80070ce:	eba3 0901 	sub.w	r9, r3, r1
 80070d2:	4591      	cmp	r9, r2
 80070d4:	bfa8      	it	ge
 80070d6:	4691      	movge	r9, r2
 80070d8:	f1b9 0f00 	cmp.w	r9, #0
 80070dc:	dc35      	bgt.n	800714a <_printf_float+0x3ae>
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e6:	f104 0a1a 	add.w	sl, r4, #26
 80070ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	eba3 0309 	sub.w	r3, r3, r9
 80070f4:	4543      	cmp	r3, r8
 80070f6:	f77f af79 	ble.w	8006fec <_printf_float+0x250>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4652      	mov	r2, sl
 80070fe:	4631      	mov	r1, r6
 8007100:	4628      	mov	r0, r5
 8007102:	47b8      	blx	r7
 8007104:	3001      	adds	r0, #1
 8007106:	f43f aeaa 	beq.w	8006e5e <_printf_float+0xc2>
 800710a:	f108 0801 	add.w	r8, r8, #1
 800710e:	e7ec      	b.n	80070ea <_printf_float+0x34e>
 8007110:	4613      	mov	r3, r2
 8007112:	4631      	mov	r1, r6
 8007114:	4642      	mov	r2, r8
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	d1c0      	bne.n	80070a0 <_printf_float+0x304>
 800711e:	e69e      	b.n	8006e5e <_printf_float+0xc2>
 8007120:	2301      	movs	r3, #1
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	9205      	str	r2, [sp, #20]
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	f43f ae97 	beq.w	8006e5e <_printf_float+0xc2>
 8007130:	9a05      	ldr	r2, [sp, #20]
 8007132:	f10b 0b01 	add.w	fp, fp, #1
 8007136:	e7b9      	b.n	80070ac <_printf_float+0x310>
 8007138:	ee18 3a10 	vmov	r3, s16
 800713c:	4652      	mov	r2, sl
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	d1be      	bne.n	80070c6 <_printf_float+0x32a>
 8007148:	e689      	b.n	8006e5e <_printf_float+0xc2>
 800714a:	9a05      	ldr	r2, [sp, #20]
 800714c:	464b      	mov	r3, r9
 800714e:	4442      	add	r2, r8
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	d1c1      	bne.n	80070de <_printf_float+0x342>
 800715a:	e680      	b.n	8006e5e <_printf_float+0xc2>
 800715c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800715e:	2a01      	cmp	r2, #1
 8007160:	dc01      	bgt.n	8007166 <_printf_float+0x3ca>
 8007162:	07db      	lsls	r3, r3, #31
 8007164:	d538      	bpl.n	80071d8 <_printf_float+0x43c>
 8007166:	2301      	movs	r3, #1
 8007168:	4642      	mov	r2, r8
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	f43f ae74 	beq.w	8006e5e <_printf_float+0xc2>
 8007176:	ee18 3a10 	vmov	r3, s16
 800717a:	4652      	mov	r2, sl
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f ae6b 	beq.w	8006e5e <_printf_float+0xc2>
 8007188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	f7f9 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 8007194:	b9d8      	cbnz	r0, 80071ce <_printf_float+0x432>
 8007196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007198:	f108 0201 	add.w	r2, r8, #1
 800719c:	3b01      	subs	r3, #1
 800719e:	4631      	mov	r1, r6
 80071a0:	4628      	mov	r0, r5
 80071a2:	47b8      	blx	r7
 80071a4:	3001      	adds	r0, #1
 80071a6:	d10e      	bne.n	80071c6 <_printf_float+0x42a>
 80071a8:	e659      	b.n	8006e5e <_printf_float+0xc2>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4652      	mov	r2, sl
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	f43f ae52 	beq.w	8006e5e <_printf_float+0xc2>
 80071ba:	f108 0801 	add.w	r8, r8, #1
 80071be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c0:	3b01      	subs	r3, #1
 80071c2:	4543      	cmp	r3, r8
 80071c4:	dcf1      	bgt.n	80071aa <_printf_float+0x40e>
 80071c6:	464b      	mov	r3, r9
 80071c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071cc:	e6dc      	b.n	8006f88 <_printf_float+0x1ec>
 80071ce:	f04f 0800 	mov.w	r8, #0
 80071d2:	f104 0a1a 	add.w	sl, r4, #26
 80071d6:	e7f2      	b.n	80071be <_printf_float+0x422>
 80071d8:	2301      	movs	r3, #1
 80071da:	4642      	mov	r2, r8
 80071dc:	e7df      	b.n	800719e <_printf_float+0x402>
 80071de:	2301      	movs	r3, #1
 80071e0:	464a      	mov	r2, r9
 80071e2:	4631      	mov	r1, r6
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b8      	blx	r7
 80071e8:	3001      	adds	r0, #1
 80071ea:	f43f ae38 	beq.w	8006e5e <_printf_float+0xc2>
 80071ee:	f108 0801 	add.w	r8, r8, #1
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071f6:	1a5b      	subs	r3, r3, r1
 80071f8:	4543      	cmp	r3, r8
 80071fa:	dcf0      	bgt.n	80071de <_printf_float+0x442>
 80071fc:	e6fa      	b.n	8006ff4 <_printf_float+0x258>
 80071fe:	f04f 0800 	mov.w	r8, #0
 8007202:	f104 0919 	add.w	r9, r4, #25
 8007206:	e7f4      	b.n	80071f2 <_printf_float+0x456>

08007208 <_printf_common>:
 8007208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	4616      	mov	r6, r2
 800720e:	4699      	mov	r9, r3
 8007210:	688a      	ldr	r2, [r1, #8]
 8007212:	690b      	ldr	r3, [r1, #16]
 8007214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007218:	4293      	cmp	r3, r2
 800721a:	bfb8      	it	lt
 800721c:	4613      	movlt	r3, r2
 800721e:	6033      	str	r3, [r6, #0]
 8007220:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007224:	4607      	mov	r7, r0
 8007226:	460c      	mov	r4, r1
 8007228:	b10a      	cbz	r2, 800722e <_printf_common+0x26>
 800722a:	3301      	adds	r3, #1
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	0699      	lsls	r1, r3, #26
 8007232:	bf42      	ittt	mi
 8007234:	6833      	ldrmi	r3, [r6, #0]
 8007236:	3302      	addmi	r3, #2
 8007238:	6033      	strmi	r3, [r6, #0]
 800723a:	6825      	ldr	r5, [r4, #0]
 800723c:	f015 0506 	ands.w	r5, r5, #6
 8007240:	d106      	bne.n	8007250 <_printf_common+0x48>
 8007242:	f104 0a19 	add.w	sl, r4, #25
 8007246:	68e3      	ldr	r3, [r4, #12]
 8007248:	6832      	ldr	r2, [r6, #0]
 800724a:	1a9b      	subs	r3, r3, r2
 800724c:	42ab      	cmp	r3, r5
 800724e:	dc26      	bgt.n	800729e <_printf_common+0x96>
 8007250:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007254:	1e13      	subs	r3, r2, #0
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	bf18      	it	ne
 800725a:	2301      	movne	r3, #1
 800725c:	0692      	lsls	r2, r2, #26
 800725e:	d42b      	bmi.n	80072b8 <_printf_common+0xb0>
 8007260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007264:	4649      	mov	r1, r9
 8007266:	4638      	mov	r0, r7
 8007268:	47c0      	blx	r8
 800726a:	3001      	adds	r0, #1
 800726c:	d01e      	beq.n	80072ac <_printf_common+0xa4>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	68e5      	ldr	r5, [r4, #12]
 8007272:	6832      	ldr	r2, [r6, #0]
 8007274:	f003 0306 	and.w	r3, r3, #6
 8007278:	2b04      	cmp	r3, #4
 800727a:	bf08      	it	eq
 800727c:	1aad      	subeq	r5, r5, r2
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	6922      	ldr	r2, [r4, #16]
 8007282:	bf0c      	ite	eq
 8007284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007288:	2500      	movne	r5, #0
 800728a:	4293      	cmp	r3, r2
 800728c:	bfc4      	itt	gt
 800728e:	1a9b      	subgt	r3, r3, r2
 8007290:	18ed      	addgt	r5, r5, r3
 8007292:	2600      	movs	r6, #0
 8007294:	341a      	adds	r4, #26
 8007296:	42b5      	cmp	r5, r6
 8007298:	d11a      	bne.n	80072d0 <_printf_common+0xc8>
 800729a:	2000      	movs	r0, #0
 800729c:	e008      	b.n	80072b0 <_printf_common+0xa8>
 800729e:	2301      	movs	r3, #1
 80072a0:	4652      	mov	r2, sl
 80072a2:	4649      	mov	r1, r9
 80072a4:	4638      	mov	r0, r7
 80072a6:	47c0      	blx	r8
 80072a8:	3001      	adds	r0, #1
 80072aa:	d103      	bne.n	80072b4 <_printf_common+0xac>
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	3501      	adds	r5, #1
 80072b6:	e7c6      	b.n	8007246 <_printf_common+0x3e>
 80072b8:	18e1      	adds	r1, r4, r3
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	2030      	movs	r0, #48	; 0x30
 80072be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072c2:	4422      	add	r2, r4
 80072c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072cc:	3302      	adds	r3, #2
 80072ce:	e7c7      	b.n	8007260 <_printf_common+0x58>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4622      	mov	r2, r4
 80072d4:	4649      	mov	r1, r9
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	3001      	adds	r0, #1
 80072dc:	d0e6      	beq.n	80072ac <_printf_common+0xa4>
 80072de:	3601      	adds	r6, #1
 80072e0:	e7d9      	b.n	8007296 <_printf_common+0x8e>
	...

080072e4 <_printf_i>:
 80072e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	7e0f      	ldrb	r7, [r1, #24]
 80072ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072ec:	2f78      	cmp	r7, #120	; 0x78
 80072ee:	4691      	mov	r9, r2
 80072f0:	4680      	mov	r8, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	469a      	mov	sl, r3
 80072f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072fa:	d807      	bhi.n	800730c <_printf_i+0x28>
 80072fc:	2f62      	cmp	r7, #98	; 0x62
 80072fe:	d80a      	bhi.n	8007316 <_printf_i+0x32>
 8007300:	2f00      	cmp	r7, #0
 8007302:	f000 80d8 	beq.w	80074b6 <_printf_i+0x1d2>
 8007306:	2f58      	cmp	r7, #88	; 0x58
 8007308:	f000 80a3 	beq.w	8007452 <_printf_i+0x16e>
 800730c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007314:	e03a      	b.n	800738c <_printf_i+0xa8>
 8007316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800731a:	2b15      	cmp	r3, #21
 800731c:	d8f6      	bhi.n	800730c <_printf_i+0x28>
 800731e:	a101      	add	r1, pc, #4	; (adr r1, 8007324 <_printf_i+0x40>)
 8007320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007324:	0800737d 	.word	0x0800737d
 8007328:	08007391 	.word	0x08007391
 800732c:	0800730d 	.word	0x0800730d
 8007330:	0800730d 	.word	0x0800730d
 8007334:	0800730d 	.word	0x0800730d
 8007338:	0800730d 	.word	0x0800730d
 800733c:	08007391 	.word	0x08007391
 8007340:	0800730d 	.word	0x0800730d
 8007344:	0800730d 	.word	0x0800730d
 8007348:	0800730d 	.word	0x0800730d
 800734c:	0800730d 	.word	0x0800730d
 8007350:	0800749d 	.word	0x0800749d
 8007354:	080073c1 	.word	0x080073c1
 8007358:	0800747f 	.word	0x0800747f
 800735c:	0800730d 	.word	0x0800730d
 8007360:	0800730d 	.word	0x0800730d
 8007364:	080074bf 	.word	0x080074bf
 8007368:	0800730d 	.word	0x0800730d
 800736c:	080073c1 	.word	0x080073c1
 8007370:	0800730d 	.word	0x0800730d
 8007374:	0800730d 	.word	0x0800730d
 8007378:	08007487 	.word	0x08007487
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	602a      	str	r2, [r5, #0]
 8007384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800738c:	2301      	movs	r3, #1
 800738e:	e0a3      	b.n	80074d8 <_printf_i+0x1f4>
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	6829      	ldr	r1, [r5, #0]
 8007394:	0606      	lsls	r6, r0, #24
 8007396:	f101 0304 	add.w	r3, r1, #4
 800739a:	d50a      	bpl.n	80073b2 <_printf_i+0xce>
 800739c:	680e      	ldr	r6, [r1, #0]
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	2e00      	cmp	r6, #0
 80073a2:	da03      	bge.n	80073ac <_printf_i+0xc8>
 80073a4:	232d      	movs	r3, #45	; 0x2d
 80073a6:	4276      	negs	r6, r6
 80073a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ac:	485e      	ldr	r0, [pc, #376]	; (8007528 <_printf_i+0x244>)
 80073ae:	230a      	movs	r3, #10
 80073b0:	e019      	b.n	80073e6 <_printf_i+0x102>
 80073b2:	680e      	ldr	r6, [r1, #0]
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073ba:	bf18      	it	ne
 80073bc:	b236      	sxthne	r6, r6
 80073be:	e7ef      	b.n	80073a0 <_printf_i+0xbc>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	6029      	str	r1, [r5, #0]
 80073c8:	0601      	lsls	r1, r0, #24
 80073ca:	d501      	bpl.n	80073d0 <_printf_i+0xec>
 80073cc:	681e      	ldr	r6, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <_printf_i+0xf2>
 80073d0:	0646      	lsls	r6, r0, #25
 80073d2:	d5fb      	bpl.n	80073cc <_printf_i+0xe8>
 80073d4:	881e      	ldrh	r6, [r3, #0]
 80073d6:	4854      	ldr	r0, [pc, #336]	; (8007528 <_printf_i+0x244>)
 80073d8:	2f6f      	cmp	r7, #111	; 0x6f
 80073da:	bf0c      	ite	eq
 80073dc:	2308      	moveq	r3, #8
 80073de:	230a      	movne	r3, #10
 80073e0:	2100      	movs	r1, #0
 80073e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073e6:	6865      	ldr	r5, [r4, #4]
 80073e8:	60a5      	str	r5, [r4, #8]
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	bfa2      	ittt	ge
 80073ee:	6821      	ldrge	r1, [r4, #0]
 80073f0:	f021 0104 	bicge.w	r1, r1, #4
 80073f4:	6021      	strge	r1, [r4, #0]
 80073f6:	b90e      	cbnz	r6, 80073fc <_printf_i+0x118>
 80073f8:	2d00      	cmp	r5, #0
 80073fa:	d04d      	beq.n	8007498 <_printf_i+0x1b4>
 80073fc:	4615      	mov	r5, r2
 80073fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007402:	fb03 6711 	mls	r7, r3, r1, r6
 8007406:	5dc7      	ldrb	r7, [r0, r7]
 8007408:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800740c:	4637      	mov	r7, r6
 800740e:	42bb      	cmp	r3, r7
 8007410:	460e      	mov	r6, r1
 8007412:	d9f4      	bls.n	80073fe <_printf_i+0x11a>
 8007414:	2b08      	cmp	r3, #8
 8007416:	d10b      	bne.n	8007430 <_printf_i+0x14c>
 8007418:	6823      	ldr	r3, [r4, #0]
 800741a:	07de      	lsls	r6, r3, #31
 800741c:	d508      	bpl.n	8007430 <_printf_i+0x14c>
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	6861      	ldr	r1, [r4, #4]
 8007422:	4299      	cmp	r1, r3
 8007424:	bfde      	ittt	le
 8007426:	2330      	movle	r3, #48	; 0x30
 8007428:	f805 3c01 	strble.w	r3, [r5, #-1]
 800742c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007430:	1b52      	subs	r2, r2, r5
 8007432:	6122      	str	r2, [r4, #16]
 8007434:	f8cd a000 	str.w	sl, [sp]
 8007438:	464b      	mov	r3, r9
 800743a:	aa03      	add	r2, sp, #12
 800743c:	4621      	mov	r1, r4
 800743e:	4640      	mov	r0, r8
 8007440:	f7ff fee2 	bl	8007208 <_printf_common>
 8007444:	3001      	adds	r0, #1
 8007446:	d14c      	bne.n	80074e2 <_printf_i+0x1fe>
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	b004      	add	sp, #16
 800744e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007452:	4835      	ldr	r0, [pc, #212]	; (8007528 <_printf_i+0x244>)
 8007454:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007458:	6829      	ldr	r1, [r5, #0]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007460:	6029      	str	r1, [r5, #0]
 8007462:	061d      	lsls	r5, r3, #24
 8007464:	d514      	bpl.n	8007490 <_printf_i+0x1ac>
 8007466:	07df      	lsls	r7, r3, #31
 8007468:	bf44      	itt	mi
 800746a:	f043 0320 	orrmi.w	r3, r3, #32
 800746e:	6023      	strmi	r3, [r4, #0]
 8007470:	b91e      	cbnz	r6, 800747a <_printf_i+0x196>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	f023 0320 	bic.w	r3, r3, #32
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	2310      	movs	r3, #16
 800747c:	e7b0      	b.n	80073e0 <_printf_i+0xfc>
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	f043 0320 	orr.w	r3, r3, #32
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	2378      	movs	r3, #120	; 0x78
 8007488:	4828      	ldr	r0, [pc, #160]	; (800752c <_printf_i+0x248>)
 800748a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800748e:	e7e3      	b.n	8007458 <_printf_i+0x174>
 8007490:	0659      	lsls	r1, r3, #25
 8007492:	bf48      	it	mi
 8007494:	b2b6      	uxthmi	r6, r6
 8007496:	e7e6      	b.n	8007466 <_printf_i+0x182>
 8007498:	4615      	mov	r5, r2
 800749a:	e7bb      	b.n	8007414 <_printf_i+0x130>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	6826      	ldr	r6, [r4, #0]
 80074a0:	6961      	ldr	r1, [r4, #20]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6028      	str	r0, [r5, #0]
 80074a6:	0635      	lsls	r5, r6, #24
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	d501      	bpl.n	80074b0 <_printf_i+0x1cc>
 80074ac:	6019      	str	r1, [r3, #0]
 80074ae:	e002      	b.n	80074b6 <_printf_i+0x1d2>
 80074b0:	0670      	lsls	r0, r6, #25
 80074b2:	d5fb      	bpl.n	80074ac <_printf_i+0x1c8>
 80074b4:	8019      	strh	r1, [r3, #0]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6123      	str	r3, [r4, #16]
 80074ba:	4615      	mov	r5, r2
 80074bc:	e7ba      	b.n	8007434 <_printf_i+0x150>
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	6862      	ldr	r2, [r4, #4]
 80074c8:	2100      	movs	r1, #0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f7f8 fea8 	bl	8000220 <memchr>
 80074d0:	b108      	cbz	r0, 80074d6 <_printf_i+0x1f2>
 80074d2:	1b40      	subs	r0, r0, r5
 80074d4:	6060      	str	r0, [r4, #4]
 80074d6:	6863      	ldr	r3, [r4, #4]
 80074d8:	6123      	str	r3, [r4, #16]
 80074da:	2300      	movs	r3, #0
 80074dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e0:	e7a8      	b.n	8007434 <_printf_i+0x150>
 80074e2:	6923      	ldr	r3, [r4, #16]
 80074e4:	462a      	mov	r2, r5
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	47d0      	blx	sl
 80074ec:	3001      	adds	r0, #1
 80074ee:	d0ab      	beq.n	8007448 <_printf_i+0x164>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	079b      	lsls	r3, r3, #30
 80074f4:	d413      	bmi.n	800751e <_printf_i+0x23a>
 80074f6:	68e0      	ldr	r0, [r4, #12]
 80074f8:	9b03      	ldr	r3, [sp, #12]
 80074fa:	4298      	cmp	r0, r3
 80074fc:	bfb8      	it	lt
 80074fe:	4618      	movlt	r0, r3
 8007500:	e7a4      	b.n	800744c <_printf_i+0x168>
 8007502:	2301      	movs	r3, #1
 8007504:	4632      	mov	r2, r6
 8007506:	4649      	mov	r1, r9
 8007508:	4640      	mov	r0, r8
 800750a:	47d0      	blx	sl
 800750c:	3001      	adds	r0, #1
 800750e:	d09b      	beq.n	8007448 <_printf_i+0x164>
 8007510:	3501      	adds	r5, #1
 8007512:	68e3      	ldr	r3, [r4, #12]
 8007514:	9903      	ldr	r1, [sp, #12]
 8007516:	1a5b      	subs	r3, r3, r1
 8007518:	42ab      	cmp	r3, r5
 800751a:	dcf2      	bgt.n	8007502 <_printf_i+0x21e>
 800751c:	e7eb      	b.n	80074f6 <_printf_i+0x212>
 800751e:	2500      	movs	r5, #0
 8007520:	f104 0619 	add.w	r6, r4, #25
 8007524:	e7f5      	b.n	8007512 <_printf_i+0x22e>
 8007526:	bf00      	nop
 8007528:	0800a8ee 	.word	0x0800a8ee
 800752c:	0800a8ff 	.word	0x0800a8ff

08007530 <siprintf>:
 8007530:	b40e      	push	{r1, r2, r3}
 8007532:	b500      	push	{lr}
 8007534:	b09c      	sub	sp, #112	; 0x70
 8007536:	ab1d      	add	r3, sp, #116	; 0x74
 8007538:	9002      	str	r0, [sp, #8]
 800753a:	9006      	str	r0, [sp, #24]
 800753c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007540:	4809      	ldr	r0, [pc, #36]	; (8007568 <siprintf+0x38>)
 8007542:	9107      	str	r1, [sp, #28]
 8007544:	9104      	str	r1, [sp, #16]
 8007546:	4909      	ldr	r1, [pc, #36]	; (800756c <siprintf+0x3c>)
 8007548:	f853 2b04 	ldr.w	r2, [r3], #4
 800754c:	9105      	str	r1, [sp, #20]
 800754e:	6800      	ldr	r0, [r0, #0]
 8007550:	9301      	str	r3, [sp, #4]
 8007552:	a902      	add	r1, sp, #8
 8007554:	f001 fb76 	bl	8008c44 <_svfiprintf_r>
 8007558:	9b02      	ldr	r3, [sp, #8]
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	b01c      	add	sp, #112	; 0x70
 8007560:	f85d eb04 	ldr.w	lr, [sp], #4
 8007564:	b003      	add	sp, #12
 8007566:	4770      	bx	lr
 8007568:	2000000c 	.word	0x2000000c
 800756c:	ffff0208 	.word	0xffff0208

08007570 <quorem>:
 8007570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007574:	6903      	ldr	r3, [r0, #16]
 8007576:	690c      	ldr	r4, [r1, #16]
 8007578:	42a3      	cmp	r3, r4
 800757a:	4607      	mov	r7, r0
 800757c:	f2c0 8081 	blt.w	8007682 <quorem+0x112>
 8007580:	3c01      	subs	r4, #1
 8007582:	f101 0814 	add.w	r8, r1, #20
 8007586:	f100 0514 	add.w	r5, r0, #20
 800758a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007598:	3301      	adds	r3, #1
 800759a:	429a      	cmp	r2, r3
 800759c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075a8:	d331      	bcc.n	800760e <quorem+0x9e>
 80075aa:	f04f 0e00 	mov.w	lr, #0
 80075ae:	4640      	mov	r0, r8
 80075b0:	46ac      	mov	ip, r5
 80075b2:	46f2      	mov	sl, lr
 80075b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075b8:	b293      	uxth	r3, r2
 80075ba:	fb06 e303 	mla	r3, r6, r3, lr
 80075be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	ebaa 0303 	sub.w	r3, sl, r3
 80075c8:	f8dc a000 	ldr.w	sl, [ip]
 80075cc:	0c12      	lsrs	r2, r2, #16
 80075ce:	fa13 f38a 	uxtah	r3, r3, sl
 80075d2:	fb06 e202 	mla	r2, r6, r2, lr
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	9b00      	ldr	r3, [sp, #0]
 80075da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075de:	b292      	uxth	r2, r2
 80075e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80075ec:	4581      	cmp	r9, r0
 80075ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075f2:	f84c 3b04 	str.w	r3, [ip], #4
 80075f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075fa:	d2db      	bcs.n	80075b4 <quorem+0x44>
 80075fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007600:	b92b      	cbnz	r3, 800760e <quorem+0x9e>
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	3b04      	subs	r3, #4
 8007606:	429d      	cmp	r5, r3
 8007608:	461a      	mov	r2, r3
 800760a:	d32e      	bcc.n	800766a <quorem+0xfa>
 800760c:	613c      	str	r4, [r7, #16]
 800760e:	4638      	mov	r0, r7
 8007610:	f001 f8c4 	bl	800879c <__mcmp>
 8007614:	2800      	cmp	r0, #0
 8007616:	db24      	blt.n	8007662 <quorem+0xf2>
 8007618:	3601      	adds	r6, #1
 800761a:	4628      	mov	r0, r5
 800761c:	f04f 0c00 	mov.w	ip, #0
 8007620:	f858 2b04 	ldr.w	r2, [r8], #4
 8007624:	f8d0 e000 	ldr.w	lr, [r0]
 8007628:	b293      	uxth	r3, r2
 800762a:	ebac 0303 	sub.w	r3, ip, r3
 800762e:	0c12      	lsrs	r2, r2, #16
 8007630:	fa13 f38e 	uxtah	r3, r3, lr
 8007634:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007638:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800763c:	b29b      	uxth	r3, r3
 800763e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007642:	45c1      	cmp	r9, r8
 8007644:	f840 3b04 	str.w	r3, [r0], #4
 8007648:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800764c:	d2e8      	bcs.n	8007620 <quorem+0xb0>
 800764e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007656:	b922      	cbnz	r2, 8007662 <quorem+0xf2>
 8007658:	3b04      	subs	r3, #4
 800765a:	429d      	cmp	r5, r3
 800765c:	461a      	mov	r2, r3
 800765e:	d30a      	bcc.n	8007676 <quorem+0x106>
 8007660:	613c      	str	r4, [r7, #16]
 8007662:	4630      	mov	r0, r6
 8007664:	b003      	add	sp, #12
 8007666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	3b04      	subs	r3, #4
 800766e:	2a00      	cmp	r2, #0
 8007670:	d1cc      	bne.n	800760c <quorem+0x9c>
 8007672:	3c01      	subs	r4, #1
 8007674:	e7c7      	b.n	8007606 <quorem+0x96>
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	3b04      	subs	r3, #4
 800767a:	2a00      	cmp	r2, #0
 800767c:	d1f0      	bne.n	8007660 <quorem+0xf0>
 800767e:	3c01      	subs	r4, #1
 8007680:	e7eb      	b.n	800765a <quorem+0xea>
 8007682:	2000      	movs	r0, #0
 8007684:	e7ee      	b.n	8007664 <quorem+0xf4>
	...

08007688 <_dtoa_r>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	ed2d 8b04 	vpush	{d8-d9}
 8007690:	ec57 6b10 	vmov	r6, r7, d0
 8007694:	b093      	sub	sp, #76	; 0x4c
 8007696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800769c:	9106      	str	r1, [sp, #24]
 800769e:	ee10 aa10 	vmov	sl, s0
 80076a2:	4604      	mov	r4, r0
 80076a4:	9209      	str	r2, [sp, #36]	; 0x24
 80076a6:	930c      	str	r3, [sp, #48]	; 0x30
 80076a8:	46bb      	mov	fp, r7
 80076aa:	b975      	cbnz	r5, 80076ca <_dtoa_r+0x42>
 80076ac:	2010      	movs	r0, #16
 80076ae:	f000 fddd 	bl	800826c <malloc>
 80076b2:	4602      	mov	r2, r0
 80076b4:	6260      	str	r0, [r4, #36]	; 0x24
 80076b6:	b920      	cbnz	r0, 80076c2 <_dtoa_r+0x3a>
 80076b8:	4ba7      	ldr	r3, [pc, #668]	; (8007958 <_dtoa_r+0x2d0>)
 80076ba:	21ea      	movs	r1, #234	; 0xea
 80076bc:	48a7      	ldr	r0, [pc, #668]	; (800795c <_dtoa_r+0x2d4>)
 80076be:	f001 fbd1 	bl	8008e64 <__assert_func>
 80076c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076c6:	6005      	str	r5, [r0, #0]
 80076c8:	60c5      	str	r5, [r0, #12]
 80076ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	b151      	cbz	r1, 80076e6 <_dtoa_r+0x5e>
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	604a      	str	r2, [r1, #4]
 80076d4:	2301      	movs	r3, #1
 80076d6:	4093      	lsls	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 fe1c 	bl	8008318 <_Bfree>
 80076e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	1e3b      	subs	r3, r7, #0
 80076e8:	bfaa      	itet	ge
 80076ea:	2300      	movge	r3, #0
 80076ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80076f0:	f8c8 3000 	strge.w	r3, [r8]
 80076f4:	4b9a      	ldr	r3, [pc, #616]	; (8007960 <_dtoa_r+0x2d8>)
 80076f6:	bfbc      	itt	lt
 80076f8:	2201      	movlt	r2, #1
 80076fa:	f8c8 2000 	strlt.w	r2, [r8]
 80076fe:	ea33 030b 	bics.w	r3, r3, fp
 8007702:	d11b      	bne.n	800773c <_dtoa_r+0xb4>
 8007704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007706:	f242 730f 	movw	r3, #9999	; 0x270f
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007710:	4333      	orrs	r3, r6
 8007712:	f000 8592 	beq.w	800823a <_dtoa_r+0xbb2>
 8007716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007718:	b963      	cbnz	r3, 8007734 <_dtoa_r+0xac>
 800771a:	4b92      	ldr	r3, [pc, #584]	; (8007964 <_dtoa_r+0x2dc>)
 800771c:	e022      	b.n	8007764 <_dtoa_r+0xdc>
 800771e:	4b92      	ldr	r3, [pc, #584]	; (8007968 <_dtoa_r+0x2e0>)
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	3308      	adds	r3, #8
 8007724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	9801      	ldr	r0, [sp, #4]
 800772a:	b013      	add	sp, #76	; 0x4c
 800772c:	ecbd 8b04 	vpop	{d8-d9}
 8007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007734:	4b8b      	ldr	r3, [pc, #556]	; (8007964 <_dtoa_r+0x2dc>)
 8007736:	9301      	str	r3, [sp, #4]
 8007738:	3303      	adds	r3, #3
 800773a:	e7f3      	b.n	8007724 <_dtoa_r+0x9c>
 800773c:	2200      	movs	r2, #0
 800773e:	2300      	movs	r3, #0
 8007740:	4650      	mov	r0, sl
 8007742:	4659      	mov	r1, fp
 8007744:	f7f9 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 8007748:	ec4b ab19 	vmov	d9, sl, fp
 800774c:	4680      	mov	r8, r0
 800774e:	b158      	cbz	r0, 8007768 <_dtoa_r+0xe0>
 8007750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007752:	2301      	movs	r3, #1
 8007754:	6013      	str	r3, [r2, #0]
 8007756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 856b 	beq.w	8008234 <_dtoa_r+0xbac>
 800775e:	4883      	ldr	r0, [pc, #524]	; (800796c <_dtoa_r+0x2e4>)
 8007760:	6018      	str	r0, [r3, #0]
 8007762:	1e43      	subs	r3, r0, #1
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	e7df      	b.n	8007728 <_dtoa_r+0xa0>
 8007768:	ec4b ab10 	vmov	d0, sl, fp
 800776c:	aa10      	add	r2, sp, #64	; 0x40
 800776e:	a911      	add	r1, sp, #68	; 0x44
 8007770:	4620      	mov	r0, r4
 8007772:	f001 f8b9 	bl	80088e8 <__d2b>
 8007776:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800777a:	ee08 0a10 	vmov	s16, r0
 800777e:	2d00      	cmp	r5, #0
 8007780:	f000 8084 	beq.w	800788c <_dtoa_r+0x204>
 8007784:	ee19 3a90 	vmov	r3, s19
 8007788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800778c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007790:	4656      	mov	r6, sl
 8007792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800779a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800779e:	4b74      	ldr	r3, [pc, #464]	; (8007970 <_dtoa_r+0x2e8>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	4630      	mov	r0, r6
 80077a4:	4639      	mov	r1, r7
 80077a6:	f7f8 fd8f 	bl	80002c8 <__aeabi_dsub>
 80077aa:	a365      	add	r3, pc, #404	; (adr r3, 8007940 <_dtoa_r+0x2b8>)
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f7f8 ff42 	bl	8000638 <__aeabi_dmul>
 80077b4:	a364      	add	r3, pc, #400	; (adr r3, 8007948 <_dtoa_r+0x2c0>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f8 fd87 	bl	80002cc <__adddf3>
 80077be:	4606      	mov	r6, r0
 80077c0:	4628      	mov	r0, r5
 80077c2:	460f      	mov	r7, r1
 80077c4:	f7f8 fece 	bl	8000564 <__aeabi_i2d>
 80077c8:	a361      	add	r3, pc, #388	; (adr r3, 8007950 <_dtoa_r+0x2c8>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f7f8 ff33 	bl	8000638 <__aeabi_dmul>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f8 fd77 	bl	80002cc <__adddf3>
 80077de:	4606      	mov	r6, r0
 80077e0:	460f      	mov	r7, r1
 80077e2:	f7f9 f9d9 	bl	8000b98 <__aeabi_d2iz>
 80077e6:	2200      	movs	r2, #0
 80077e8:	9000      	str	r0, [sp, #0]
 80077ea:	2300      	movs	r3, #0
 80077ec:	4630      	mov	r0, r6
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f9 f994 	bl	8000b1c <__aeabi_dcmplt>
 80077f4:	b150      	cbz	r0, 800780c <_dtoa_r+0x184>
 80077f6:	9800      	ldr	r0, [sp, #0]
 80077f8:	f7f8 feb4 	bl	8000564 <__aeabi_i2d>
 80077fc:	4632      	mov	r2, r6
 80077fe:	463b      	mov	r3, r7
 8007800:	f7f9 f982 	bl	8000b08 <__aeabi_dcmpeq>
 8007804:	b910      	cbnz	r0, 800780c <_dtoa_r+0x184>
 8007806:	9b00      	ldr	r3, [sp, #0]
 8007808:	3b01      	subs	r3, #1
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	9b00      	ldr	r3, [sp, #0]
 800780e:	2b16      	cmp	r3, #22
 8007810:	d85a      	bhi.n	80078c8 <_dtoa_r+0x240>
 8007812:	9a00      	ldr	r2, [sp, #0]
 8007814:	4b57      	ldr	r3, [pc, #348]	; (8007974 <_dtoa_r+0x2ec>)
 8007816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	ec51 0b19 	vmov	r0, r1, d9
 8007822:	f7f9 f97b 	bl	8000b1c <__aeabi_dcmplt>
 8007826:	2800      	cmp	r0, #0
 8007828:	d050      	beq.n	80078cc <_dtoa_r+0x244>
 800782a:	9b00      	ldr	r3, [sp, #0]
 800782c:	3b01      	subs	r3, #1
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	2300      	movs	r3, #0
 8007832:	930b      	str	r3, [sp, #44]	; 0x2c
 8007834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007836:	1b5d      	subs	r5, r3, r5
 8007838:	1e6b      	subs	r3, r5, #1
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	bf45      	ittet	mi
 800783e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007842:	9304      	strmi	r3, [sp, #16]
 8007844:	2300      	movpl	r3, #0
 8007846:	2300      	movmi	r3, #0
 8007848:	bf4c      	ite	mi
 800784a:	9305      	strmi	r3, [sp, #20]
 800784c:	9304      	strpl	r3, [sp, #16]
 800784e:	9b00      	ldr	r3, [sp, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	db3d      	blt.n	80078d0 <_dtoa_r+0x248>
 8007854:	9b05      	ldr	r3, [sp, #20]
 8007856:	9a00      	ldr	r2, [sp, #0]
 8007858:	920a      	str	r2, [sp, #40]	; 0x28
 800785a:	4413      	add	r3, r2
 800785c:	9305      	str	r3, [sp, #20]
 800785e:	2300      	movs	r3, #0
 8007860:	9307      	str	r3, [sp, #28]
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	2b09      	cmp	r3, #9
 8007866:	f200 8089 	bhi.w	800797c <_dtoa_r+0x2f4>
 800786a:	2b05      	cmp	r3, #5
 800786c:	bfc4      	itt	gt
 800786e:	3b04      	subgt	r3, #4
 8007870:	9306      	strgt	r3, [sp, #24]
 8007872:	9b06      	ldr	r3, [sp, #24]
 8007874:	f1a3 0302 	sub.w	r3, r3, #2
 8007878:	bfcc      	ite	gt
 800787a:	2500      	movgt	r5, #0
 800787c:	2501      	movle	r5, #1
 800787e:	2b03      	cmp	r3, #3
 8007880:	f200 8087 	bhi.w	8007992 <_dtoa_r+0x30a>
 8007884:	e8df f003 	tbb	[pc, r3]
 8007888:	59383a2d 	.word	0x59383a2d
 800788c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007890:	441d      	add	r5, r3
 8007892:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007896:	2b20      	cmp	r3, #32
 8007898:	bfc1      	itttt	gt
 800789a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800789e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078aa:	bfda      	itte	le
 80078ac:	f1c3 0320 	rsble	r3, r3, #32
 80078b0:	fa06 f003 	lslle.w	r0, r6, r3
 80078b4:	4318      	orrgt	r0, r3
 80078b6:	f7f8 fe45 	bl	8000544 <__aeabi_ui2d>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4606      	mov	r6, r0
 80078be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078c2:	3d01      	subs	r5, #1
 80078c4:	930e      	str	r3, [sp, #56]	; 0x38
 80078c6:	e76a      	b.n	800779e <_dtoa_r+0x116>
 80078c8:	2301      	movs	r3, #1
 80078ca:	e7b2      	b.n	8007832 <_dtoa_r+0x1aa>
 80078cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80078ce:	e7b1      	b.n	8007834 <_dtoa_r+0x1ac>
 80078d0:	9b04      	ldr	r3, [sp, #16]
 80078d2:	9a00      	ldr	r2, [sp, #0]
 80078d4:	1a9b      	subs	r3, r3, r2
 80078d6:	9304      	str	r3, [sp, #16]
 80078d8:	4253      	negs	r3, r2
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	2300      	movs	r3, #0
 80078de:	930a      	str	r3, [sp, #40]	; 0x28
 80078e0:	e7bf      	b.n	8007862 <_dtoa_r+0x1da>
 80078e2:	2300      	movs	r3, #0
 80078e4:	9308      	str	r3, [sp, #32]
 80078e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	dc55      	bgt.n	8007998 <_dtoa_r+0x310>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078f2:	461a      	mov	r2, r3
 80078f4:	9209      	str	r2, [sp, #36]	; 0x24
 80078f6:	e00c      	b.n	8007912 <_dtoa_r+0x28a>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e7f3      	b.n	80078e4 <_dtoa_r+0x25c>
 80078fc:	2300      	movs	r3, #0
 80078fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007900:	9308      	str	r3, [sp, #32]
 8007902:	9b00      	ldr	r3, [sp, #0]
 8007904:	4413      	add	r3, r2
 8007906:	9302      	str	r3, [sp, #8]
 8007908:	3301      	adds	r3, #1
 800790a:	2b01      	cmp	r3, #1
 800790c:	9303      	str	r3, [sp, #12]
 800790e:	bfb8      	it	lt
 8007910:	2301      	movlt	r3, #1
 8007912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007914:	2200      	movs	r2, #0
 8007916:	6042      	str	r2, [r0, #4]
 8007918:	2204      	movs	r2, #4
 800791a:	f102 0614 	add.w	r6, r2, #20
 800791e:	429e      	cmp	r6, r3
 8007920:	6841      	ldr	r1, [r0, #4]
 8007922:	d93d      	bls.n	80079a0 <_dtoa_r+0x318>
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fcb7 	bl	8008298 <_Balloc>
 800792a:	9001      	str	r0, [sp, #4]
 800792c:	2800      	cmp	r0, #0
 800792e:	d13b      	bne.n	80079a8 <_dtoa_r+0x320>
 8007930:	4b11      	ldr	r3, [pc, #68]	; (8007978 <_dtoa_r+0x2f0>)
 8007932:	4602      	mov	r2, r0
 8007934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007938:	e6c0      	b.n	80076bc <_dtoa_r+0x34>
 800793a:	2301      	movs	r3, #1
 800793c:	e7df      	b.n	80078fe <_dtoa_r+0x276>
 800793e:	bf00      	nop
 8007940:	636f4361 	.word	0x636f4361
 8007944:	3fd287a7 	.word	0x3fd287a7
 8007948:	8b60c8b3 	.word	0x8b60c8b3
 800794c:	3fc68a28 	.word	0x3fc68a28
 8007950:	509f79fb 	.word	0x509f79fb
 8007954:	3fd34413 	.word	0x3fd34413
 8007958:	0800a91d 	.word	0x0800a91d
 800795c:	0800a934 	.word	0x0800a934
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	0800a919 	.word	0x0800a919
 8007968:	0800a910 	.word	0x0800a910
 800796c:	0800a8ed 	.word	0x0800a8ed
 8007970:	3ff80000 	.word	0x3ff80000
 8007974:	0800aa28 	.word	0x0800aa28
 8007978:	0800a98f 	.word	0x0800a98f
 800797c:	2501      	movs	r5, #1
 800797e:	2300      	movs	r3, #0
 8007980:	9306      	str	r3, [sp, #24]
 8007982:	9508      	str	r5, [sp, #32]
 8007984:	f04f 33ff 	mov.w	r3, #4294967295
 8007988:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800798c:	2200      	movs	r2, #0
 800798e:	2312      	movs	r3, #18
 8007990:	e7b0      	b.n	80078f4 <_dtoa_r+0x26c>
 8007992:	2301      	movs	r3, #1
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	e7f5      	b.n	8007984 <_dtoa_r+0x2fc>
 8007998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800799a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800799e:	e7b8      	b.n	8007912 <_dtoa_r+0x28a>
 80079a0:	3101      	adds	r1, #1
 80079a2:	6041      	str	r1, [r0, #4]
 80079a4:	0052      	lsls	r2, r2, #1
 80079a6:	e7b8      	b.n	800791a <_dtoa_r+0x292>
 80079a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079aa:	9a01      	ldr	r2, [sp, #4]
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	9b03      	ldr	r3, [sp, #12]
 80079b0:	2b0e      	cmp	r3, #14
 80079b2:	f200 809d 	bhi.w	8007af0 <_dtoa_r+0x468>
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	f000 809a 	beq.w	8007af0 <_dtoa_r+0x468>
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	dd32      	ble.n	8007a28 <_dtoa_r+0x3a0>
 80079c2:	4ab7      	ldr	r2, [pc, #732]	; (8007ca0 <_dtoa_r+0x618>)
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	05d8      	lsls	r0, r3, #23
 80079d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079d8:	d516      	bpl.n	8007a08 <_dtoa_r+0x380>
 80079da:	4bb2      	ldr	r3, [pc, #712]	; (8007ca4 <_dtoa_r+0x61c>)
 80079dc:	ec51 0b19 	vmov	r0, r1, d9
 80079e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079e4:	f7f8 ff52 	bl	800088c <__aeabi_ddiv>
 80079e8:	f007 070f 	and.w	r7, r7, #15
 80079ec:	4682      	mov	sl, r0
 80079ee:	468b      	mov	fp, r1
 80079f0:	2503      	movs	r5, #3
 80079f2:	4eac      	ldr	r6, [pc, #688]	; (8007ca4 <_dtoa_r+0x61c>)
 80079f4:	b957      	cbnz	r7, 8007a0c <_dtoa_r+0x384>
 80079f6:	4642      	mov	r2, r8
 80079f8:	464b      	mov	r3, r9
 80079fa:	4650      	mov	r0, sl
 80079fc:	4659      	mov	r1, fp
 80079fe:	f7f8 ff45 	bl	800088c <__aeabi_ddiv>
 8007a02:	4682      	mov	sl, r0
 8007a04:	468b      	mov	fp, r1
 8007a06:	e028      	b.n	8007a5a <_dtoa_r+0x3d2>
 8007a08:	2502      	movs	r5, #2
 8007a0a:	e7f2      	b.n	80079f2 <_dtoa_r+0x36a>
 8007a0c:	07f9      	lsls	r1, r7, #31
 8007a0e:	d508      	bpl.n	8007a22 <_dtoa_r+0x39a>
 8007a10:	4640      	mov	r0, r8
 8007a12:	4649      	mov	r1, r9
 8007a14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a18:	f7f8 fe0e 	bl	8000638 <__aeabi_dmul>
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	4680      	mov	r8, r0
 8007a20:	4689      	mov	r9, r1
 8007a22:	107f      	asrs	r7, r7, #1
 8007a24:	3608      	adds	r6, #8
 8007a26:	e7e5      	b.n	80079f4 <_dtoa_r+0x36c>
 8007a28:	f000 809b 	beq.w	8007b62 <_dtoa_r+0x4da>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	4f9d      	ldr	r7, [pc, #628]	; (8007ca4 <_dtoa_r+0x61c>)
 8007a30:	425e      	negs	r6, r3
 8007a32:	4b9b      	ldr	r3, [pc, #620]	; (8007ca0 <_dtoa_r+0x618>)
 8007a34:	f006 020f 	and.w	r2, r6, #15
 8007a38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	ec51 0b19 	vmov	r0, r1, d9
 8007a44:	f7f8 fdf8 	bl	8000638 <__aeabi_dmul>
 8007a48:	1136      	asrs	r6, r6, #4
 8007a4a:	4682      	mov	sl, r0
 8007a4c:	468b      	mov	fp, r1
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2502      	movs	r5, #2
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	d17a      	bne.n	8007b4c <_dtoa_r+0x4c4>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1d3      	bne.n	8007a02 <_dtoa_r+0x37a>
 8007a5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 8082 	beq.w	8007b66 <_dtoa_r+0x4de>
 8007a62:	4b91      	ldr	r3, [pc, #580]	; (8007ca8 <_dtoa_r+0x620>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	4650      	mov	r0, sl
 8007a68:	4659      	mov	r1, fp
 8007a6a:	f7f9 f857 	bl	8000b1c <__aeabi_dcmplt>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d079      	beq.n	8007b66 <_dtoa_r+0x4de>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d076      	beq.n	8007b66 <_dtoa_r+0x4de>
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dd36      	ble.n	8007aec <_dtoa_r+0x464>
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	4650      	mov	r0, sl
 8007a82:	4659      	mov	r1, fp
 8007a84:	1e5f      	subs	r7, r3, #1
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b88      	ldr	r3, [pc, #544]	; (8007cac <_dtoa_r+0x624>)
 8007a8a:	f7f8 fdd5 	bl	8000638 <__aeabi_dmul>
 8007a8e:	9e02      	ldr	r6, [sp, #8]
 8007a90:	4682      	mov	sl, r0
 8007a92:	468b      	mov	fp, r1
 8007a94:	3501      	adds	r5, #1
 8007a96:	4628      	mov	r0, r5
 8007a98:	f7f8 fd64 	bl	8000564 <__aeabi_i2d>
 8007a9c:	4652      	mov	r2, sl
 8007a9e:	465b      	mov	r3, fp
 8007aa0:	f7f8 fdca 	bl	8000638 <__aeabi_dmul>
 8007aa4:	4b82      	ldr	r3, [pc, #520]	; (8007cb0 <_dtoa_r+0x628>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f7f8 fc10 	bl	80002cc <__adddf3>
 8007aac:	46d0      	mov	r8, sl
 8007aae:	46d9      	mov	r9, fp
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ab6:	2e00      	cmp	r6, #0
 8007ab8:	d158      	bne.n	8007b6c <_dtoa_r+0x4e4>
 8007aba:	4b7e      	ldr	r3, [pc, #504]	; (8007cb4 <_dtoa_r+0x62c>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	4640      	mov	r0, r8
 8007ac0:	4649      	mov	r1, r9
 8007ac2:	f7f8 fc01 	bl	80002c8 <__aeabi_dsub>
 8007ac6:	4652      	mov	r2, sl
 8007ac8:	465b      	mov	r3, fp
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	f7f9 f843 	bl	8000b58 <__aeabi_dcmpgt>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	f040 8295 	bne.w	8008002 <_dtoa_r+0x97a>
 8007ad8:	4652      	mov	r2, sl
 8007ada:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f9 f81b 	bl	8000b1c <__aeabi_dcmplt>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f040 8289 	bne.w	8007ffe <_dtoa_r+0x976>
 8007aec:	ec5b ab19 	vmov	sl, fp, d9
 8007af0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f2c0 8148 	blt.w	8007d88 <_dtoa_r+0x700>
 8007af8:	9a00      	ldr	r2, [sp, #0]
 8007afa:	2a0e      	cmp	r2, #14
 8007afc:	f300 8144 	bgt.w	8007d88 <_dtoa_r+0x700>
 8007b00:	4b67      	ldr	r3, [pc, #412]	; (8007ca0 <_dtoa_r+0x618>)
 8007b02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f280 80d5 	bge.w	8007cbc <_dtoa_r+0x634>
 8007b12:	9b03      	ldr	r3, [sp, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f300 80d1 	bgt.w	8007cbc <_dtoa_r+0x634>
 8007b1a:	f040 826f 	bne.w	8007ffc <_dtoa_r+0x974>
 8007b1e:	4b65      	ldr	r3, [pc, #404]	; (8007cb4 <_dtoa_r+0x62c>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 fd87 	bl	8000638 <__aeabi_dmul>
 8007b2a:	4652      	mov	r2, sl
 8007b2c:	465b      	mov	r3, fp
 8007b2e:	f7f9 f809 	bl	8000b44 <__aeabi_dcmpge>
 8007b32:	9e03      	ldr	r6, [sp, #12]
 8007b34:	4637      	mov	r7, r6
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f040 8245 	bne.w	8007fc6 <_dtoa_r+0x93e>
 8007b3c:	9d01      	ldr	r5, [sp, #4]
 8007b3e:	2331      	movs	r3, #49	; 0x31
 8007b40:	f805 3b01 	strb.w	r3, [r5], #1
 8007b44:	9b00      	ldr	r3, [sp, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	e240      	b.n	8007fce <_dtoa_r+0x946>
 8007b4c:	07f2      	lsls	r2, r6, #31
 8007b4e:	d505      	bpl.n	8007b5c <_dtoa_r+0x4d4>
 8007b50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b54:	f7f8 fd70 	bl	8000638 <__aeabi_dmul>
 8007b58:	3501      	adds	r5, #1
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	1076      	asrs	r6, r6, #1
 8007b5e:	3708      	adds	r7, #8
 8007b60:	e777      	b.n	8007a52 <_dtoa_r+0x3ca>
 8007b62:	2502      	movs	r5, #2
 8007b64:	e779      	b.n	8007a5a <_dtoa_r+0x3d2>
 8007b66:	9f00      	ldr	r7, [sp, #0]
 8007b68:	9e03      	ldr	r6, [sp, #12]
 8007b6a:	e794      	b.n	8007a96 <_dtoa_r+0x40e>
 8007b6c:	9901      	ldr	r1, [sp, #4]
 8007b6e:	4b4c      	ldr	r3, [pc, #304]	; (8007ca0 <_dtoa_r+0x618>)
 8007b70:	4431      	add	r1, r6
 8007b72:	910d      	str	r1, [sp, #52]	; 0x34
 8007b74:	9908      	ldr	r1, [sp, #32]
 8007b76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d043      	beq.n	8007c0a <_dtoa_r+0x582>
 8007b82:	494d      	ldr	r1, [pc, #308]	; (8007cb8 <_dtoa_r+0x630>)
 8007b84:	2000      	movs	r0, #0
 8007b86:	f7f8 fe81 	bl	800088c <__aeabi_ddiv>
 8007b8a:	4652      	mov	r2, sl
 8007b8c:	465b      	mov	r3, fp
 8007b8e:	f7f8 fb9b 	bl	80002c8 <__aeabi_dsub>
 8007b92:	9d01      	ldr	r5, [sp, #4]
 8007b94:	4682      	mov	sl, r0
 8007b96:	468b      	mov	fp, r1
 8007b98:	4649      	mov	r1, r9
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7f8 fffc 	bl	8000b98 <__aeabi_d2iz>
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	f7f8 fcdf 	bl	8000564 <__aeabi_i2d>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	f7f8 fb8b 	bl	80002c8 <__aeabi_dsub>
 8007bb2:	3630      	adds	r6, #48	; 0x30
 8007bb4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bb8:	4652      	mov	r2, sl
 8007bba:	465b      	mov	r3, fp
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	4689      	mov	r9, r1
 8007bc0:	f7f8 ffac 	bl	8000b1c <__aeabi_dcmplt>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d163      	bne.n	8007c90 <_dtoa_r+0x608>
 8007bc8:	4642      	mov	r2, r8
 8007bca:	464b      	mov	r3, r9
 8007bcc:	4936      	ldr	r1, [pc, #216]	; (8007ca8 <_dtoa_r+0x620>)
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f7f8 fb7a 	bl	80002c8 <__aeabi_dsub>
 8007bd4:	4652      	mov	r2, sl
 8007bd6:	465b      	mov	r3, fp
 8007bd8:	f7f8 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f040 80b5 	bne.w	8007d4c <_dtoa_r+0x6c4>
 8007be2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007be4:	429d      	cmp	r5, r3
 8007be6:	d081      	beq.n	8007aec <_dtoa_r+0x464>
 8007be8:	4b30      	ldr	r3, [pc, #192]	; (8007cac <_dtoa_r+0x624>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	4650      	mov	r0, sl
 8007bee:	4659      	mov	r1, fp
 8007bf0:	f7f8 fd22 	bl	8000638 <__aeabi_dmul>
 8007bf4:	4b2d      	ldr	r3, [pc, #180]	; (8007cac <_dtoa_r+0x624>)
 8007bf6:	4682      	mov	sl, r0
 8007bf8:	468b      	mov	fp, r1
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f7f8 fd1a 	bl	8000638 <__aeabi_dmul>
 8007c04:	4680      	mov	r8, r0
 8007c06:	4689      	mov	r9, r1
 8007c08:	e7c6      	b.n	8007b98 <_dtoa_r+0x510>
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	4659      	mov	r1, fp
 8007c0e:	f7f8 fd13 	bl	8000638 <__aeabi_dmul>
 8007c12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c14:	9d01      	ldr	r5, [sp, #4]
 8007c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c18:	4682      	mov	sl, r0
 8007c1a:	468b      	mov	fp, r1
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f7f8 ffba 	bl	8000b98 <__aeabi_d2iz>
 8007c24:	4606      	mov	r6, r0
 8007c26:	f7f8 fc9d 	bl	8000564 <__aeabi_i2d>
 8007c2a:	3630      	adds	r6, #48	; 0x30
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4640      	mov	r0, r8
 8007c32:	4649      	mov	r1, r9
 8007c34:	f7f8 fb48 	bl	80002c8 <__aeabi_dsub>
 8007c38:	f805 6b01 	strb.w	r6, [r5], #1
 8007c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c3e:	429d      	cmp	r5, r3
 8007c40:	4680      	mov	r8, r0
 8007c42:	4689      	mov	r9, r1
 8007c44:	f04f 0200 	mov.w	r2, #0
 8007c48:	d124      	bne.n	8007c94 <_dtoa_r+0x60c>
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <_dtoa_r+0x630>)
 8007c4c:	4650      	mov	r0, sl
 8007c4e:	4659      	mov	r1, fp
 8007c50:	f7f8 fb3c 	bl	80002cc <__adddf3>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4640      	mov	r0, r8
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	f7f8 ff7c 	bl	8000b58 <__aeabi_dcmpgt>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d173      	bne.n	8007d4c <_dtoa_r+0x6c4>
 8007c64:	4652      	mov	r2, sl
 8007c66:	465b      	mov	r3, fp
 8007c68:	4913      	ldr	r1, [pc, #76]	; (8007cb8 <_dtoa_r+0x630>)
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f7f8 fb2c 	bl	80002c8 <__aeabi_dsub>
 8007c70:	4602      	mov	r2, r0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4640      	mov	r0, r8
 8007c76:	4649      	mov	r1, r9
 8007c78:	f7f8 ff50 	bl	8000b1c <__aeabi_dcmplt>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	f43f af35 	beq.w	8007aec <_dtoa_r+0x464>
 8007c82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c84:	1e6b      	subs	r3, r5, #1
 8007c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c8c:	2b30      	cmp	r3, #48	; 0x30
 8007c8e:	d0f8      	beq.n	8007c82 <_dtoa_r+0x5fa>
 8007c90:	9700      	str	r7, [sp, #0]
 8007c92:	e049      	b.n	8007d28 <_dtoa_r+0x6a0>
 8007c94:	4b05      	ldr	r3, [pc, #20]	; (8007cac <_dtoa_r+0x624>)
 8007c96:	f7f8 fccf 	bl	8000638 <__aeabi_dmul>
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	4689      	mov	r9, r1
 8007c9e:	e7bd      	b.n	8007c1c <_dtoa_r+0x594>
 8007ca0:	0800aa28 	.word	0x0800aa28
 8007ca4:	0800aa00 	.word	0x0800aa00
 8007ca8:	3ff00000 	.word	0x3ff00000
 8007cac:	40240000 	.word	0x40240000
 8007cb0:	401c0000 	.word	0x401c0000
 8007cb4:	40140000 	.word	0x40140000
 8007cb8:	3fe00000 	.word	0x3fe00000
 8007cbc:	9d01      	ldr	r5, [sp, #4]
 8007cbe:	4656      	mov	r6, sl
 8007cc0:	465f      	mov	r7, fp
 8007cc2:	4642      	mov	r2, r8
 8007cc4:	464b      	mov	r3, r9
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 fddf 	bl	800088c <__aeabi_ddiv>
 8007cce:	f7f8 ff63 	bl	8000b98 <__aeabi_d2iz>
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	f7f8 fc46 	bl	8000564 <__aeabi_i2d>
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	f7f8 fcac 	bl	8000638 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4630      	mov	r0, r6
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007cec:	f7f8 faec 	bl	80002c8 <__aeabi_dsub>
 8007cf0:	f805 6b01 	strb.w	r6, [r5], #1
 8007cf4:	9e01      	ldr	r6, [sp, #4]
 8007cf6:	9f03      	ldr	r7, [sp, #12]
 8007cf8:	1bae      	subs	r6, r5, r6
 8007cfa:	42b7      	cmp	r7, r6
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	d135      	bne.n	8007d6e <_dtoa_r+0x6e6>
 8007d02:	f7f8 fae3 	bl	80002cc <__adddf3>
 8007d06:	4642      	mov	r2, r8
 8007d08:	464b      	mov	r3, r9
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	460f      	mov	r7, r1
 8007d0e:	f7f8 ff23 	bl	8000b58 <__aeabi_dcmpgt>
 8007d12:	b9d0      	cbnz	r0, 8007d4a <_dtoa_r+0x6c2>
 8007d14:	4642      	mov	r2, r8
 8007d16:	464b      	mov	r3, r9
 8007d18:	4630      	mov	r0, r6
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	f7f8 fef4 	bl	8000b08 <__aeabi_dcmpeq>
 8007d20:	b110      	cbz	r0, 8007d28 <_dtoa_r+0x6a0>
 8007d22:	f01a 0f01 	tst.w	sl, #1
 8007d26:	d110      	bne.n	8007d4a <_dtoa_r+0x6c2>
 8007d28:	4620      	mov	r0, r4
 8007d2a:	ee18 1a10 	vmov	r1, s16
 8007d2e:	f000 faf3 	bl	8008318 <_Bfree>
 8007d32:	2300      	movs	r3, #0
 8007d34:	9800      	ldr	r0, [sp, #0]
 8007d36:	702b      	strb	r3, [r5, #0]
 8007d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	6018      	str	r0, [r3, #0]
 8007d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f43f acf1 	beq.w	8007728 <_dtoa_r+0xa0>
 8007d46:	601d      	str	r5, [r3, #0]
 8007d48:	e4ee      	b.n	8007728 <_dtoa_r+0xa0>
 8007d4a:	9f00      	ldr	r7, [sp, #0]
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	461d      	mov	r5, r3
 8007d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d54:	2a39      	cmp	r2, #57	; 0x39
 8007d56:	d106      	bne.n	8007d66 <_dtoa_r+0x6de>
 8007d58:	9a01      	ldr	r2, [sp, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d1f7      	bne.n	8007d4e <_dtoa_r+0x6c6>
 8007d5e:	9901      	ldr	r1, [sp, #4]
 8007d60:	2230      	movs	r2, #48	; 0x30
 8007d62:	3701      	adds	r7, #1
 8007d64:	700a      	strb	r2, [r1, #0]
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	3201      	adds	r2, #1
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	e790      	b.n	8007c90 <_dtoa_r+0x608>
 8007d6e:	4ba6      	ldr	r3, [pc, #664]	; (8008008 <_dtoa_r+0x980>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	f7f8 fc61 	bl	8000638 <__aeabi_dmul>
 8007d76:	2200      	movs	r2, #0
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460f      	mov	r7, r1
 8007d7e:	f7f8 fec3 	bl	8000b08 <__aeabi_dcmpeq>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d09d      	beq.n	8007cc2 <_dtoa_r+0x63a>
 8007d86:	e7cf      	b.n	8007d28 <_dtoa_r+0x6a0>
 8007d88:	9a08      	ldr	r2, [sp, #32]
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	f000 80d7 	beq.w	8007f3e <_dtoa_r+0x8b6>
 8007d90:	9a06      	ldr	r2, [sp, #24]
 8007d92:	2a01      	cmp	r2, #1
 8007d94:	f300 80ba 	bgt.w	8007f0c <_dtoa_r+0x884>
 8007d98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	f000 80b2 	beq.w	8007f04 <_dtoa_r+0x87c>
 8007da0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007da4:	9e07      	ldr	r6, [sp, #28]
 8007da6:	9d04      	ldr	r5, [sp, #16]
 8007da8:	9a04      	ldr	r2, [sp, #16]
 8007daa:	441a      	add	r2, r3
 8007dac:	9204      	str	r2, [sp, #16]
 8007dae:	9a05      	ldr	r2, [sp, #20]
 8007db0:	2101      	movs	r1, #1
 8007db2:	441a      	add	r2, r3
 8007db4:	4620      	mov	r0, r4
 8007db6:	9205      	str	r2, [sp, #20]
 8007db8:	f000 fb66 	bl	8008488 <__i2b>
 8007dbc:	4607      	mov	r7, r0
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	dd0c      	ble.n	8007ddc <_dtoa_r+0x754>
 8007dc2:	9b05      	ldr	r3, [sp, #20]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	dd09      	ble.n	8007ddc <_dtoa_r+0x754>
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	9a04      	ldr	r2, [sp, #16]
 8007dcc:	bfa8      	it	ge
 8007dce:	462b      	movge	r3, r5
 8007dd0:	1ad2      	subs	r2, r2, r3
 8007dd2:	9204      	str	r2, [sp, #16]
 8007dd4:	9a05      	ldr	r2, [sp, #20]
 8007dd6:	1aed      	subs	r5, r5, r3
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	9305      	str	r3, [sp, #20]
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	b31b      	cbz	r3, 8007e28 <_dtoa_r+0x7a0>
 8007de0:	9b08      	ldr	r3, [sp, #32]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 80af 	beq.w	8007f46 <_dtoa_r+0x8be>
 8007de8:	2e00      	cmp	r6, #0
 8007dea:	dd13      	ble.n	8007e14 <_dtoa_r+0x78c>
 8007dec:	4639      	mov	r1, r7
 8007dee:	4632      	mov	r2, r6
 8007df0:	4620      	mov	r0, r4
 8007df2:	f000 fc09 	bl	8008608 <__pow5mult>
 8007df6:	ee18 2a10 	vmov	r2, s16
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f000 fb58 	bl	80084b4 <__multiply>
 8007e04:	ee18 1a10 	vmov	r1, s16
 8007e08:	4680      	mov	r8, r0
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f000 fa84 	bl	8008318 <_Bfree>
 8007e10:	ee08 8a10 	vmov	s16, r8
 8007e14:	9b07      	ldr	r3, [sp, #28]
 8007e16:	1b9a      	subs	r2, r3, r6
 8007e18:	d006      	beq.n	8007e28 <_dtoa_r+0x7a0>
 8007e1a:	ee18 1a10 	vmov	r1, s16
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 fbf2 	bl	8008608 <__pow5mult>
 8007e24:	ee08 0a10 	vmov	s16, r0
 8007e28:	2101      	movs	r1, #1
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 fb2c 	bl	8008488 <__i2b>
 8007e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	4606      	mov	r6, r0
 8007e36:	f340 8088 	ble.w	8007f4a <_dtoa_r+0x8c2>
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 fbe2 	bl	8008608 <__pow5mult>
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	4606      	mov	r6, r0
 8007e4a:	f340 8081 	ble.w	8007f50 <_dtoa_r+0x8c8>
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	6933      	ldr	r3, [r6, #16]
 8007e54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e58:	6918      	ldr	r0, [r3, #16]
 8007e5a:	f000 fac5 	bl	80083e8 <__hi0bits>
 8007e5e:	f1c0 0020 	rsb	r0, r0, #32
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	4418      	add	r0, r3
 8007e66:	f010 001f 	ands.w	r0, r0, #31
 8007e6a:	f000 8092 	beq.w	8007f92 <_dtoa_r+0x90a>
 8007e6e:	f1c0 0320 	rsb	r3, r0, #32
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	f340 808a 	ble.w	8007f8c <_dtoa_r+0x904>
 8007e78:	f1c0 001c 	rsb	r0, r0, #28
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	4403      	add	r3, r0
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	9b05      	ldr	r3, [sp, #20]
 8007e84:	4403      	add	r3, r0
 8007e86:	4405      	add	r5, r0
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dd07      	ble.n	8007ea0 <_dtoa_r+0x818>
 8007e90:	ee18 1a10 	vmov	r1, s16
 8007e94:	461a      	mov	r2, r3
 8007e96:	4620      	mov	r0, r4
 8007e98:	f000 fc10 	bl	80086bc <__lshift>
 8007e9c:	ee08 0a10 	vmov	s16, r0
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dd05      	ble.n	8007eb2 <_dtoa_r+0x82a>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f000 fc06 	bl	80086bc <__lshift>
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d06e      	beq.n	8007f96 <_dtoa_r+0x90e>
 8007eb8:	ee18 0a10 	vmov	r0, s16
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	f000 fc6d 	bl	800879c <__mcmp>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	da67      	bge.n	8007f96 <_dtoa_r+0x90e>
 8007ec6:	9b00      	ldr	r3, [sp, #0]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	ee18 1a10 	vmov	r1, s16
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	220a      	movs	r2, #10
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 fa41 	bl	800835c <__multadd>
 8007eda:	9b08      	ldr	r3, [sp, #32]
 8007edc:	ee08 0a10 	vmov	s16, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 81b1 	beq.w	8008248 <_dtoa_r+0xbc0>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4639      	mov	r1, r7
 8007eea:	220a      	movs	r2, #10
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fa35 	bl	800835c <__multadd>
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	f300 808e 	bgt.w	8008018 <_dtoa_r+0x990>
 8007efc:	9b06      	ldr	r3, [sp, #24]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	dc51      	bgt.n	8007fa6 <_dtoa_r+0x91e>
 8007f02:	e089      	b.n	8008018 <_dtoa_r+0x990>
 8007f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f0a:	e74b      	b.n	8007da4 <_dtoa_r+0x71c>
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	1e5e      	subs	r6, r3, #1
 8007f10:	9b07      	ldr	r3, [sp, #28]
 8007f12:	42b3      	cmp	r3, r6
 8007f14:	bfbf      	itttt	lt
 8007f16:	9b07      	ldrlt	r3, [sp, #28]
 8007f18:	9607      	strlt	r6, [sp, #28]
 8007f1a:	1af2      	sublt	r2, r6, r3
 8007f1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f1e:	bfb6      	itet	lt
 8007f20:	189b      	addlt	r3, r3, r2
 8007f22:	1b9e      	subge	r6, r3, r6
 8007f24:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f26:	9b03      	ldr	r3, [sp, #12]
 8007f28:	bfb8      	it	lt
 8007f2a:	2600      	movlt	r6, #0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bfb7      	itett	lt
 8007f30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f38:	1a9d      	sublt	r5, r3, r2
 8007f3a:	2300      	movlt	r3, #0
 8007f3c:	e734      	b.n	8007da8 <_dtoa_r+0x720>
 8007f3e:	9e07      	ldr	r6, [sp, #28]
 8007f40:	9d04      	ldr	r5, [sp, #16]
 8007f42:	9f08      	ldr	r7, [sp, #32]
 8007f44:	e73b      	b.n	8007dbe <_dtoa_r+0x736>
 8007f46:	9a07      	ldr	r2, [sp, #28]
 8007f48:	e767      	b.n	8007e1a <_dtoa_r+0x792>
 8007f4a:	9b06      	ldr	r3, [sp, #24]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	dc18      	bgt.n	8007f82 <_dtoa_r+0x8fa>
 8007f50:	f1ba 0f00 	cmp.w	sl, #0
 8007f54:	d115      	bne.n	8007f82 <_dtoa_r+0x8fa>
 8007f56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f5a:	b993      	cbnz	r3, 8007f82 <_dtoa_r+0x8fa>
 8007f5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f60:	0d1b      	lsrs	r3, r3, #20
 8007f62:	051b      	lsls	r3, r3, #20
 8007f64:	b183      	cbz	r3, 8007f88 <_dtoa_r+0x900>
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	9b05      	ldr	r3, [sp, #20]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	9305      	str	r3, [sp, #20]
 8007f72:	f04f 0801 	mov.w	r8, #1
 8007f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f47f af6a 	bne.w	8007e52 <_dtoa_r+0x7ca>
 8007f7e:	2001      	movs	r0, #1
 8007f80:	e76f      	b.n	8007e62 <_dtoa_r+0x7da>
 8007f82:	f04f 0800 	mov.w	r8, #0
 8007f86:	e7f6      	b.n	8007f76 <_dtoa_r+0x8ee>
 8007f88:	4698      	mov	r8, r3
 8007f8a:	e7f4      	b.n	8007f76 <_dtoa_r+0x8ee>
 8007f8c:	f43f af7d 	beq.w	8007e8a <_dtoa_r+0x802>
 8007f90:	4618      	mov	r0, r3
 8007f92:	301c      	adds	r0, #28
 8007f94:	e772      	b.n	8007e7c <_dtoa_r+0x7f4>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dc37      	bgt.n	800800c <_dtoa_r+0x984>
 8007f9c:	9b06      	ldr	r3, [sp, #24]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	dd34      	ble.n	800800c <_dtoa_r+0x984>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	9302      	str	r3, [sp, #8]
 8007fa6:	9b02      	ldr	r3, [sp, #8]
 8007fa8:	b96b      	cbnz	r3, 8007fc6 <_dtoa_r+0x93e>
 8007faa:	4631      	mov	r1, r6
 8007fac:	2205      	movs	r2, #5
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f9d4 	bl	800835c <__multadd>
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	ee18 0a10 	vmov	r0, s16
 8007fbc:	f000 fbee 	bl	800879c <__mcmp>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	f73f adbb 	bgt.w	8007b3c <_dtoa_r+0x4b4>
 8007fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc8:	9d01      	ldr	r5, [sp, #4]
 8007fca:	43db      	mvns	r3, r3
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 f99f 	bl	8008318 <_Bfree>
 8007fda:	2f00      	cmp	r7, #0
 8007fdc:	f43f aea4 	beq.w	8007d28 <_dtoa_r+0x6a0>
 8007fe0:	f1b8 0f00 	cmp.w	r8, #0
 8007fe4:	d005      	beq.n	8007ff2 <_dtoa_r+0x96a>
 8007fe6:	45b8      	cmp	r8, r7
 8007fe8:	d003      	beq.n	8007ff2 <_dtoa_r+0x96a>
 8007fea:	4641      	mov	r1, r8
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 f993 	bl	8008318 <_Bfree>
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 f98f 	bl	8008318 <_Bfree>
 8007ffa:	e695      	b.n	8007d28 <_dtoa_r+0x6a0>
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	4637      	mov	r7, r6
 8008000:	e7e1      	b.n	8007fc6 <_dtoa_r+0x93e>
 8008002:	9700      	str	r7, [sp, #0]
 8008004:	4637      	mov	r7, r6
 8008006:	e599      	b.n	8007b3c <_dtoa_r+0x4b4>
 8008008:	40240000 	.word	0x40240000
 800800c:	9b08      	ldr	r3, [sp, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 80ca 	beq.w	80081a8 <_dtoa_r+0xb20>
 8008014:	9b03      	ldr	r3, [sp, #12]
 8008016:	9302      	str	r3, [sp, #8]
 8008018:	2d00      	cmp	r5, #0
 800801a:	dd05      	ble.n	8008028 <_dtoa_r+0x9a0>
 800801c:	4639      	mov	r1, r7
 800801e:	462a      	mov	r2, r5
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fb4b 	bl	80086bc <__lshift>
 8008026:	4607      	mov	r7, r0
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d05b      	beq.n	80080e6 <_dtoa_r+0xa5e>
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4620      	mov	r0, r4
 8008032:	f000 f931 	bl	8008298 <_Balloc>
 8008036:	4605      	mov	r5, r0
 8008038:	b928      	cbnz	r0, 8008046 <_dtoa_r+0x9be>
 800803a:	4b87      	ldr	r3, [pc, #540]	; (8008258 <_dtoa_r+0xbd0>)
 800803c:	4602      	mov	r2, r0
 800803e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008042:	f7ff bb3b 	b.w	80076bc <_dtoa_r+0x34>
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	3202      	adds	r2, #2
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	f107 010c 	add.w	r1, r7, #12
 8008050:	300c      	adds	r0, #12
 8008052:	f000 f913 	bl	800827c <memcpy>
 8008056:	2201      	movs	r2, #1
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fb2e 	bl	80086bc <__lshift>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	f103 0901 	add.w	r9, r3, #1
 8008066:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800806a:	4413      	add	r3, r2
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	f00a 0301 	and.w	r3, sl, #1
 8008072:	46b8      	mov	r8, r7
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	4607      	mov	r7, r0
 8008078:	4631      	mov	r1, r6
 800807a:	ee18 0a10 	vmov	r0, s16
 800807e:	f7ff fa77 	bl	8007570 <quorem>
 8008082:	4641      	mov	r1, r8
 8008084:	9002      	str	r0, [sp, #8]
 8008086:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800808a:	ee18 0a10 	vmov	r0, s16
 800808e:	f000 fb85 	bl	800879c <__mcmp>
 8008092:	463a      	mov	r2, r7
 8008094:	9003      	str	r0, [sp, #12]
 8008096:	4631      	mov	r1, r6
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fb9b 	bl	80087d4 <__mdiff>
 800809e:	68c2      	ldr	r2, [r0, #12]
 80080a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080a4:	4605      	mov	r5, r0
 80080a6:	bb02      	cbnz	r2, 80080ea <_dtoa_r+0xa62>
 80080a8:	4601      	mov	r1, r0
 80080aa:	ee18 0a10 	vmov	r0, s16
 80080ae:	f000 fb75 	bl	800879c <__mcmp>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4629      	mov	r1, r5
 80080b6:	4620      	mov	r0, r4
 80080b8:	9207      	str	r2, [sp, #28]
 80080ba:	f000 f92d 	bl	8008318 <_Bfree>
 80080be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080c2:	ea43 0102 	orr.w	r1, r3, r2
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	430b      	orrs	r3, r1
 80080ca:	464d      	mov	r5, r9
 80080cc:	d10f      	bne.n	80080ee <_dtoa_r+0xa66>
 80080ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080d2:	d02a      	beq.n	800812a <_dtoa_r+0xaa2>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dd02      	ble.n	80080e0 <_dtoa_r+0xa58>
 80080da:	9b02      	ldr	r3, [sp, #8]
 80080dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80080e0:	f88b a000 	strb.w	sl, [fp]
 80080e4:	e775      	b.n	8007fd2 <_dtoa_r+0x94a>
 80080e6:	4638      	mov	r0, r7
 80080e8:	e7ba      	b.n	8008060 <_dtoa_r+0x9d8>
 80080ea:	2201      	movs	r2, #1
 80080ec:	e7e2      	b.n	80080b4 <_dtoa_r+0xa2c>
 80080ee:	9b03      	ldr	r3, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	db04      	blt.n	80080fe <_dtoa_r+0xa76>
 80080f4:	9906      	ldr	r1, [sp, #24]
 80080f6:	430b      	orrs	r3, r1
 80080f8:	9904      	ldr	r1, [sp, #16]
 80080fa:	430b      	orrs	r3, r1
 80080fc:	d122      	bne.n	8008144 <_dtoa_r+0xabc>
 80080fe:	2a00      	cmp	r2, #0
 8008100:	ddee      	ble.n	80080e0 <_dtoa_r+0xa58>
 8008102:	ee18 1a10 	vmov	r1, s16
 8008106:	2201      	movs	r2, #1
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fad7 	bl	80086bc <__lshift>
 800810e:	4631      	mov	r1, r6
 8008110:	ee08 0a10 	vmov	s16, r0
 8008114:	f000 fb42 	bl	800879c <__mcmp>
 8008118:	2800      	cmp	r0, #0
 800811a:	dc03      	bgt.n	8008124 <_dtoa_r+0xa9c>
 800811c:	d1e0      	bne.n	80080e0 <_dtoa_r+0xa58>
 800811e:	f01a 0f01 	tst.w	sl, #1
 8008122:	d0dd      	beq.n	80080e0 <_dtoa_r+0xa58>
 8008124:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008128:	d1d7      	bne.n	80080da <_dtoa_r+0xa52>
 800812a:	2339      	movs	r3, #57	; 0x39
 800812c:	f88b 3000 	strb.w	r3, [fp]
 8008130:	462b      	mov	r3, r5
 8008132:	461d      	mov	r5, r3
 8008134:	3b01      	subs	r3, #1
 8008136:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800813a:	2a39      	cmp	r2, #57	; 0x39
 800813c:	d071      	beq.n	8008222 <_dtoa_r+0xb9a>
 800813e:	3201      	adds	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	e746      	b.n	8007fd2 <_dtoa_r+0x94a>
 8008144:	2a00      	cmp	r2, #0
 8008146:	dd07      	ble.n	8008158 <_dtoa_r+0xad0>
 8008148:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800814c:	d0ed      	beq.n	800812a <_dtoa_r+0xaa2>
 800814e:	f10a 0301 	add.w	r3, sl, #1
 8008152:	f88b 3000 	strb.w	r3, [fp]
 8008156:	e73c      	b.n	8007fd2 <_dtoa_r+0x94a>
 8008158:	9b05      	ldr	r3, [sp, #20]
 800815a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800815e:	4599      	cmp	r9, r3
 8008160:	d047      	beq.n	80081f2 <_dtoa_r+0xb6a>
 8008162:	ee18 1a10 	vmov	r1, s16
 8008166:	2300      	movs	r3, #0
 8008168:	220a      	movs	r2, #10
 800816a:	4620      	mov	r0, r4
 800816c:	f000 f8f6 	bl	800835c <__multadd>
 8008170:	45b8      	cmp	r8, r7
 8008172:	ee08 0a10 	vmov	s16, r0
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	f04f 020a 	mov.w	r2, #10
 800817e:	4641      	mov	r1, r8
 8008180:	4620      	mov	r0, r4
 8008182:	d106      	bne.n	8008192 <_dtoa_r+0xb0a>
 8008184:	f000 f8ea 	bl	800835c <__multadd>
 8008188:	4680      	mov	r8, r0
 800818a:	4607      	mov	r7, r0
 800818c:	f109 0901 	add.w	r9, r9, #1
 8008190:	e772      	b.n	8008078 <_dtoa_r+0x9f0>
 8008192:	f000 f8e3 	bl	800835c <__multadd>
 8008196:	4639      	mov	r1, r7
 8008198:	4680      	mov	r8, r0
 800819a:	2300      	movs	r3, #0
 800819c:	220a      	movs	r2, #10
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 f8dc 	bl	800835c <__multadd>
 80081a4:	4607      	mov	r7, r0
 80081a6:	e7f1      	b.n	800818c <_dtoa_r+0xb04>
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	9302      	str	r3, [sp, #8]
 80081ac:	9d01      	ldr	r5, [sp, #4]
 80081ae:	ee18 0a10 	vmov	r0, s16
 80081b2:	4631      	mov	r1, r6
 80081b4:	f7ff f9dc 	bl	8007570 <quorem>
 80081b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081bc:	9b01      	ldr	r3, [sp, #4]
 80081be:	f805 ab01 	strb.w	sl, [r5], #1
 80081c2:	1aea      	subs	r2, r5, r3
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	4293      	cmp	r3, r2
 80081c8:	dd09      	ble.n	80081de <_dtoa_r+0xb56>
 80081ca:	ee18 1a10 	vmov	r1, s16
 80081ce:	2300      	movs	r3, #0
 80081d0:	220a      	movs	r2, #10
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 f8c2 	bl	800835c <__multadd>
 80081d8:	ee08 0a10 	vmov	s16, r0
 80081dc:	e7e7      	b.n	80081ae <_dtoa_r+0xb26>
 80081de:	9b02      	ldr	r3, [sp, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfc8      	it	gt
 80081e4:	461d      	movgt	r5, r3
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	bfd8      	it	le
 80081ea:	2501      	movle	r5, #1
 80081ec:	441d      	add	r5, r3
 80081ee:	f04f 0800 	mov.w	r8, #0
 80081f2:	ee18 1a10 	vmov	r1, s16
 80081f6:	2201      	movs	r2, #1
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fa5f 	bl	80086bc <__lshift>
 80081fe:	4631      	mov	r1, r6
 8008200:	ee08 0a10 	vmov	s16, r0
 8008204:	f000 faca 	bl	800879c <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	dc91      	bgt.n	8008130 <_dtoa_r+0xaa8>
 800820c:	d102      	bne.n	8008214 <_dtoa_r+0xb8c>
 800820e:	f01a 0f01 	tst.w	sl, #1
 8008212:	d18d      	bne.n	8008130 <_dtoa_r+0xaa8>
 8008214:	462b      	mov	r3, r5
 8008216:	461d      	mov	r5, r3
 8008218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800821c:	2a30      	cmp	r2, #48	; 0x30
 800821e:	d0fa      	beq.n	8008216 <_dtoa_r+0xb8e>
 8008220:	e6d7      	b.n	8007fd2 <_dtoa_r+0x94a>
 8008222:	9a01      	ldr	r2, [sp, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d184      	bne.n	8008132 <_dtoa_r+0xaaa>
 8008228:	9b00      	ldr	r3, [sp, #0]
 800822a:	3301      	adds	r3, #1
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	2331      	movs	r3, #49	; 0x31
 8008230:	7013      	strb	r3, [r2, #0]
 8008232:	e6ce      	b.n	8007fd2 <_dtoa_r+0x94a>
 8008234:	4b09      	ldr	r3, [pc, #36]	; (800825c <_dtoa_r+0xbd4>)
 8008236:	f7ff ba95 	b.w	8007764 <_dtoa_r+0xdc>
 800823a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800823c:	2b00      	cmp	r3, #0
 800823e:	f47f aa6e 	bne.w	800771e <_dtoa_r+0x96>
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <_dtoa_r+0xbd8>)
 8008244:	f7ff ba8e 	b.w	8007764 <_dtoa_r+0xdc>
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	dcae      	bgt.n	80081ac <_dtoa_r+0xb24>
 800824e:	9b06      	ldr	r3, [sp, #24]
 8008250:	2b02      	cmp	r3, #2
 8008252:	f73f aea8 	bgt.w	8007fa6 <_dtoa_r+0x91e>
 8008256:	e7a9      	b.n	80081ac <_dtoa_r+0xb24>
 8008258:	0800a98f 	.word	0x0800a98f
 800825c:	0800a8ec 	.word	0x0800a8ec
 8008260:	0800a910 	.word	0x0800a910

08008264 <_localeconv_r>:
 8008264:	4800      	ldr	r0, [pc, #0]	; (8008268 <_localeconv_r+0x4>)
 8008266:	4770      	bx	lr
 8008268:	20000160 	.word	0x20000160

0800826c <malloc>:
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <malloc+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f000 bc17 	b.w	8008aa4 <_malloc_r>
 8008276:	bf00      	nop
 8008278:	2000000c 	.word	0x2000000c

0800827c <memcpy>:
 800827c:	440a      	add	r2, r1
 800827e:	4291      	cmp	r1, r2
 8008280:	f100 33ff 	add.w	r3, r0, #4294967295
 8008284:	d100      	bne.n	8008288 <memcpy+0xc>
 8008286:	4770      	bx	lr
 8008288:	b510      	push	{r4, lr}
 800828a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800828e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008292:	4291      	cmp	r1, r2
 8008294:	d1f9      	bne.n	800828a <memcpy+0xe>
 8008296:	bd10      	pop	{r4, pc}

08008298 <_Balloc>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	b976      	cbnz	r6, 80082c0 <_Balloc+0x28>
 80082a2:	2010      	movs	r0, #16
 80082a4:	f7ff ffe2 	bl	800826c <malloc>
 80082a8:	4602      	mov	r2, r0
 80082aa:	6260      	str	r0, [r4, #36]	; 0x24
 80082ac:	b920      	cbnz	r0, 80082b8 <_Balloc+0x20>
 80082ae:	4b18      	ldr	r3, [pc, #96]	; (8008310 <_Balloc+0x78>)
 80082b0:	4818      	ldr	r0, [pc, #96]	; (8008314 <_Balloc+0x7c>)
 80082b2:	2166      	movs	r1, #102	; 0x66
 80082b4:	f000 fdd6 	bl	8008e64 <__assert_func>
 80082b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082bc:	6006      	str	r6, [r0, #0]
 80082be:	60c6      	str	r6, [r0, #12]
 80082c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80082c2:	68f3      	ldr	r3, [r6, #12]
 80082c4:	b183      	cbz	r3, 80082e8 <_Balloc+0x50>
 80082c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082ce:	b9b8      	cbnz	r0, 8008300 <_Balloc+0x68>
 80082d0:	2101      	movs	r1, #1
 80082d2:	fa01 f605 	lsl.w	r6, r1, r5
 80082d6:	1d72      	adds	r2, r6, #5
 80082d8:	0092      	lsls	r2, r2, #2
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fb60 	bl	80089a0 <_calloc_r>
 80082e0:	b160      	cbz	r0, 80082fc <_Balloc+0x64>
 80082e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082e6:	e00e      	b.n	8008306 <_Balloc+0x6e>
 80082e8:	2221      	movs	r2, #33	; 0x21
 80082ea:	2104      	movs	r1, #4
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fb57 	bl	80089a0 <_calloc_r>
 80082f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f4:	60f0      	str	r0, [r6, #12]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e4      	bne.n	80082c6 <_Balloc+0x2e>
 80082fc:	2000      	movs	r0, #0
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	6802      	ldr	r2, [r0, #0]
 8008302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008306:	2300      	movs	r3, #0
 8008308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800830c:	e7f7      	b.n	80082fe <_Balloc+0x66>
 800830e:	bf00      	nop
 8008310:	0800a91d 	.word	0x0800a91d
 8008314:	0800a9a0 	.word	0x0800a9a0

08008318 <_Bfree>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800831c:	4605      	mov	r5, r0
 800831e:	460c      	mov	r4, r1
 8008320:	b976      	cbnz	r6, 8008340 <_Bfree+0x28>
 8008322:	2010      	movs	r0, #16
 8008324:	f7ff ffa2 	bl	800826c <malloc>
 8008328:	4602      	mov	r2, r0
 800832a:	6268      	str	r0, [r5, #36]	; 0x24
 800832c:	b920      	cbnz	r0, 8008338 <_Bfree+0x20>
 800832e:	4b09      	ldr	r3, [pc, #36]	; (8008354 <_Bfree+0x3c>)
 8008330:	4809      	ldr	r0, [pc, #36]	; (8008358 <_Bfree+0x40>)
 8008332:	218a      	movs	r1, #138	; 0x8a
 8008334:	f000 fd96 	bl	8008e64 <__assert_func>
 8008338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800833c:	6006      	str	r6, [r0, #0]
 800833e:	60c6      	str	r6, [r0, #12]
 8008340:	b13c      	cbz	r4, 8008352 <_Bfree+0x3a>
 8008342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008344:	6862      	ldr	r2, [r4, #4]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800834c:	6021      	str	r1, [r4, #0]
 800834e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008352:	bd70      	pop	{r4, r5, r6, pc}
 8008354:	0800a91d 	.word	0x0800a91d
 8008358:	0800a9a0 	.word	0x0800a9a0

0800835c <__multadd>:
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	690d      	ldr	r5, [r1, #16]
 8008362:	4607      	mov	r7, r0
 8008364:	460c      	mov	r4, r1
 8008366:	461e      	mov	r6, r3
 8008368:	f101 0c14 	add.w	ip, r1, #20
 800836c:	2000      	movs	r0, #0
 800836e:	f8dc 3000 	ldr.w	r3, [ip]
 8008372:	b299      	uxth	r1, r3
 8008374:	fb02 6101 	mla	r1, r2, r1, r6
 8008378:	0c1e      	lsrs	r6, r3, #16
 800837a:	0c0b      	lsrs	r3, r1, #16
 800837c:	fb02 3306 	mla	r3, r2, r6, r3
 8008380:	b289      	uxth	r1, r1
 8008382:	3001      	adds	r0, #1
 8008384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008388:	4285      	cmp	r5, r0
 800838a:	f84c 1b04 	str.w	r1, [ip], #4
 800838e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008392:	dcec      	bgt.n	800836e <__multadd+0x12>
 8008394:	b30e      	cbz	r6, 80083da <__multadd+0x7e>
 8008396:	68a3      	ldr	r3, [r4, #8]
 8008398:	42ab      	cmp	r3, r5
 800839a:	dc19      	bgt.n	80083d0 <__multadd+0x74>
 800839c:	6861      	ldr	r1, [r4, #4]
 800839e:	4638      	mov	r0, r7
 80083a0:	3101      	adds	r1, #1
 80083a2:	f7ff ff79 	bl	8008298 <_Balloc>
 80083a6:	4680      	mov	r8, r0
 80083a8:	b928      	cbnz	r0, 80083b6 <__multadd+0x5a>
 80083aa:	4602      	mov	r2, r0
 80083ac:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <__multadd+0x84>)
 80083ae:	480d      	ldr	r0, [pc, #52]	; (80083e4 <__multadd+0x88>)
 80083b0:	21b5      	movs	r1, #181	; 0xb5
 80083b2:	f000 fd57 	bl	8008e64 <__assert_func>
 80083b6:	6922      	ldr	r2, [r4, #16]
 80083b8:	3202      	adds	r2, #2
 80083ba:	f104 010c 	add.w	r1, r4, #12
 80083be:	0092      	lsls	r2, r2, #2
 80083c0:	300c      	adds	r0, #12
 80083c2:	f7ff ff5b 	bl	800827c <memcpy>
 80083c6:	4621      	mov	r1, r4
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff ffa5 	bl	8008318 <_Bfree>
 80083ce:	4644      	mov	r4, r8
 80083d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083d4:	3501      	adds	r5, #1
 80083d6:	615e      	str	r6, [r3, #20]
 80083d8:	6125      	str	r5, [r4, #16]
 80083da:	4620      	mov	r0, r4
 80083dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083e0:	0800a98f 	.word	0x0800a98f
 80083e4:	0800a9a0 	.word	0x0800a9a0

080083e8 <__hi0bits>:
 80083e8:	0c03      	lsrs	r3, r0, #16
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	b9d3      	cbnz	r3, 8008424 <__hi0bits+0x3c>
 80083ee:	0400      	lsls	r0, r0, #16
 80083f0:	2310      	movs	r3, #16
 80083f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80083f6:	bf04      	itt	eq
 80083f8:	0200      	lsleq	r0, r0, #8
 80083fa:	3308      	addeq	r3, #8
 80083fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008400:	bf04      	itt	eq
 8008402:	0100      	lsleq	r0, r0, #4
 8008404:	3304      	addeq	r3, #4
 8008406:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800840a:	bf04      	itt	eq
 800840c:	0080      	lsleq	r0, r0, #2
 800840e:	3302      	addeq	r3, #2
 8008410:	2800      	cmp	r0, #0
 8008412:	db05      	blt.n	8008420 <__hi0bits+0x38>
 8008414:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008418:	f103 0301 	add.w	r3, r3, #1
 800841c:	bf08      	it	eq
 800841e:	2320      	moveq	r3, #32
 8008420:	4618      	mov	r0, r3
 8008422:	4770      	bx	lr
 8008424:	2300      	movs	r3, #0
 8008426:	e7e4      	b.n	80083f2 <__hi0bits+0xa>

08008428 <__lo0bits>:
 8008428:	6803      	ldr	r3, [r0, #0]
 800842a:	f013 0207 	ands.w	r2, r3, #7
 800842e:	4601      	mov	r1, r0
 8008430:	d00b      	beq.n	800844a <__lo0bits+0x22>
 8008432:	07da      	lsls	r2, r3, #31
 8008434:	d423      	bmi.n	800847e <__lo0bits+0x56>
 8008436:	0798      	lsls	r0, r3, #30
 8008438:	bf49      	itett	mi
 800843a:	085b      	lsrmi	r3, r3, #1
 800843c:	089b      	lsrpl	r3, r3, #2
 800843e:	2001      	movmi	r0, #1
 8008440:	600b      	strmi	r3, [r1, #0]
 8008442:	bf5c      	itt	pl
 8008444:	600b      	strpl	r3, [r1, #0]
 8008446:	2002      	movpl	r0, #2
 8008448:	4770      	bx	lr
 800844a:	b298      	uxth	r0, r3
 800844c:	b9a8      	cbnz	r0, 800847a <__lo0bits+0x52>
 800844e:	0c1b      	lsrs	r3, r3, #16
 8008450:	2010      	movs	r0, #16
 8008452:	b2da      	uxtb	r2, r3
 8008454:	b90a      	cbnz	r2, 800845a <__lo0bits+0x32>
 8008456:	3008      	adds	r0, #8
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	071a      	lsls	r2, r3, #28
 800845c:	bf04      	itt	eq
 800845e:	091b      	lsreq	r3, r3, #4
 8008460:	3004      	addeq	r0, #4
 8008462:	079a      	lsls	r2, r3, #30
 8008464:	bf04      	itt	eq
 8008466:	089b      	lsreq	r3, r3, #2
 8008468:	3002      	addeq	r0, #2
 800846a:	07da      	lsls	r2, r3, #31
 800846c:	d403      	bmi.n	8008476 <__lo0bits+0x4e>
 800846e:	085b      	lsrs	r3, r3, #1
 8008470:	f100 0001 	add.w	r0, r0, #1
 8008474:	d005      	beq.n	8008482 <__lo0bits+0x5a>
 8008476:	600b      	str	r3, [r1, #0]
 8008478:	4770      	bx	lr
 800847a:	4610      	mov	r0, r2
 800847c:	e7e9      	b.n	8008452 <__lo0bits+0x2a>
 800847e:	2000      	movs	r0, #0
 8008480:	4770      	bx	lr
 8008482:	2020      	movs	r0, #32
 8008484:	4770      	bx	lr
	...

08008488 <__i2b>:
 8008488:	b510      	push	{r4, lr}
 800848a:	460c      	mov	r4, r1
 800848c:	2101      	movs	r1, #1
 800848e:	f7ff ff03 	bl	8008298 <_Balloc>
 8008492:	4602      	mov	r2, r0
 8008494:	b928      	cbnz	r0, 80084a2 <__i2b+0x1a>
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <__i2b+0x24>)
 8008498:	4805      	ldr	r0, [pc, #20]	; (80084b0 <__i2b+0x28>)
 800849a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800849e:	f000 fce1 	bl	8008e64 <__assert_func>
 80084a2:	2301      	movs	r3, #1
 80084a4:	6144      	str	r4, [r0, #20]
 80084a6:	6103      	str	r3, [r0, #16]
 80084a8:	bd10      	pop	{r4, pc}
 80084aa:	bf00      	nop
 80084ac:	0800a98f 	.word	0x0800a98f
 80084b0:	0800a9a0 	.word	0x0800a9a0

080084b4 <__multiply>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4691      	mov	r9, r2
 80084ba:	690a      	ldr	r2, [r1, #16]
 80084bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	bfb8      	it	lt
 80084c4:	460b      	movlt	r3, r1
 80084c6:	460c      	mov	r4, r1
 80084c8:	bfbc      	itt	lt
 80084ca:	464c      	movlt	r4, r9
 80084cc:	4699      	movlt	r9, r3
 80084ce:	6927      	ldr	r7, [r4, #16]
 80084d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80084d4:	68a3      	ldr	r3, [r4, #8]
 80084d6:	6861      	ldr	r1, [r4, #4]
 80084d8:	eb07 060a 	add.w	r6, r7, sl
 80084dc:	42b3      	cmp	r3, r6
 80084de:	b085      	sub	sp, #20
 80084e0:	bfb8      	it	lt
 80084e2:	3101      	addlt	r1, #1
 80084e4:	f7ff fed8 	bl	8008298 <_Balloc>
 80084e8:	b930      	cbnz	r0, 80084f8 <__multiply+0x44>
 80084ea:	4602      	mov	r2, r0
 80084ec:	4b44      	ldr	r3, [pc, #272]	; (8008600 <__multiply+0x14c>)
 80084ee:	4845      	ldr	r0, [pc, #276]	; (8008604 <__multiply+0x150>)
 80084f0:	f240 115d 	movw	r1, #349	; 0x15d
 80084f4:	f000 fcb6 	bl	8008e64 <__assert_func>
 80084f8:	f100 0514 	add.w	r5, r0, #20
 80084fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008500:	462b      	mov	r3, r5
 8008502:	2200      	movs	r2, #0
 8008504:	4543      	cmp	r3, r8
 8008506:	d321      	bcc.n	800854c <__multiply+0x98>
 8008508:	f104 0314 	add.w	r3, r4, #20
 800850c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008510:	f109 0314 	add.w	r3, r9, #20
 8008514:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008518:	9202      	str	r2, [sp, #8]
 800851a:	1b3a      	subs	r2, r7, r4
 800851c:	3a15      	subs	r2, #21
 800851e:	f022 0203 	bic.w	r2, r2, #3
 8008522:	3204      	adds	r2, #4
 8008524:	f104 0115 	add.w	r1, r4, #21
 8008528:	428f      	cmp	r7, r1
 800852a:	bf38      	it	cc
 800852c:	2204      	movcc	r2, #4
 800852e:	9201      	str	r2, [sp, #4]
 8008530:	9a02      	ldr	r2, [sp, #8]
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	429a      	cmp	r2, r3
 8008536:	d80c      	bhi.n	8008552 <__multiply+0x9e>
 8008538:	2e00      	cmp	r6, #0
 800853a:	dd03      	ble.n	8008544 <__multiply+0x90>
 800853c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008540:	2b00      	cmp	r3, #0
 8008542:	d05a      	beq.n	80085fa <__multiply+0x146>
 8008544:	6106      	str	r6, [r0, #16]
 8008546:	b005      	add	sp, #20
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	f843 2b04 	str.w	r2, [r3], #4
 8008550:	e7d8      	b.n	8008504 <__multiply+0x50>
 8008552:	f8b3 a000 	ldrh.w	sl, [r3]
 8008556:	f1ba 0f00 	cmp.w	sl, #0
 800855a:	d024      	beq.n	80085a6 <__multiply+0xf2>
 800855c:	f104 0e14 	add.w	lr, r4, #20
 8008560:	46a9      	mov	r9, r5
 8008562:	f04f 0c00 	mov.w	ip, #0
 8008566:	f85e 2b04 	ldr.w	r2, [lr], #4
 800856a:	f8d9 1000 	ldr.w	r1, [r9]
 800856e:	fa1f fb82 	uxth.w	fp, r2
 8008572:	b289      	uxth	r1, r1
 8008574:	fb0a 110b 	mla	r1, sl, fp, r1
 8008578:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800857c:	f8d9 2000 	ldr.w	r2, [r9]
 8008580:	4461      	add	r1, ip
 8008582:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008586:	fb0a c20b 	mla	r2, sl, fp, ip
 800858a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800858e:	b289      	uxth	r1, r1
 8008590:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008594:	4577      	cmp	r7, lr
 8008596:	f849 1b04 	str.w	r1, [r9], #4
 800859a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800859e:	d8e2      	bhi.n	8008566 <__multiply+0xb2>
 80085a0:	9a01      	ldr	r2, [sp, #4]
 80085a2:	f845 c002 	str.w	ip, [r5, r2]
 80085a6:	9a03      	ldr	r2, [sp, #12]
 80085a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085ac:	3304      	adds	r3, #4
 80085ae:	f1b9 0f00 	cmp.w	r9, #0
 80085b2:	d020      	beq.n	80085f6 <__multiply+0x142>
 80085b4:	6829      	ldr	r1, [r5, #0]
 80085b6:	f104 0c14 	add.w	ip, r4, #20
 80085ba:	46ae      	mov	lr, r5
 80085bc:	f04f 0a00 	mov.w	sl, #0
 80085c0:	f8bc b000 	ldrh.w	fp, [ip]
 80085c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80085c8:	fb09 220b 	mla	r2, r9, fp, r2
 80085cc:	4492      	add	sl, r2
 80085ce:	b289      	uxth	r1, r1
 80085d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80085d4:	f84e 1b04 	str.w	r1, [lr], #4
 80085d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80085dc:	f8be 1000 	ldrh.w	r1, [lr]
 80085e0:	0c12      	lsrs	r2, r2, #16
 80085e2:	fb09 1102 	mla	r1, r9, r2, r1
 80085e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80085ea:	4567      	cmp	r7, ip
 80085ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80085f0:	d8e6      	bhi.n	80085c0 <__multiply+0x10c>
 80085f2:	9a01      	ldr	r2, [sp, #4]
 80085f4:	50a9      	str	r1, [r5, r2]
 80085f6:	3504      	adds	r5, #4
 80085f8:	e79a      	b.n	8008530 <__multiply+0x7c>
 80085fa:	3e01      	subs	r6, #1
 80085fc:	e79c      	b.n	8008538 <__multiply+0x84>
 80085fe:	bf00      	nop
 8008600:	0800a98f 	.word	0x0800a98f
 8008604:	0800a9a0 	.word	0x0800a9a0

08008608 <__pow5mult>:
 8008608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800860c:	4615      	mov	r5, r2
 800860e:	f012 0203 	ands.w	r2, r2, #3
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	d007      	beq.n	8008628 <__pow5mult+0x20>
 8008618:	4c25      	ldr	r4, [pc, #148]	; (80086b0 <__pow5mult+0xa8>)
 800861a:	3a01      	subs	r2, #1
 800861c:	2300      	movs	r3, #0
 800861e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008622:	f7ff fe9b 	bl	800835c <__multadd>
 8008626:	4607      	mov	r7, r0
 8008628:	10ad      	asrs	r5, r5, #2
 800862a:	d03d      	beq.n	80086a8 <__pow5mult+0xa0>
 800862c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800862e:	b97c      	cbnz	r4, 8008650 <__pow5mult+0x48>
 8008630:	2010      	movs	r0, #16
 8008632:	f7ff fe1b 	bl	800826c <malloc>
 8008636:	4602      	mov	r2, r0
 8008638:	6270      	str	r0, [r6, #36]	; 0x24
 800863a:	b928      	cbnz	r0, 8008648 <__pow5mult+0x40>
 800863c:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <__pow5mult+0xac>)
 800863e:	481e      	ldr	r0, [pc, #120]	; (80086b8 <__pow5mult+0xb0>)
 8008640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008644:	f000 fc0e 	bl	8008e64 <__assert_func>
 8008648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800864c:	6004      	str	r4, [r0, #0]
 800864e:	60c4      	str	r4, [r0, #12]
 8008650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008658:	b94c      	cbnz	r4, 800866e <__pow5mult+0x66>
 800865a:	f240 2171 	movw	r1, #625	; 0x271
 800865e:	4630      	mov	r0, r6
 8008660:	f7ff ff12 	bl	8008488 <__i2b>
 8008664:	2300      	movs	r3, #0
 8008666:	f8c8 0008 	str.w	r0, [r8, #8]
 800866a:	4604      	mov	r4, r0
 800866c:	6003      	str	r3, [r0, #0]
 800866e:	f04f 0900 	mov.w	r9, #0
 8008672:	07eb      	lsls	r3, r5, #31
 8008674:	d50a      	bpl.n	800868c <__pow5mult+0x84>
 8008676:	4639      	mov	r1, r7
 8008678:	4622      	mov	r2, r4
 800867a:	4630      	mov	r0, r6
 800867c:	f7ff ff1a 	bl	80084b4 <__multiply>
 8008680:	4639      	mov	r1, r7
 8008682:	4680      	mov	r8, r0
 8008684:	4630      	mov	r0, r6
 8008686:	f7ff fe47 	bl	8008318 <_Bfree>
 800868a:	4647      	mov	r7, r8
 800868c:	106d      	asrs	r5, r5, #1
 800868e:	d00b      	beq.n	80086a8 <__pow5mult+0xa0>
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	b938      	cbnz	r0, 80086a4 <__pow5mult+0x9c>
 8008694:	4622      	mov	r2, r4
 8008696:	4621      	mov	r1, r4
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff ff0b 	bl	80084b4 <__multiply>
 800869e:	6020      	str	r0, [r4, #0]
 80086a0:	f8c0 9000 	str.w	r9, [r0]
 80086a4:	4604      	mov	r4, r0
 80086a6:	e7e4      	b.n	8008672 <__pow5mult+0x6a>
 80086a8:	4638      	mov	r0, r7
 80086aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ae:	bf00      	nop
 80086b0:	0800aaf0 	.word	0x0800aaf0
 80086b4:	0800a91d 	.word	0x0800a91d
 80086b8:	0800a9a0 	.word	0x0800a9a0

080086bc <__lshift>:
 80086bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	6849      	ldr	r1, [r1, #4]
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80086ca:	68a3      	ldr	r3, [r4, #8]
 80086cc:	4607      	mov	r7, r0
 80086ce:	4691      	mov	r9, r2
 80086d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80086d4:	f108 0601 	add.w	r6, r8, #1
 80086d8:	42b3      	cmp	r3, r6
 80086da:	db0b      	blt.n	80086f4 <__lshift+0x38>
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff fddb 	bl	8008298 <_Balloc>
 80086e2:	4605      	mov	r5, r0
 80086e4:	b948      	cbnz	r0, 80086fa <__lshift+0x3e>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b2a      	ldr	r3, [pc, #168]	; (8008794 <__lshift+0xd8>)
 80086ea:	482b      	ldr	r0, [pc, #172]	; (8008798 <__lshift+0xdc>)
 80086ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80086f0:	f000 fbb8 	bl	8008e64 <__assert_func>
 80086f4:	3101      	adds	r1, #1
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	e7ee      	b.n	80086d8 <__lshift+0x1c>
 80086fa:	2300      	movs	r3, #0
 80086fc:	f100 0114 	add.w	r1, r0, #20
 8008700:	f100 0210 	add.w	r2, r0, #16
 8008704:	4618      	mov	r0, r3
 8008706:	4553      	cmp	r3, sl
 8008708:	db37      	blt.n	800877a <__lshift+0xbe>
 800870a:	6920      	ldr	r0, [r4, #16]
 800870c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008710:	f104 0314 	add.w	r3, r4, #20
 8008714:	f019 091f 	ands.w	r9, r9, #31
 8008718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800871c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008720:	d02f      	beq.n	8008782 <__lshift+0xc6>
 8008722:	f1c9 0e20 	rsb	lr, r9, #32
 8008726:	468a      	mov	sl, r1
 8008728:	f04f 0c00 	mov.w	ip, #0
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	fa02 f209 	lsl.w	r2, r2, r9
 8008732:	ea42 020c 	orr.w	r2, r2, ip
 8008736:	f84a 2b04 	str.w	r2, [sl], #4
 800873a:	f853 2b04 	ldr.w	r2, [r3], #4
 800873e:	4298      	cmp	r0, r3
 8008740:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008744:	d8f2      	bhi.n	800872c <__lshift+0x70>
 8008746:	1b03      	subs	r3, r0, r4
 8008748:	3b15      	subs	r3, #21
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	3304      	adds	r3, #4
 8008750:	f104 0215 	add.w	r2, r4, #21
 8008754:	4290      	cmp	r0, r2
 8008756:	bf38      	it	cc
 8008758:	2304      	movcc	r3, #4
 800875a:	f841 c003 	str.w	ip, [r1, r3]
 800875e:	f1bc 0f00 	cmp.w	ip, #0
 8008762:	d001      	beq.n	8008768 <__lshift+0xac>
 8008764:	f108 0602 	add.w	r6, r8, #2
 8008768:	3e01      	subs	r6, #1
 800876a:	4638      	mov	r0, r7
 800876c:	612e      	str	r6, [r5, #16]
 800876e:	4621      	mov	r1, r4
 8008770:	f7ff fdd2 	bl	8008318 <_Bfree>
 8008774:	4628      	mov	r0, r5
 8008776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800877a:	f842 0f04 	str.w	r0, [r2, #4]!
 800877e:	3301      	adds	r3, #1
 8008780:	e7c1      	b.n	8008706 <__lshift+0x4a>
 8008782:	3904      	subs	r1, #4
 8008784:	f853 2b04 	ldr.w	r2, [r3], #4
 8008788:	f841 2f04 	str.w	r2, [r1, #4]!
 800878c:	4298      	cmp	r0, r3
 800878e:	d8f9      	bhi.n	8008784 <__lshift+0xc8>
 8008790:	e7ea      	b.n	8008768 <__lshift+0xac>
 8008792:	bf00      	nop
 8008794:	0800a98f 	.word	0x0800a98f
 8008798:	0800a9a0 	.word	0x0800a9a0

0800879c <__mcmp>:
 800879c:	b530      	push	{r4, r5, lr}
 800879e:	6902      	ldr	r2, [r0, #16]
 80087a0:	690c      	ldr	r4, [r1, #16]
 80087a2:	1b12      	subs	r2, r2, r4
 80087a4:	d10e      	bne.n	80087c4 <__mcmp+0x28>
 80087a6:	f100 0314 	add.w	r3, r0, #20
 80087aa:	3114      	adds	r1, #20
 80087ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087bc:	42a5      	cmp	r5, r4
 80087be:	d003      	beq.n	80087c8 <__mcmp+0x2c>
 80087c0:	d305      	bcc.n	80087ce <__mcmp+0x32>
 80087c2:	2201      	movs	r2, #1
 80087c4:	4610      	mov	r0, r2
 80087c6:	bd30      	pop	{r4, r5, pc}
 80087c8:	4283      	cmp	r3, r0
 80087ca:	d3f3      	bcc.n	80087b4 <__mcmp+0x18>
 80087cc:	e7fa      	b.n	80087c4 <__mcmp+0x28>
 80087ce:	f04f 32ff 	mov.w	r2, #4294967295
 80087d2:	e7f7      	b.n	80087c4 <__mcmp+0x28>

080087d4 <__mdiff>:
 80087d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	460c      	mov	r4, r1
 80087da:	4606      	mov	r6, r0
 80087dc:	4611      	mov	r1, r2
 80087de:	4620      	mov	r0, r4
 80087e0:	4690      	mov	r8, r2
 80087e2:	f7ff ffdb 	bl	800879c <__mcmp>
 80087e6:	1e05      	subs	r5, r0, #0
 80087e8:	d110      	bne.n	800880c <__mdiff+0x38>
 80087ea:	4629      	mov	r1, r5
 80087ec:	4630      	mov	r0, r6
 80087ee:	f7ff fd53 	bl	8008298 <_Balloc>
 80087f2:	b930      	cbnz	r0, 8008802 <__mdiff+0x2e>
 80087f4:	4b3a      	ldr	r3, [pc, #232]	; (80088e0 <__mdiff+0x10c>)
 80087f6:	4602      	mov	r2, r0
 80087f8:	f240 2132 	movw	r1, #562	; 0x232
 80087fc:	4839      	ldr	r0, [pc, #228]	; (80088e4 <__mdiff+0x110>)
 80087fe:	f000 fb31 	bl	8008e64 <__assert_func>
 8008802:	2301      	movs	r3, #1
 8008804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	bfa4      	itt	ge
 800880e:	4643      	movge	r3, r8
 8008810:	46a0      	movge	r8, r4
 8008812:	4630      	mov	r0, r6
 8008814:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008818:	bfa6      	itte	ge
 800881a:	461c      	movge	r4, r3
 800881c:	2500      	movge	r5, #0
 800881e:	2501      	movlt	r5, #1
 8008820:	f7ff fd3a 	bl	8008298 <_Balloc>
 8008824:	b920      	cbnz	r0, 8008830 <__mdiff+0x5c>
 8008826:	4b2e      	ldr	r3, [pc, #184]	; (80088e0 <__mdiff+0x10c>)
 8008828:	4602      	mov	r2, r0
 800882a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800882e:	e7e5      	b.n	80087fc <__mdiff+0x28>
 8008830:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008834:	6926      	ldr	r6, [r4, #16]
 8008836:	60c5      	str	r5, [r0, #12]
 8008838:	f104 0914 	add.w	r9, r4, #20
 800883c:	f108 0514 	add.w	r5, r8, #20
 8008840:	f100 0e14 	add.w	lr, r0, #20
 8008844:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008848:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800884c:	f108 0210 	add.w	r2, r8, #16
 8008850:	46f2      	mov	sl, lr
 8008852:	2100      	movs	r1, #0
 8008854:	f859 3b04 	ldr.w	r3, [r9], #4
 8008858:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800885c:	fa1f f883 	uxth.w	r8, r3
 8008860:	fa11 f18b 	uxtah	r1, r1, fp
 8008864:	0c1b      	lsrs	r3, r3, #16
 8008866:	eba1 0808 	sub.w	r8, r1, r8
 800886a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800886e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008872:	fa1f f888 	uxth.w	r8, r8
 8008876:	1419      	asrs	r1, r3, #16
 8008878:	454e      	cmp	r6, r9
 800887a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800887e:	f84a 3b04 	str.w	r3, [sl], #4
 8008882:	d8e7      	bhi.n	8008854 <__mdiff+0x80>
 8008884:	1b33      	subs	r3, r6, r4
 8008886:	3b15      	subs	r3, #21
 8008888:	f023 0303 	bic.w	r3, r3, #3
 800888c:	3304      	adds	r3, #4
 800888e:	3415      	adds	r4, #21
 8008890:	42a6      	cmp	r6, r4
 8008892:	bf38      	it	cc
 8008894:	2304      	movcc	r3, #4
 8008896:	441d      	add	r5, r3
 8008898:	4473      	add	r3, lr
 800889a:	469e      	mov	lr, r3
 800889c:	462e      	mov	r6, r5
 800889e:	4566      	cmp	r6, ip
 80088a0:	d30e      	bcc.n	80088c0 <__mdiff+0xec>
 80088a2:	f10c 0203 	add.w	r2, ip, #3
 80088a6:	1b52      	subs	r2, r2, r5
 80088a8:	f022 0203 	bic.w	r2, r2, #3
 80088ac:	3d03      	subs	r5, #3
 80088ae:	45ac      	cmp	ip, r5
 80088b0:	bf38      	it	cc
 80088b2:	2200      	movcc	r2, #0
 80088b4:	441a      	add	r2, r3
 80088b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088ba:	b17b      	cbz	r3, 80088dc <__mdiff+0x108>
 80088bc:	6107      	str	r7, [r0, #16]
 80088be:	e7a3      	b.n	8008808 <__mdiff+0x34>
 80088c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80088c4:	fa11 f288 	uxtah	r2, r1, r8
 80088c8:	1414      	asrs	r4, r2, #16
 80088ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088ce:	b292      	uxth	r2, r2
 80088d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80088d4:	f84e 2b04 	str.w	r2, [lr], #4
 80088d8:	1421      	asrs	r1, r4, #16
 80088da:	e7e0      	b.n	800889e <__mdiff+0xca>
 80088dc:	3f01      	subs	r7, #1
 80088de:	e7ea      	b.n	80088b6 <__mdiff+0xe2>
 80088e0:	0800a98f 	.word	0x0800a98f
 80088e4:	0800a9a0 	.word	0x0800a9a0

080088e8 <__d2b>:
 80088e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088ec:	4689      	mov	r9, r1
 80088ee:	2101      	movs	r1, #1
 80088f0:	ec57 6b10 	vmov	r6, r7, d0
 80088f4:	4690      	mov	r8, r2
 80088f6:	f7ff fccf 	bl	8008298 <_Balloc>
 80088fa:	4604      	mov	r4, r0
 80088fc:	b930      	cbnz	r0, 800890c <__d2b+0x24>
 80088fe:	4602      	mov	r2, r0
 8008900:	4b25      	ldr	r3, [pc, #148]	; (8008998 <__d2b+0xb0>)
 8008902:	4826      	ldr	r0, [pc, #152]	; (800899c <__d2b+0xb4>)
 8008904:	f240 310a 	movw	r1, #778	; 0x30a
 8008908:	f000 faac 	bl	8008e64 <__assert_func>
 800890c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008910:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008914:	bb35      	cbnz	r5, 8008964 <__d2b+0x7c>
 8008916:	2e00      	cmp	r6, #0
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	d028      	beq.n	800896e <__d2b+0x86>
 800891c:	4668      	mov	r0, sp
 800891e:	9600      	str	r6, [sp, #0]
 8008920:	f7ff fd82 	bl	8008428 <__lo0bits>
 8008924:	9900      	ldr	r1, [sp, #0]
 8008926:	b300      	cbz	r0, 800896a <__d2b+0x82>
 8008928:	9a01      	ldr	r2, [sp, #4]
 800892a:	f1c0 0320 	rsb	r3, r0, #32
 800892e:	fa02 f303 	lsl.w	r3, r2, r3
 8008932:	430b      	orrs	r3, r1
 8008934:	40c2      	lsrs	r2, r0
 8008936:	6163      	str	r3, [r4, #20]
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	9b01      	ldr	r3, [sp, #4]
 800893c:	61a3      	str	r3, [r4, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	bf14      	ite	ne
 8008942:	2202      	movne	r2, #2
 8008944:	2201      	moveq	r2, #1
 8008946:	6122      	str	r2, [r4, #16]
 8008948:	b1d5      	cbz	r5, 8008980 <__d2b+0x98>
 800894a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800894e:	4405      	add	r5, r0
 8008950:	f8c9 5000 	str.w	r5, [r9]
 8008954:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008958:	f8c8 0000 	str.w	r0, [r8]
 800895c:	4620      	mov	r0, r4
 800895e:	b003      	add	sp, #12
 8008960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008968:	e7d5      	b.n	8008916 <__d2b+0x2e>
 800896a:	6161      	str	r1, [r4, #20]
 800896c:	e7e5      	b.n	800893a <__d2b+0x52>
 800896e:	a801      	add	r0, sp, #4
 8008970:	f7ff fd5a 	bl	8008428 <__lo0bits>
 8008974:	9b01      	ldr	r3, [sp, #4]
 8008976:	6163      	str	r3, [r4, #20]
 8008978:	2201      	movs	r2, #1
 800897a:	6122      	str	r2, [r4, #16]
 800897c:	3020      	adds	r0, #32
 800897e:	e7e3      	b.n	8008948 <__d2b+0x60>
 8008980:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008984:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008988:	f8c9 0000 	str.w	r0, [r9]
 800898c:	6918      	ldr	r0, [r3, #16]
 800898e:	f7ff fd2b 	bl	80083e8 <__hi0bits>
 8008992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008996:	e7df      	b.n	8008958 <__d2b+0x70>
 8008998:	0800a98f 	.word	0x0800a98f
 800899c:	0800a9a0 	.word	0x0800a9a0

080089a0 <_calloc_r>:
 80089a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089a2:	fba1 2402 	umull	r2, r4, r1, r2
 80089a6:	b94c      	cbnz	r4, 80089bc <_calloc_r+0x1c>
 80089a8:	4611      	mov	r1, r2
 80089aa:	9201      	str	r2, [sp, #4]
 80089ac:	f000 f87a 	bl	8008aa4 <_malloc_r>
 80089b0:	9a01      	ldr	r2, [sp, #4]
 80089b2:	4605      	mov	r5, r0
 80089b4:	b930      	cbnz	r0, 80089c4 <_calloc_r+0x24>
 80089b6:	4628      	mov	r0, r5
 80089b8:	b003      	add	sp, #12
 80089ba:	bd30      	pop	{r4, r5, pc}
 80089bc:	220c      	movs	r2, #12
 80089be:	6002      	str	r2, [r0, #0]
 80089c0:	2500      	movs	r5, #0
 80089c2:	e7f8      	b.n	80089b6 <_calloc_r+0x16>
 80089c4:	4621      	mov	r1, r4
 80089c6:	f7fe f941 	bl	8006c4c <memset>
 80089ca:	e7f4      	b.n	80089b6 <_calloc_r+0x16>

080089cc <_free_r>:
 80089cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089ce:	2900      	cmp	r1, #0
 80089d0:	d044      	beq.n	8008a5c <_free_r+0x90>
 80089d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d6:	9001      	str	r0, [sp, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f1a1 0404 	sub.w	r4, r1, #4
 80089de:	bfb8      	it	lt
 80089e0:	18e4      	addlt	r4, r4, r3
 80089e2:	f000 fa9b 	bl	8008f1c <__malloc_lock>
 80089e6:	4a1e      	ldr	r2, [pc, #120]	; (8008a60 <_free_r+0x94>)
 80089e8:	9801      	ldr	r0, [sp, #4]
 80089ea:	6813      	ldr	r3, [r2, #0]
 80089ec:	b933      	cbnz	r3, 80089fc <_free_r+0x30>
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	6014      	str	r4, [r2, #0]
 80089f2:	b003      	add	sp, #12
 80089f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089f8:	f000 ba96 	b.w	8008f28 <__malloc_unlock>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d908      	bls.n	8008a12 <_free_r+0x46>
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	1961      	adds	r1, r4, r5
 8008a04:	428b      	cmp	r3, r1
 8008a06:	bf01      	itttt	eq
 8008a08:	6819      	ldreq	r1, [r3, #0]
 8008a0a:	685b      	ldreq	r3, [r3, #4]
 8008a0c:	1949      	addeq	r1, r1, r5
 8008a0e:	6021      	streq	r1, [r4, #0]
 8008a10:	e7ed      	b.n	80089ee <_free_r+0x22>
 8008a12:	461a      	mov	r2, r3
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	b10b      	cbz	r3, 8008a1c <_free_r+0x50>
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	d9fa      	bls.n	8008a12 <_free_r+0x46>
 8008a1c:	6811      	ldr	r1, [r2, #0]
 8008a1e:	1855      	adds	r5, r2, r1
 8008a20:	42a5      	cmp	r5, r4
 8008a22:	d10b      	bne.n	8008a3c <_free_r+0x70>
 8008a24:	6824      	ldr	r4, [r4, #0]
 8008a26:	4421      	add	r1, r4
 8008a28:	1854      	adds	r4, r2, r1
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	6011      	str	r1, [r2, #0]
 8008a2e:	d1e0      	bne.n	80089f2 <_free_r+0x26>
 8008a30:	681c      	ldr	r4, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	6053      	str	r3, [r2, #4]
 8008a36:	4421      	add	r1, r4
 8008a38:	6011      	str	r1, [r2, #0]
 8008a3a:	e7da      	b.n	80089f2 <_free_r+0x26>
 8008a3c:	d902      	bls.n	8008a44 <_free_r+0x78>
 8008a3e:	230c      	movs	r3, #12
 8008a40:	6003      	str	r3, [r0, #0]
 8008a42:	e7d6      	b.n	80089f2 <_free_r+0x26>
 8008a44:	6825      	ldr	r5, [r4, #0]
 8008a46:	1961      	adds	r1, r4, r5
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	bf04      	itt	eq
 8008a4c:	6819      	ldreq	r1, [r3, #0]
 8008a4e:	685b      	ldreq	r3, [r3, #4]
 8008a50:	6063      	str	r3, [r4, #4]
 8008a52:	bf04      	itt	eq
 8008a54:	1949      	addeq	r1, r1, r5
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	6054      	str	r4, [r2, #4]
 8008a5a:	e7ca      	b.n	80089f2 <_free_r+0x26>
 8008a5c:	b003      	add	sp, #12
 8008a5e:	bd30      	pop	{r4, r5, pc}
 8008a60:	2000056c 	.word	0x2000056c

08008a64 <sbrk_aligned>:
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	4e0e      	ldr	r6, [pc, #56]	; (8008aa0 <sbrk_aligned+0x3c>)
 8008a68:	460c      	mov	r4, r1
 8008a6a:	6831      	ldr	r1, [r6, #0]
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	b911      	cbnz	r1, 8008a76 <sbrk_aligned+0x12>
 8008a70:	f000 f9e8 	bl	8008e44 <_sbrk_r>
 8008a74:	6030      	str	r0, [r6, #0]
 8008a76:	4621      	mov	r1, r4
 8008a78:	4628      	mov	r0, r5
 8008a7a:	f000 f9e3 	bl	8008e44 <_sbrk_r>
 8008a7e:	1c43      	adds	r3, r0, #1
 8008a80:	d00a      	beq.n	8008a98 <sbrk_aligned+0x34>
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d007      	beq.n	8008a9c <sbrk_aligned+0x38>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f000 f9d8 	bl	8008e44 <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d101      	bne.n	8008a9c <sbrk_aligned+0x38>
 8008a98:	f04f 34ff 	mov.w	r4, #4294967295
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	20000570 	.word	0x20000570

08008aa4 <_malloc_r>:
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	1ccd      	adds	r5, r1, #3
 8008aaa:	f025 0503 	bic.w	r5, r5, #3
 8008aae:	3508      	adds	r5, #8
 8008ab0:	2d0c      	cmp	r5, #12
 8008ab2:	bf38      	it	cc
 8008ab4:	250c      	movcc	r5, #12
 8008ab6:	2d00      	cmp	r5, #0
 8008ab8:	4607      	mov	r7, r0
 8008aba:	db01      	blt.n	8008ac0 <_malloc_r+0x1c>
 8008abc:	42a9      	cmp	r1, r5
 8008abe:	d905      	bls.n	8008acc <_malloc_r+0x28>
 8008ac0:	230c      	movs	r3, #12
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	2600      	movs	r6, #0
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	4e2e      	ldr	r6, [pc, #184]	; (8008b88 <_malloc_r+0xe4>)
 8008ace:	f000 fa25 	bl	8008f1c <__malloc_lock>
 8008ad2:	6833      	ldr	r3, [r6, #0]
 8008ad4:	461c      	mov	r4, r3
 8008ad6:	bb34      	cbnz	r4, 8008b26 <_malloc_r+0x82>
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7ff ffc2 	bl	8008a64 <sbrk_aligned>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	d14d      	bne.n	8008b82 <_malloc_r+0xde>
 8008ae6:	6834      	ldr	r4, [r6, #0]
 8008ae8:	4626      	mov	r6, r4
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	d140      	bne.n	8008b70 <_malloc_r+0xcc>
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	4631      	mov	r1, r6
 8008af2:	4638      	mov	r0, r7
 8008af4:	eb04 0803 	add.w	r8, r4, r3
 8008af8:	f000 f9a4 	bl	8008e44 <_sbrk_r>
 8008afc:	4580      	cmp	r8, r0
 8008afe:	d13a      	bne.n	8008b76 <_malloc_r+0xd2>
 8008b00:	6821      	ldr	r1, [r4, #0]
 8008b02:	3503      	adds	r5, #3
 8008b04:	1a6d      	subs	r5, r5, r1
 8008b06:	f025 0503 	bic.w	r5, r5, #3
 8008b0a:	3508      	adds	r5, #8
 8008b0c:	2d0c      	cmp	r5, #12
 8008b0e:	bf38      	it	cc
 8008b10:	250c      	movcc	r5, #12
 8008b12:	4629      	mov	r1, r5
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7ff ffa5 	bl	8008a64 <sbrk_aligned>
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d02b      	beq.n	8008b76 <_malloc_r+0xd2>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	442b      	add	r3, r5
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	e00e      	b.n	8008b44 <_malloc_r+0xa0>
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	1b52      	subs	r2, r2, r5
 8008b2a:	d41e      	bmi.n	8008b6a <_malloc_r+0xc6>
 8008b2c:	2a0b      	cmp	r2, #11
 8008b2e:	d916      	bls.n	8008b5e <_malloc_r+0xba>
 8008b30:	1961      	adds	r1, r4, r5
 8008b32:	42a3      	cmp	r3, r4
 8008b34:	6025      	str	r5, [r4, #0]
 8008b36:	bf18      	it	ne
 8008b38:	6059      	strne	r1, [r3, #4]
 8008b3a:	6863      	ldr	r3, [r4, #4]
 8008b3c:	bf08      	it	eq
 8008b3e:	6031      	streq	r1, [r6, #0]
 8008b40:	5162      	str	r2, [r4, r5]
 8008b42:	604b      	str	r3, [r1, #4]
 8008b44:	4638      	mov	r0, r7
 8008b46:	f104 060b 	add.w	r6, r4, #11
 8008b4a:	f000 f9ed 	bl	8008f28 <__malloc_unlock>
 8008b4e:	f026 0607 	bic.w	r6, r6, #7
 8008b52:	1d23      	adds	r3, r4, #4
 8008b54:	1af2      	subs	r2, r6, r3
 8008b56:	d0b6      	beq.n	8008ac6 <_malloc_r+0x22>
 8008b58:	1b9b      	subs	r3, r3, r6
 8008b5a:	50a3      	str	r3, [r4, r2]
 8008b5c:	e7b3      	b.n	8008ac6 <_malloc_r+0x22>
 8008b5e:	6862      	ldr	r2, [r4, #4]
 8008b60:	42a3      	cmp	r3, r4
 8008b62:	bf0c      	ite	eq
 8008b64:	6032      	streq	r2, [r6, #0]
 8008b66:	605a      	strne	r2, [r3, #4]
 8008b68:	e7ec      	b.n	8008b44 <_malloc_r+0xa0>
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	6864      	ldr	r4, [r4, #4]
 8008b6e:	e7b2      	b.n	8008ad6 <_malloc_r+0x32>
 8008b70:	4634      	mov	r4, r6
 8008b72:	6876      	ldr	r6, [r6, #4]
 8008b74:	e7b9      	b.n	8008aea <_malloc_r+0x46>
 8008b76:	230c      	movs	r3, #12
 8008b78:	603b      	str	r3, [r7, #0]
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	f000 f9d4 	bl	8008f28 <__malloc_unlock>
 8008b80:	e7a1      	b.n	8008ac6 <_malloc_r+0x22>
 8008b82:	6025      	str	r5, [r4, #0]
 8008b84:	e7de      	b.n	8008b44 <_malloc_r+0xa0>
 8008b86:	bf00      	nop
 8008b88:	2000056c 	.word	0x2000056c

08008b8c <__ssputs_r>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	688e      	ldr	r6, [r1, #8]
 8008b92:	429e      	cmp	r6, r3
 8008b94:	4682      	mov	sl, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	4690      	mov	r8, r2
 8008b9a:	461f      	mov	r7, r3
 8008b9c:	d838      	bhi.n	8008c10 <__ssputs_r+0x84>
 8008b9e:	898a      	ldrh	r2, [r1, #12]
 8008ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ba4:	d032      	beq.n	8008c0c <__ssputs_r+0x80>
 8008ba6:	6825      	ldr	r5, [r4, #0]
 8008ba8:	6909      	ldr	r1, [r1, #16]
 8008baa:	eba5 0901 	sub.w	r9, r5, r1
 8008bae:	6965      	ldr	r5, [r4, #20]
 8008bb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bb8:	3301      	adds	r3, #1
 8008bba:	444b      	add	r3, r9
 8008bbc:	106d      	asrs	r5, r5, #1
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	bf38      	it	cc
 8008bc2:	461d      	movcc	r5, r3
 8008bc4:	0553      	lsls	r3, r2, #21
 8008bc6:	d531      	bpl.n	8008c2c <__ssputs_r+0xa0>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7ff ff6b 	bl	8008aa4 <_malloc_r>
 8008bce:	4606      	mov	r6, r0
 8008bd0:	b950      	cbnz	r0, 8008be8 <__ssputs_r+0x5c>
 8008bd2:	230c      	movs	r3, #12
 8008bd4:	f8ca 3000 	str.w	r3, [sl]
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be8:	6921      	ldr	r1, [r4, #16]
 8008bea:	464a      	mov	r2, r9
 8008bec:	f7ff fb46 	bl	800827c <memcpy>
 8008bf0:	89a3      	ldrh	r3, [r4, #12]
 8008bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bfa:	81a3      	strh	r3, [r4, #12]
 8008bfc:	6126      	str	r6, [r4, #16]
 8008bfe:	6165      	str	r5, [r4, #20]
 8008c00:	444e      	add	r6, r9
 8008c02:	eba5 0509 	sub.w	r5, r5, r9
 8008c06:	6026      	str	r6, [r4, #0]
 8008c08:	60a5      	str	r5, [r4, #8]
 8008c0a:	463e      	mov	r6, r7
 8008c0c:	42be      	cmp	r6, r7
 8008c0e:	d900      	bls.n	8008c12 <__ssputs_r+0x86>
 8008c10:	463e      	mov	r6, r7
 8008c12:	6820      	ldr	r0, [r4, #0]
 8008c14:	4632      	mov	r2, r6
 8008c16:	4641      	mov	r1, r8
 8008c18:	f000 f966 	bl	8008ee8 <memmove>
 8008c1c:	68a3      	ldr	r3, [r4, #8]
 8008c1e:	1b9b      	subs	r3, r3, r6
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	4433      	add	r3, r6
 8008c26:	6023      	str	r3, [r4, #0]
 8008c28:	2000      	movs	r0, #0
 8008c2a:	e7db      	b.n	8008be4 <__ssputs_r+0x58>
 8008c2c:	462a      	mov	r2, r5
 8008c2e:	f000 f981 	bl	8008f34 <_realloc_r>
 8008c32:	4606      	mov	r6, r0
 8008c34:	2800      	cmp	r0, #0
 8008c36:	d1e1      	bne.n	8008bfc <__ssputs_r+0x70>
 8008c38:	6921      	ldr	r1, [r4, #16]
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	f7ff fec6 	bl	80089cc <_free_r>
 8008c40:	e7c7      	b.n	8008bd2 <__ssputs_r+0x46>
	...

08008c44 <_svfiprintf_r>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	4698      	mov	r8, r3
 8008c4a:	898b      	ldrh	r3, [r1, #12]
 8008c4c:	061b      	lsls	r3, r3, #24
 8008c4e:	b09d      	sub	sp, #116	; 0x74
 8008c50:	4607      	mov	r7, r0
 8008c52:	460d      	mov	r5, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	d50e      	bpl.n	8008c76 <_svfiprintf_r+0x32>
 8008c58:	690b      	ldr	r3, [r1, #16]
 8008c5a:	b963      	cbnz	r3, 8008c76 <_svfiprintf_r+0x32>
 8008c5c:	2140      	movs	r1, #64	; 0x40
 8008c5e:	f7ff ff21 	bl	8008aa4 <_malloc_r>
 8008c62:	6028      	str	r0, [r5, #0]
 8008c64:	6128      	str	r0, [r5, #16]
 8008c66:	b920      	cbnz	r0, 8008c72 <_svfiprintf_r+0x2e>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	e0d1      	b.n	8008e16 <_svfiprintf_r+0x1d2>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	616b      	str	r3, [r5, #20]
 8008c76:	2300      	movs	r3, #0
 8008c78:	9309      	str	r3, [sp, #36]	; 0x24
 8008c7a:	2320      	movs	r3, #32
 8008c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c84:	2330      	movs	r3, #48	; 0x30
 8008c86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e30 <_svfiprintf_r+0x1ec>
 8008c8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c8e:	f04f 0901 	mov.w	r9, #1
 8008c92:	4623      	mov	r3, r4
 8008c94:	469a      	mov	sl, r3
 8008c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9a:	b10a      	cbz	r2, 8008ca0 <_svfiprintf_r+0x5c>
 8008c9c:	2a25      	cmp	r2, #37	; 0x25
 8008c9e:	d1f9      	bne.n	8008c94 <_svfiprintf_r+0x50>
 8008ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca4:	d00b      	beq.n	8008cbe <_svfiprintf_r+0x7a>
 8008ca6:	465b      	mov	r3, fp
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ff6d 	bl	8008b8c <__ssputs_r>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f000 80aa 	beq.w	8008e0c <_svfiprintf_r+0x1c8>
 8008cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cba:	445a      	add	r2, fp
 8008cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 80a2 	beq.w	8008e0c <_svfiprintf_r+0x1c8>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f04f 32ff 	mov.w	r2, #4294967295
 8008cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd2:	f10a 0a01 	add.w	sl, sl, #1
 8008cd6:	9304      	str	r3, [sp, #16]
 8008cd8:	9307      	str	r3, [sp, #28]
 8008cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cde:	931a      	str	r3, [sp, #104]	; 0x68
 8008ce0:	4654      	mov	r4, sl
 8008ce2:	2205      	movs	r2, #5
 8008ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce8:	4851      	ldr	r0, [pc, #324]	; (8008e30 <_svfiprintf_r+0x1ec>)
 8008cea:	f7f7 fa99 	bl	8000220 <memchr>
 8008cee:	9a04      	ldr	r2, [sp, #16]
 8008cf0:	b9d8      	cbnz	r0, 8008d2a <_svfiprintf_r+0xe6>
 8008cf2:	06d0      	lsls	r0, r2, #27
 8008cf4:	bf44      	itt	mi
 8008cf6:	2320      	movmi	r3, #32
 8008cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cfc:	0711      	lsls	r1, r2, #28
 8008cfe:	bf44      	itt	mi
 8008d00:	232b      	movmi	r3, #43	; 0x2b
 8008d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d06:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0c:	d015      	beq.n	8008d3a <_svfiprintf_r+0xf6>
 8008d0e:	9a07      	ldr	r2, [sp, #28]
 8008d10:	4654      	mov	r4, sl
 8008d12:	2000      	movs	r0, #0
 8008d14:	f04f 0c0a 	mov.w	ip, #10
 8008d18:	4621      	mov	r1, r4
 8008d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d1e:	3b30      	subs	r3, #48	; 0x30
 8008d20:	2b09      	cmp	r3, #9
 8008d22:	d94e      	bls.n	8008dc2 <_svfiprintf_r+0x17e>
 8008d24:	b1b0      	cbz	r0, 8008d54 <_svfiprintf_r+0x110>
 8008d26:	9207      	str	r2, [sp, #28]
 8008d28:	e014      	b.n	8008d54 <_svfiprintf_r+0x110>
 8008d2a:	eba0 0308 	sub.w	r3, r0, r8
 8008d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d32:	4313      	orrs	r3, r2
 8008d34:	9304      	str	r3, [sp, #16]
 8008d36:	46a2      	mov	sl, r4
 8008d38:	e7d2      	b.n	8008ce0 <_svfiprintf_r+0x9c>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	1d19      	adds	r1, r3, #4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	9103      	str	r1, [sp, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	bfbb      	ittet	lt
 8008d46:	425b      	neglt	r3, r3
 8008d48:	f042 0202 	orrlt.w	r2, r2, #2
 8008d4c:	9307      	strge	r3, [sp, #28]
 8008d4e:	9307      	strlt	r3, [sp, #28]
 8008d50:	bfb8      	it	lt
 8008d52:	9204      	strlt	r2, [sp, #16]
 8008d54:	7823      	ldrb	r3, [r4, #0]
 8008d56:	2b2e      	cmp	r3, #46	; 0x2e
 8008d58:	d10c      	bne.n	8008d74 <_svfiprintf_r+0x130>
 8008d5a:	7863      	ldrb	r3, [r4, #1]
 8008d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5e:	d135      	bne.n	8008dcc <_svfiprintf_r+0x188>
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	1d1a      	adds	r2, r3, #4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	9203      	str	r2, [sp, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	bfb8      	it	lt
 8008d6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d70:	3402      	adds	r4, #2
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e40 <_svfiprintf_r+0x1fc>
 8008d78:	7821      	ldrb	r1, [r4, #0]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	f7f7 fa4f 	bl	8000220 <memchr>
 8008d82:	b140      	cbz	r0, 8008d96 <_svfiprintf_r+0x152>
 8008d84:	2340      	movs	r3, #64	; 0x40
 8008d86:	eba0 000a 	sub.w	r0, r0, sl
 8008d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	4303      	orrs	r3, r0
 8008d92:	3401      	adds	r4, #1
 8008d94:	9304      	str	r3, [sp, #16]
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4826      	ldr	r0, [pc, #152]	; (8008e34 <_svfiprintf_r+0x1f0>)
 8008d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008da0:	2206      	movs	r2, #6
 8008da2:	f7f7 fa3d 	bl	8000220 <memchr>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d038      	beq.n	8008e1c <_svfiprintf_r+0x1d8>
 8008daa:	4b23      	ldr	r3, [pc, #140]	; (8008e38 <_svfiprintf_r+0x1f4>)
 8008dac:	bb1b      	cbnz	r3, 8008df6 <_svfiprintf_r+0x1b2>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	3307      	adds	r3, #7
 8008db2:	f023 0307 	bic.w	r3, r3, #7
 8008db6:	3308      	adds	r3, #8
 8008db8:	9303      	str	r3, [sp, #12]
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	4433      	add	r3, r6
 8008dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc0:	e767      	b.n	8008c92 <_svfiprintf_r+0x4e>
 8008dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	2001      	movs	r0, #1
 8008dca:	e7a5      	b.n	8008d18 <_svfiprintf_r+0xd4>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	f04f 0c0a 	mov.w	ip, #10
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dde:	3a30      	subs	r2, #48	; 0x30
 8008de0:	2a09      	cmp	r2, #9
 8008de2:	d903      	bls.n	8008dec <_svfiprintf_r+0x1a8>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0c5      	beq.n	8008d74 <_svfiprintf_r+0x130>
 8008de8:	9105      	str	r1, [sp, #20]
 8008dea:	e7c3      	b.n	8008d74 <_svfiprintf_r+0x130>
 8008dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008df0:	4604      	mov	r4, r0
 8008df2:	2301      	movs	r3, #1
 8008df4:	e7f0      	b.n	8008dd8 <_svfiprintf_r+0x194>
 8008df6:	ab03      	add	r3, sp, #12
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <_svfiprintf_r+0x1f8>)
 8008dfe:	a904      	add	r1, sp, #16
 8008e00:	4638      	mov	r0, r7
 8008e02:	f7fd ffcb 	bl	8006d9c <_printf_float>
 8008e06:	1c42      	adds	r2, r0, #1
 8008e08:	4606      	mov	r6, r0
 8008e0a:	d1d6      	bne.n	8008dba <_svfiprintf_r+0x176>
 8008e0c:	89ab      	ldrh	r3, [r5, #12]
 8008e0e:	065b      	lsls	r3, r3, #25
 8008e10:	f53f af2c 	bmi.w	8008c6c <_svfiprintf_r+0x28>
 8008e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e16:	b01d      	add	sp, #116	; 0x74
 8008e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e1c:	ab03      	add	r3, sp, #12
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	462a      	mov	r2, r5
 8008e22:	4b06      	ldr	r3, [pc, #24]	; (8008e3c <_svfiprintf_r+0x1f8>)
 8008e24:	a904      	add	r1, sp, #16
 8008e26:	4638      	mov	r0, r7
 8008e28:	f7fe fa5c 	bl	80072e4 <_printf_i>
 8008e2c:	e7eb      	b.n	8008e06 <_svfiprintf_r+0x1c2>
 8008e2e:	bf00      	nop
 8008e30:	0800aafc 	.word	0x0800aafc
 8008e34:	0800ab06 	.word	0x0800ab06
 8008e38:	08006d9d 	.word	0x08006d9d
 8008e3c:	08008b8d 	.word	0x08008b8d
 8008e40:	0800ab02 	.word	0x0800ab02

08008e44 <_sbrk_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	; (8008e60 <_sbrk_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f9 fbd6 	bl	8002600 <_sbrk>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_sbrk_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_sbrk_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000574 	.word	0x20000574

08008e64 <__assert_func>:
 8008e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e66:	4614      	mov	r4, r2
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <__assert_func+0x2c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4605      	mov	r5, r0
 8008e70:	68d8      	ldr	r0, [r3, #12]
 8008e72:	b14c      	cbz	r4, 8008e88 <__assert_func+0x24>
 8008e74:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <__assert_func+0x30>)
 8008e76:	9100      	str	r1, [sp, #0]
 8008e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e7c:	4906      	ldr	r1, [pc, #24]	; (8008e98 <__assert_func+0x34>)
 8008e7e:	462b      	mov	r3, r5
 8008e80:	f000 f80e 	bl	8008ea0 <fiprintf>
 8008e84:	f000 faac 	bl	80093e0 <abort>
 8008e88:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <__assert_func+0x38>)
 8008e8a:	461c      	mov	r4, r3
 8008e8c:	e7f3      	b.n	8008e76 <__assert_func+0x12>
 8008e8e:	bf00      	nop
 8008e90:	2000000c 	.word	0x2000000c
 8008e94:	0800ab0d 	.word	0x0800ab0d
 8008e98:	0800ab1a 	.word	0x0800ab1a
 8008e9c:	0800ab48 	.word	0x0800ab48

08008ea0 <fiprintf>:
 8008ea0:	b40e      	push	{r1, r2, r3}
 8008ea2:	b503      	push	{r0, r1, lr}
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <fiprintf+0x20>)
 8008eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eae:	6800      	ldr	r0, [r0, #0]
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	f000 f897 	bl	8008fe4 <_vfiprintf_r>
 8008eb6:	b002      	add	sp, #8
 8008eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ebc:	b003      	add	sp, #12
 8008ebe:	4770      	bx	lr
 8008ec0:	2000000c 	.word	0x2000000c

08008ec4 <__ascii_mbtowc>:
 8008ec4:	b082      	sub	sp, #8
 8008ec6:	b901      	cbnz	r1, 8008eca <__ascii_mbtowc+0x6>
 8008ec8:	a901      	add	r1, sp, #4
 8008eca:	b142      	cbz	r2, 8008ede <__ascii_mbtowc+0x1a>
 8008ecc:	b14b      	cbz	r3, 8008ee2 <__ascii_mbtowc+0x1e>
 8008ece:	7813      	ldrb	r3, [r2, #0]
 8008ed0:	600b      	str	r3, [r1, #0]
 8008ed2:	7812      	ldrb	r2, [r2, #0]
 8008ed4:	1e10      	subs	r0, r2, #0
 8008ed6:	bf18      	it	ne
 8008ed8:	2001      	movne	r0, #1
 8008eda:	b002      	add	sp, #8
 8008edc:	4770      	bx	lr
 8008ede:	4610      	mov	r0, r2
 8008ee0:	e7fb      	b.n	8008eda <__ascii_mbtowc+0x16>
 8008ee2:	f06f 0001 	mvn.w	r0, #1
 8008ee6:	e7f8      	b.n	8008eda <__ascii_mbtowc+0x16>

08008ee8 <memmove>:
 8008ee8:	4288      	cmp	r0, r1
 8008eea:	b510      	push	{r4, lr}
 8008eec:	eb01 0402 	add.w	r4, r1, r2
 8008ef0:	d902      	bls.n	8008ef8 <memmove+0x10>
 8008ef2:	4284      	cmp	r4, r0
 8008ef4:	4623      	mov	r3, r4
 8008ef6:	d807      	bhi.n	8008f08 <memmove+0x20>
 8008ef8:	1e43      	subs	r3, r0, #1
 8008efa:	42a1      	cmp	r1, r4
 8008efc:	d008      	beq.n	8008f10 <memmove+0x28>
 8008efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f06:	e7f8      	b.n	8008efa <memmove+0x12>
 8008f08:	4402      	add	r2, r0
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	428a      	cmp	r2, r1
 8008f0e:	d100      	bne.n	8008f12 <memmove+0x2a>
 8008f10:	bd10      	pop	{r4, pc}
 8008f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f1a:	e7f7      	b.n	8008f0c <memmove+0x24>

08008f1c <__malloc_lock>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	; (8008f24 <__malloc_lock+0x8>)
 8008f1e:	f000 bc1f 	b.w	8009760 <__retarget_lock_acquire_recursive>
 8008f22:	bf00      	nop
 8008f24:	20000578 	.word	0x20000578

08008f28 <__malloc_unlock>:
 8008f28:	4801      	ldr	r0, [pc, #4]	; (8008f30 <__malloc_unlock+0x8>)
 8008f2a:	f000 bc1a 	b.w	8009762 <__retarget_lock_release_recursive>
 8008f2e:	bf00      	nop
 8008f30:	20000578 	.word	0x20000578

08008f34 <_realloc_r>:
 8008f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f38:	4680      	mov	r8, r0
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	460e      	mov	r6, r1
 8008f3e:	b921      	cbnz	r1, 8008f4a <_realloc_r+0x16>
 8008f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	4611      	mov	r1, r2
 8008f46:	f7ff bdad 	b.w	8008aa4 <_malloc_r>
 8008f4a:	b92a      	cbnz	r2, 8008f58 <_realloc_r+0x24>
 8008f4c:	f7ff fd3e 	bl	80089cc <_free_r>
 8008f50:	4625      	mov	r5, r4
 8008f52:	4628      	mov	r0, r5
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	f000 fc6a 	bl	8009830 <_malloc_usable_size_r>
 8008f5c:	4284      	cmp	r4, r0
 8008f5e:	4607      	mov	r7, r0
 8008f60:	d802      	bhi.n	8008f68 <_realloc_r+0x34>
 8008f62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f66:	d812      	bhi.n	8008f8e <_realloc_r+0x5a>
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	f7ff fd9a 	bl	8008aa4 <_malloc_r>
 8008f70:	4605      	mov	r5, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d0ed      	beq.n	8008f52 <_realloc_r+0x1e>
 8008f76:	42bc      	cmp	r4, r7
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	bf28      	it	cs
 8008f7e:	463a      	movcs	r2, r7
 8008f80:	f7ff f97c 	bl	800827c <memcpy>
 8008f84:	4631      	mov	r1, r6
 8008f86:	4640      	mov	r0, r8
 8008f88:	f7ff fd20 	bl	80089cc <_free_r>
 8008f8c:	e7e1      	b.n	8008f52 <_realloc_r+0x1e>
 8008f8e:	4635      	mov	r5, r6
 8008f90:	e7df      	b.n	8008f52 <_realloc_r+0x1e>

08008f92 <__sfputc_r>:
 8008f92:	6893      	ldr	r3, [r2, #8]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	b410      	push	{r4}
 8008f9a:	6093      	str	r3, [r2, #8]
 8008f9c:	da08      	bge.n	8008fb0 <__sfputc_r+0x1e>
 8008f9e:	6994      	ldr	r4, [r2, #24]
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	db01      	blt.n	8008fa8 <__sfputc_r+0x16>
 8008fa4:	290a      	cmp	r1, #10
 8008fa6:	d103      	bne.n	8008fb0 <__sfputc_r+0x1e>
 8008fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fac:	f000 b94a 	b.w	8009244 <__swbuf_r>
 8008fb0:	6813      	ldr	r3, [r2, #0]
 8008fb2:	1c58      	adds	r0, r3, #1
 8008fb4:	6010      	str	r0, [r2, #0]
 8008fb6:	7019      	strb	r1, [r3, #0]
 8008fb8:	4608      	mov	r0, r1
 8008fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <__sfputs_r>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	460f      	mov	r7, r1
 8008fc6:	4614      	mov	r4, r2
 8008fc8:	18d5      	adds	r5, r2, r3
 8008fca:	42ac      	cmp	r4, r5
 8008fcc:	d101      	bne.n	8008fd2 <__sfputs_r+0x12>
 8008fce:	2000      	movs	r0, #0
 8008fd0:	e007      	b.n	8008fe2 <__sfputs_r+0x22>
 8008fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	4630      	mov	r0, r6
 8008fda:	f7ff ffda 	bl	8008f92 <__sfputc_r>
 8008fde:	1c43      	adds	r3, r0, #1
 8008fe0:	d1f3      	bne.n	8008fca <__sfputs_r+0xa>
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fe4 <_vfiprintf_r>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	460d      	mov	r5, r1
 8008fea:	b09d      	sub	sp, #116	; 0x74
 8008fec:	4614      	mov	r4, r2
 8008fee:	4698      	mov	r8, r3
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	b118      	cbz	r0, 8008ffc <_vfiprintf_r+0x18>
 8008ff4:	6983      	ldr	r3, [r0, #24]
 8008ff6:	b90b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x18>
 8008ff8:	f000 fb14 	bl	8009624 <__sinit>
 8008ffc:	4b89      	ldr	r3, [pc, #548]	; (8009224 <_vfiprintf_r+0x240>)
 8008ffe:	429d      	cmp	r5, r3
 8009000:	d11b      	bne.n	800903a <_vfiprintf_r+0x56>
 8009002:	6875      	ldr	r5, [r6, #4]
 8009004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009006:	07d9      	lsls	r1, r3, #31
 8009008:	d405      	bmi.n	8009016 <_vfiprintf_r+0x32>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	059a      	lsls	r2, r3, #22
 800900e:	d402      	bmi.n	8009016 <_vfiprintf_r+0x32>
 8009010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009012:	f000 fba5 	bl	8009760 <__retarget_lock_acquire_recursive>
 8009016:	89ab      	ldrh	r3, [r5, #12]
 8009018:	071b      	lsls	r3, r3, #28
 800901a:	d501      	bpl.n	8009020 <_vfiprintf_r+0x3c>
 800901c:	692b      	ldr	r3, [r5, #16]
 800901e:	b9eb      	cbnz	r3, 800905c <_vfiprintf_r+0x78>
 8009020:	4629      	mov	r1, r5
 8009022:	4630      	mov	r0, r6
 8009024:	f000 f96e 	bl	8009304 <__swsetup_r>
 8009028:	b1c0      	cbz	r0, 800905c <_vfiprintf_r+0x78>
 800902a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800902c:	07dc      	lsls	r4, r3, #31
 800902e:	d50e      	bpl.n	800904e <_vfiprintf_r+0x6a>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b01d      	add	sp, #116	; 0x74
 8009036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903a:	4b7b      	ldr	r3, [pc, #492]	; (8009228 <_vfiprintf_r+0x244>)
 800903c:	429d      	cmp	r5, r3
 800903e:	d101      	bne.n	8009044 <_vfiprintf_r+0x60>
 8009040:	68b5      	ldr	r5, [r6, #8]
 8009042:	e7df      	b.n	8009004 <_vfiprintf_r+0x20>
 8009044:	4b79      	ldr	r3, [pc, #484]	; (800922c <_vfiprintf_r+0x248>)
 8009046:	429d      	cmp	r5, r3
 8009048:	bf08      	it	eq
 800904a:	68f5      	ldreq	r5, [r6, #12]
 800904c:	e7da      	b.n	8009004 <_vfiprintf_r+0x20>
 800904e:	89ab      	ldrh	r3, [r5, #12]
 8009050:	0598      	lsls	r0, r3, #22
 8009052:	d4ed      	bmi.n	8009030 <_vfiprintf_r+0x4c>
 8009054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009056:	f000 fb84 	bl	8009762 <__retarget_lock_release_recursive>
 800905a:	e7e9      	b.n	8009030 <_vfiprintf_r+0x4c>
 800905c:	2300      	movs	r3, #0
 800905e:	9309      	str	r3, [sp, #36]	; 0x24
 8009060:	2320      	movs	r3, #32
 8009062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009066:	f8cd 800c 	str.w	r8, [sp, #12]
 800906a:	2330      	movs	r3, #48	; 0x30
 800906c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009230 <_vfiprintf_r+0x24c>
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009074:	f04f 0901 	mov.w	r9, #1
 8009078:	4623      	mov	r3, r4
 800907a:	469a      	mov	sl, r3
 800907c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009080:	b10a      	cbz	r2, 8009086 <_vfiprintf_r+0xa2>
 8009082:	2a25      	cmp	r2, #37	; 0x25
 8009084:	d1f9      	bne.n	800907a <_vfiprintf_r+0x96>
 8009086:	ebba 0b04 	subs.w	fp, sl, r4
 800908a:	d00b      	beq.n	80090a4 <_vfiprintf_r+0xc0>
 800908c:	465b      	mov	r3, fp
 800908e:	4622      	mov	r2, r4
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f7ff ff94 	bl	8008fc0 <__sfputs_r>
 8009098:	3001      	adds	r0, #1
 800909a:	f000 80aa 	beq.w	80091f2 <_vfiprintf_r+0x20e>
 800909e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090a0:	445a      	add	r2, fp
 80090a2:	9209      	str	r2, [sp, #36]	; 0x24
 80090a4:	f89a 3000 	ldrb.w	r3, [sl]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 80a2 	beq.w	80091f2 <_vfiprintf_r+0x20e>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b8:	f10a 0a01 	add.w	sl, sl, #1
 80090bc:	9304      	str	r3, [sp, #16]
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c4:	931a      	str	r3, [sp, #104]	; 0x68
 80090c6:	4654      	mov	r4, sl
 80090c8:	2205      	movs	r2, #5
 80090ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ce:	4858      	ldr	r0, [pc, #352]	; (8009230 <_vfiprintf_r+0x24c>)
 80090d0:	f7f7 f8a6 	bl	8000220 <memchr>
 80090d4:	9a04      	ldr	r2, [sp, #16]
 80090d6:	b9d8      	cbnz	r0, 8009110 <_vfiprintf_r+0x12c>
 80090d8:	06d1      	lsls	r1, r2, #27
 80090da:	bf44      	itt	mi
 80090dc:	2320      	movmi	r3, #32
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e2:	0713      	lsls	r3, r2, #28
 80090e4:	bf44      	itt	mi
 80090e6:	232b      	movmi	r3, #43	; 0x2b
 80090e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ec:	f89a 3000 	ldrb.w	r3, [sl]
 80090f0:	2b2a      	cmp	r3, #42	; 0x2a
 80090f2:	d015      	beq.n	8009120 <_vfiprintf_r+0x13c>
 80090f4:	9a07      	ldr	r2, [sp, #28]
 80090f6:	4654      	mov	r4, sl
 80090f8:	2000      	movs	r0, #0
 80090fa:	f04f 0c0a 	mov.w	ip, #10
 80090fe:	4621      	mov	r1, r4
 8009100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009104:	3b30      	subs	r3, #48	; 0x30
 8009106:	2b09      	cmp	r3, #9
 8009108:	d94e      	bls.n	80091a8 <_vfiprintf_r+0x1c4>
 800910a:	b1b0      	cbz	r0, 800913a <_vfiprintf_r+0x156>
 800910c:	9207      	str	r2, [sp, #28]
 800910e:	e014      	b.n	800913a <_vfiprintf_r+0x156>
 8009110:	eba0 0308 	sub.w	r3, r0, r8
 8009114:	fa09 f303 	lsl.w	r3, r9, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	46a2      	mov	sl, r4
 800911e:	e7d2      	b.n	80090c6 <_vfiprintf_r+0xe2>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	1d19      	adds	r1, r3, #4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	9103      	str	r1, [sp, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfbb      	ittet	lt
 800912c:	425b      	neglt	r3, r3
 800912e:	f042 0202 	orrlt.w	r2, r2, #2
 8009132:	9307      	strge	r3, [sp, #28]
 8009134:	9307      	strlt	r3, [sp, #28]
 8009136:	bfb8      	it	lt
 8009138:	9204      	strlt	r2, [sp, #16]
 800913a:	7823      	ldrb	r3, [r4, #0]
 800913c:	2b2e      	cmp	r3, #46	; 0x2e
 800913e:	d10c      	bne.n	800915a <_vfiprintf_r+0x176>
 8009140:	7863      	ldrb	r3, [r4, #1]
 8009142:	2b2a      	cmp	r3, #42	; 0x2a
 8009144:	d135      	bne.n	80091b2 <_vfiprintf_r+0x1ce>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	1d1a      	adds	r2, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9203      	str	r2, [sp, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfb8      	it	lt
 8009152:	f04f 33ff 	movlt.w	r3, #4294967295
 8009156:	3402      	adds	r4, #2
 8009158:	9305      	str	r3, [sp, #20]
 800915a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009240 <_vfiprintf_r+0x25c>
 800915e:	7821      	ldrb	r1, [r4, #0]
 8009160:	2203      	movs	r2, #3
 8009162:	4650      	mov	r0, sl
 8009164:	f7f7 f85c 	bl	8000220 <memchr>
 8009168:	b140      	cbz	r0, 800917c <_vfiprintf_r+0x198>
 800916a:	2340      	movs	r3, #64	; 0x40
 800916c:	eba0 000a 	sub.w	r0, r0, sl
 8009170:	fa03 f000 	lsl.w	r0, r3, r0
 8009174:	9b04      	ldr	r3, [sp, #16]
 8009176:	4303      	orrs	r3, r0
 8009178:	3401      	adds	r4, #1
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009180:	482c      	ldr	r0, [pc, #176]	; (8009234 <_vfiprintf_r+0x250>)
 8009182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009186:	2206      	movs	r2, #6
 8009188:	f7f7 f84a 	bl	8000220 <memchr>
 800918c:	2800      	cmp	r0, #0
 800918e:	d03f      	beq.n	8009210 <_vfiprintf_r+0x22c>
 8009190:	4b29      	ldr	r3, [pc, #164]	; (8009238 <_vfiprintf_r+0x254>)
 8009192:	bb1b      	cbnz	r3, 80091dc <_vfiprintf_r+0x1f8>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	3307      	adds	r3, #7
 8009198:	f023 0307 	bic.w	r3, r3, #7
 800919c:	3308      	adds	r3, #8
 800919e:	9303      	str	r3, [sp, #12]
 80091a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a2:	443b      	add	r3, r7
 80091a4:	9309      	str	r3, [sp, #36]	; 0x24
 80091a6:	e767      	b.n	8009078 <_vfiprintf_r+0x94>
 80091a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ac:	460c      	mov	r4, r1
 80091ae:	2001      	movs	r0, #1
 80091b0:	e7a5      	b.n	80090fe <_vfiprintf_r+0x11a>
 80091b2:	2300      	movs	r3, #0
 80091b4:	3401      	adds	r4, #1
 80091b6:	9305      	str	r3, [sp, #20]
 80091b8:	4619      	mov	r1, r3
 80091ba:	f04f 0c0a 	mov.w	ip, #10
 80091be:	4620      	mov	r0, r4
 80091c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c4:	3a30      	subs	r2, #48	; 0x30
 80091c6:	2a09      	cmp	r2, #9
 80091c8:	d903      	bls.n	80091d2 <_vfiprintf_r+0x1ee>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0c5      	beq.n	800915a <_vfiprintf_r+0x176>
 80091ce:	9105      	str	r1, [sp, #20]
 80091d0:	e7c3      	b.n	800915a <_vfiprintf_r+0x176>
 80091d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d6:	4604      	mov	r4, r0
 80091d8:	2301      	movs	r3, #1
 80091da:	e7f0      	b.n	80091be <_vfiprintf_r+0x1da>
 80091dc:	ab03      	add	r3, sp, #12
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	462a      	mov	r2, r5
 80091e2:	4b16      	ldr	r3, [pc, #88]	; (800923c <_vfiprintf_r+0x258>)
 80091e4:	a904      	add	r1, sp, #16
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7fd fdd8 	bl	8006d9c <_printf_float>
 80091ec:	4607      	mov	r7, r0
 80091ee:	1c78      	adds	r0, r7, #1
 80091f0:	d1d6      	bne.n	80091a0 <_vfiprintf_r+0x1bc>
 80091f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f4:	07d9      	lsls	r1, r3, #31
 80091f6:	d405      	bmi.n	8009204 <_vfiprintf_r+0x220>
 80091f8:	89ab      	ldrh	r3, [r5, #12]
 80091fa:	059a      	lsls	r2, r3, #22
 80091fc:	d402      	bmi.n	8009204 <_vfiprintf_r+0x220>
 80091fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009200:	f000 faaf 	bl	8009762 <__retarget_lock_release_recursive>
 8009204:	89ab      	ldrh	r3, [r5, #12]
 8009206:	065b      	lsls	r3, r3, #25
 8009208:	f53f af12 	bmi.w	8009030 <_vfiprintf_r+0x4c>
 800920c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800920e:	e711      	b.n	8009034 <_vfiprintf_r+0x50>
 8009210:	ab03      	add	r3, sp, #12
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	462a      	mov	r2, r5
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <_vfiprintf_r+0x258>)
 8009218:	a904      	add	r1, sp, #16
 800921a:	4630      	mov	r0, r6
 800921c:	f7fe f862 	bl	80072e4 <_printf_i>
 8009220:	e7e4      	b.n	80091ec <_vfiprintf_r+0x208>
 8009222:	bf00      	nop
 8009224:	0800ac74 	.word	0x0800ac74
 8009228:	0800ac94 	.word	0x0800ac94
 800922c:	0800ac54 	.word	0x0800ac54
 8009230:	0800aafc 	.word	0x0800aafc
 8009234:	0800ab06 	.word	0x0800ab06
 8009238:	08006d9d 	.word	0x08006d9d
 800923c:	08008fc1 	.word	0x08008fc1
 8009240:	0800ab02 	.word	0x0800ab02

08009244 <__swbuf_r>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	460e      	mov	r6, r1
 8009248:	4614      	mov	r4, r2
 800924a:	4605      	mov	r5, r0
 800924c:	b118      	cbz	r0, 8009256 <__swbuf_r+0x12>
 800924e:	6983      	ldr	r3, [r0, #24]
 8009250:	b90b      	cbnz	r3, 8009256 <__swbuf_r+0x12>
 8009252:	f000 f9e7 	bl	8009624 <__sinit>
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <__swbuf_r+0x98>)
 8009258:	429c      	cmp	r4, r3
 800925a:	d12b      	bne.n	80092b4 <__swbuf_r+0x70>
 800925c:	686c      	ldr	r4, [r5, #4]
 800925e:	69a3      	ldr	r3, [r4, #24]
 8009260:	60a3      	str	r3, [r4, #8]
 8009262:	89a3      	ldrh	r3, [r4, #12]
 8009264:	071a      	lsls	r2, r3, #28
 8009266:	d52f      	bpl.n	80092c8 <__swbuf_r+0x84>
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	b36b      	cbz	r3, 80092c8 <__swbuf_r+0x84>
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	6820      	ldr	r0, [r4, #0]
 8009270:	1ac0      	subs	r0, r0, r3
 8009272:	6963      	ldr	r3, [r4, #20]
 8009274:	b2f6      	uxtb	r6, r6
 8009276:	4283      	cmp	r3, r0
 8009278:	4637      	mov	r7, r6
 800927a:	dc04      	bgt.n	8009286 <__swbuf_r+0x42>
 800927c:	4621      	mov	r1, r4
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f93c 	bl	80094fc <_fflush_r>
 8009284:	bb30      	cbnz	r0, 80092d4 <__swbuf_r+0x90>
 8009286:	68a3      	ldr	r3, [r4, #8]
 8009288:	3b01      	subs	r3, #1
 800928a:	60a3      	str	r3, [r4, #8]
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	6022      	str	r2, [r4, #0]
 8009292:	701e      	strb	r6, [r3, #0]
 8009294:	6963      	ldr	r3, [r4, #20]
 8009296:	3001      	adds	r0, #1
 8009298:	4283      	cmp	r3, r0
 800929a:	d004      	beq.n	80092a6 <__swbuf_r+0x62>
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	07db      	lsls	r3, r3, #31
 80092a0:	d506      	bpl.n	80092b0 <__swbuf_r+0x6c>
 80092a2:	2e0a      	cmp	r6, #10
 80092a4:	d104      	bne.n	80092b0 <__swbuf_r+0x6c>
 80092a6:	4621      	mov	r1, r4
 80092a8:	4628      	mov	r0, r5
 80092aa:	f000 f927 	bl	80094fc <_fflush_r>
 80092ae:	b988      	cbnz	r0, 80092d4 <__swbuf_r+0x90>
 80092b0:	4638      	mov	r0, r7
 80092b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b4:	4b0a      	ldr	r3, [pc, #40]	; (80092e0 <__swbuf_r+0x9c>)
 80092b6:	429c      	cmp	r4, r3
 80092b8:	d101      	bne.n	80092be <__swbuf_r+0x7a>
 80092ba:	68ac      	ldr	r4, [r5, #8]
 80092bc:	e7cf      	b.n	800925e <__swbuf_r+0x1a>
 80092be:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <__swbuf_r+0xa0>)
 80092c0:	429c      	cmp	r4, r3
 80092c2:	bf08      	it	eq
 80092c4:	68ec      	ldreq	r4, [r5, #12]
 80092c6:	e7ca      	b.n	800925e <__swbuf_r+0x1a>
 80092c8:	4621      	mov	r1, r4
 80092ca:	4628      	mov	r0, r5
 80092cc:	f000 f81a 	bl	8009304 <__swsetup_r>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d0cb      	beq.n	800926c <__swbuf_r+0x28>
 80092d4:	f04f 37ff 	mov.w	r7, #4294967295
 80092d8:	e7ea      	b.n	80092b0 <__swbuf_r+0x6c>
 80092da:	bf00      	nop
 80092dc:	0800ac74 	.word	0x0800ac74
 80092e0:	0800ac94 	.word	0x0800ac94
 80092e4:	0800ac54 	.word	0x0800ac54

080092e8 <__ascii_wctomb>:
 80092e8:	b149      	cbz	r1, 80092fe <__ascii_wctomb+0x16>
 80092ea:	2aff      	cmp	r2, #255	; 0xff
 80092ec:	bf85      	ittet	hi
 80092ee:	238a      	movhi	r3, #138	; 0x8a
 80092f0:	6003      	strhi	r3, [r0, #0]
 80092f2:	700a      	strbls	r2, [r1, #0]
 80092f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80092f8:	bf98      	it	ls
 80092fa:	2001      	movls	r0, #1
 80092fc:	4770      	bx	lr
 80092fe:	4608      	mov	r0, r1
 8009300:	4770      	bx	lr
	...

08009304 <__swsetup_r>:
 8009304:	4b32      	ldr	r3, [pc, #200]	; (80093d0 <__swsetup_r+0xcc>)
 8009306:	b570      	push	{r4, r5, r6, lr}
 8009308:	681d      	ldr	r5, [r3, #0]
 800930a:	4606      	mov	r6, r0
 800930c:	460c      	mov	r4, r1
 800930e:	b125      	cbz	r5, 800931a <__swsetup_r+0x16>
 8009310:	69ab      	ldr	r3, [r5, #24]
 8009312:	b913      	cbnz	r3, 800931a <__swsetup_r+0x16>
 8009314:	4628      	mov	r0, r5
 8009316:	f000 f985 	bl	8009624 <__sinit>
 800931a:	4b2e      	ldr	r3, [pc, #184]	; (80093d4 <__swsetup_r+0xd0>)
 800931c:	429c      	cmp	r4, r3
 800931e:	d10f      	bne.n	8009340 <__swsetup_r+0x3c>
 8009320:	686c      	ldr	r4, [r5, #4]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009328:	0719      	lsls	r1, r3, #28
 800932a:	d42c      	bmi.n	8009386 <__swsetup_r+0x82>
 800932c:	06dd      	lsls	r5, r3, #27
 800932e:	d411      	bmi.n	8009354 <__swsetup_r+0x50>
 8009330:	2309      	movs	r3, #9
 8009332:	6033      	str	r3, [r6, #0]
 8009334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009338:	81a3      	strh	r3, [r4, #12]
 800933a:	f04f 30ff 	mov.w	r0, #4294967295
 800933e:	e03e      	b.n	80093be <__swsetup_r+0xba>
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <__swsetup_r+0xd4>)
 8009342:	429c      	cmp	r4, r3
 8009344:	d101      	bne.n	800934a <__swsetup_r+0x46>
 8009346:	68ac      	ldr	r4, [r5, #8]
 8009348:	e7eb      	b.n	8009322 <__swsetup_r+0x1e>
 800934a:	4b24      	ldr	r3, [pc, #144]	; (80093dc <__swsetup_r+0xd8>)
 800934c:	429c      	cmp	r4, r3
 800934e:	bf08      	it	eq
 8009350:	68ec      	ldreq	r4, [r5, #12]
 8009352:	e7e6      	b.n	8009322 <__swsetup_r+0x1e>
 8009354:	0758      	lsls	r0, r3, #29
 8009356:	d512      	bpl.n	800937e <__swsetup_r+0x7a>
 8009358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800935a:	b141      	cbz	r1, 800936e <__swsetup_r+0x6a>
 800935c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009360:	4299      	cmp	r1, r3
 8009362:	d002      	beq.n	800936a <__swsetup_r+0x66>
 8009364:	4630      	mov	r0, r6
 8009366:	f7ff fb31 	bl	80089cc <_free_r>
 800936a:	2300      	movs	r3, #0
 800936c:	6363      	str	r3, [r4, #52]	; 0x34
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	2300      	movs	r3, #0
 8009378:	6063      	str	r3, [r4, #4]
 800937a:	6923      	ldr	r3, [r4, #16]
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	89a3      	ldrh	r3, [r4, #12]
 8009380:	f043 0308 	orr.w	r3, r3, #8
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	b94b      	cbnz	r3, 800939e <__swsetup_r+0x9a>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009394:	d003      	beq.n	800939e <__swsetup_r+0x9a>
 8009396:	4621      	mov	r1, r4
 8009398:	4630      	mov	r0, r6
 800939a:	f000 fa09 	bl	80097b0 <__smakebuf_r>
 800939e:	89a0      	ldrh	r0, [r4, #12]
 80093a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093a4:	f010 0301 	ands.w	r3, r0, #1
 80093a8:	d00a      	beq.n	80093c0 <__swsetup_r+0xbc>
 80093aa:	2300      	movs	r3, #0
 80093ac:	60a3      	str	r3, [r4, #8]
 80093ae:	6963      	ldr	r3, [r4, #20]
 80093b0:	425b      	negs	r3, r3
 80093b2:	61a3      	str	r3, [r4, #24]
 80093b4:	6923      	ldr	r3, [r4, #16]
 80093b6:	b943      	cbnz	r3, 80093ca <__swsetup_r+0xc6>
 80093b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093bc:	d1ba      	bne.n	8009334 <__swsetup_r+0x30>
 80093be:	bd70      	pop	{r4, r5, r6, pc}
 80093c0:	0781      	lsls	r1, r0, #30
 80093c2:	bf58      	it	pl
 80093c4:	6963      	ldrpl	r3, [r4, #20]
 80093c6:	60a3      	str	r3, [r4, #8]
 80093c8:	e7f4      	b.n	80093b4 <__swsetup_r+0xb0>
 80093ca:	2000      	movs	r0, #0
 80093cc:	e7f7      	b.n	80093be <__swsetup_r+0xba>
 80093ce:	bf00      	nop
 80093d0:	2000000c 	.word	0x2000000c
 80093d4:	0800ac74 	.word	0x0800ac74
 80093d8:	0800ac94 	.word	0x0800ac94
 80093dc:	0800ac54 	.word	0x0800ac54

080093e0 <abort>:
 80093e0:	b508      	push	{r3, lr}
 80093e2:	2006      	movs	r0, #6
 80093e4:	f000 fa54 	bl	8009890 <raise>
 80093e8:	2001      	movs	r0, #1
 80093ea:	f7f9 f892 	bl	8002512 <_exit>
	...

080093f0 <__sflush_r>:
 80093f0:	898a      	ldrh	r2, [r1, #12]
 80093f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	0710      	lsls	r0, r2, #28
 80093fa:	460c      	mov	r4, r1
 80093fc:	d458      	bmi.n	80094b0 <__sflush_r+0xc0>
 80093fe:	684b      	ldr	r3, [r1, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	dc05      	bgt.n	8009410 <__sflush_r+0x20>
 8009404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc02      	bgt.n	8009410 <__sflush_r+0x20>
 800940a:	2000      	movs	r0, #0
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009412:	2e00      	cmp	r6, #0
 8009414:	d0f9      	beq.n	800940a <__sflush_r+0x1a>
 8009416:	2300      	movs	r3, #0
 8009418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800941c:	682f      	ldr	r7, [r5, #0]
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	d032      	beq.n	8009488 <__sflush_r+0x98>
 8009422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	075a      	lsls	r2, r3, #29
 8009428:	d505      	bpl.n	8009436 <__sflush_r+0x46>
 800942a:	6863      	ldr	r3, [r4, #4]
 800942c:	1ac0      	subs	r0, r0, r3
 800942e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009430:	b10b      	cbz	r3, 8009436 <__sflush_r+0x46>
 8009432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009434:	1ac0      	subs	r0, r0, r3
 8009436:	2300      	movs	r3, #0
 8009438:	4602      	mov	r2, r0
 800943a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943c:	6a21      	ldr	r1, [r4, #32]
 800943e:	4628      	mov	r0, r5
 8009440:	47b0      	blx	r6
 8009442:	1c43      	adds	r3, r0, #1
 8009444:	89a3      	ldrh	r3, [r4, #12]
 8009446:	d106      	bne.n	8009456 <__sflush_r+0x66>
 8009448:	6829      	ldr	r1, [r5, #0]
 800944a:	291d      	cmp	r1, #29
 800944c:	d82c      	bhi.n	80094a8 <__sflush_r+0xb8>
 800944e:	4a2a      	ldr	r2, [pc, #168]	; (80094f8 <__sflush_r+0x108>)
 8009450:	40ca      	lsrs	r2, r1
 8009452:	07d6      	lsls	r6, r2, #31
 8009454:	d528      	bpl.n	80094a8 <__sflush_r+0xb8>
 8009456:	2200      	movs	r2, #0
 8009458:	6062      	str	r2, [r4, #4]
 800945a:	04d9      	lsls	r1, r3, #19
 800945c:	6922      	ldr	r2, [r4, #16]
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	d504      	bpl.n	800946c <__sflush_r+0x7c>
 8009462:	1c42      	adds	r2, r0, #1
 8009464:	d101      	bne.n	800946a <__sflush_r+0x7a>
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	b903      	cbnz	r3, 800946c <__sflush_r+0x7c>
 800946a:	6560      	str	r0, [r4, #84]	; 0x54
 800946c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800946e:	602f      	str	r7, [r5, #0]
 8009470:	2900      	cmp	r1, #0
 8009472:	d0ca      	beq.n	800940a <__sflush_r+0x1a>
 8009474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009478:	4299      	cmp	r1, r3
 800947a:	d002      	beq.n	8009482 <__sflush_r+0x92>
 800947c:	4628      	mov	r0, r5
 800947e:	f7ff faa5 	bl	80089cc <_free_r>
 8009482:	2000      	movs	r0, #0
 8009484:	6360      	str	r0, [r4, #52]	; 0x34
 8009486:	e7c1      	b.n	800940c <__sflush_r+0x1c>
 8009488:	6a21      	ldr	r1, [r4, #32]
 800948a:	2301      	movs	r3, #1
 800948c:	4628      	mov	r0, r5
 800948e:	47b0      	blx	r6
 8009490:	1c41      	adds	r1, r0, #1
 8009492:	d1c7      	bne.n	8009424 <__sflush_r+0x34>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0c4      	beq.n	8009424 <__sflush_r+0x34>
 800949a:	2b1d      	cmp	r3, #29
 800949c:	d001      	beq.n	80094a2 <__sflush_r+0xb2>
 800949e:	2b16      	cmp	r3, #22
 80094a0:	d101      	bne.n	80094a6 <__sflush_r+0xb6>
 80094a2:	602f      	str	r7, [r5, #0]
 80094a4:	e7b1      	b.n	800940a <__sflush_r+0x1a>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	e7ad      	b.n	800940c <__sflush_r+0x1c>
 80094b0:	690f      	ldr	r7, [r1, #16]
 80094b2:	2f00      	cmp	r7, #0
 80094b4:	d0a9      	beq.n	800940a <__sflush_r+0x1a>
 80094b6:	0793      	lsls	r3, r2, #30
 80094b8:	680e      	ldr	r6, [r1, #0]
 80094ba:	bf08      	it	eq
 80094bc:	694b      	ldreq	r3, [r1, #20]
 80094be:	600f      	str	r7, [r1, #0]
 80094c0:	bf18      	it	ne
 80094c2:	2300      	movne	r3, #0
 80094c4:	eba6 0807 	sub.w	r8, r6, r7
 80094c8:	608b      	str	r3, [r1, #8]
 80094ca:	f1b8 0f00 	cmp.w	r8, #0
 80094ce:	dd9c      	ble.n	800940a <__sflush_r+0x1a>
 80094d0:	6a21      	ldr	r1, [r4, #32]
 80094d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094d4:	4643      	mov	r3, r8
 80094d6:	463a      	mov	r2, r7
 80094d8:	4628      	mov	r0, r5
 80094da:	47b0      	blx	r6
 80094dc:	2800      	cmp	r0, #0
 80094de:	dc06      	bgt.n	80094ee <__sflush_r+0xfe>
 80094e0:	89a3      	ldrh	r3, [r4, #12]
 80094e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094e6:	81a3      	strh	r3, [r4, #12]
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	e78e      	b.n	800940c <__sflush_r+0x1c>
 80094ee:	4407      	add	r7, r0
 80094f0:	eba8 0800 	sub.w	r8, r8, r0
 80094f4:	e7e9      	b.n	80094ca <__sflush_r+0xda>
 80094f6:	bf00      	nop
 80094f8:	20400001 	.word	0x20400001

080094fc <_fflush_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	690b      	ldr	r3, [r1, #16]
 8009500:	4605      	mov	r5, r0
 8009502:	460c      	mov	r4, r1
 8009504:	b913      	cbnz	r3, 800950c <_fflush_r+0x10>
 8009506:	2500      	movs	r5, #0
 8009508:	4628      	mov	r0, r5
 800950a:	bd38      	pop	{r3, r4, r5, pc}
 800950c:	b118      	cbz	r0, 8009516 <_fflush_r+0x1a>
 800950e:	6983      	ldr	r3, [r0, #24]
 8009510:	b90b      	cbnz	r3, 8009516 <_fflush_r+0x1a>
 8009512:	f000 f887 	bl	8009624 <__sinit>
 8009516:	4b14      	ldr	r3, [pc, #80]	; (8009568 <_fflush_r+0x6c>)
 8009518:	429c      	cmp	r4, r3
 800951a:	d11b      	bne.n	8009554 <_fflush_r+0x58>
 800951c:	686c      	ldr	r4, [r5, #4]
 800951e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0ef      	beq.n	8009506 <_fflush_r+0xa>
 8009526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009528:	07d0      	lsls	r0, r2, #31
 800952a:	d404      	bmi.n	8009536 <_fflush_r+0x3a>
 800952c:	0599      	lsls	r1, r3, #22
 800952e:	d402      	bmi.n	8009536 <_fflush_r+0x3a>
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f000 f915 	bl	8009760 <__retarget_lock_acquire_recursive>
 8009536:	4628      	mov	r0, r5
 8009538:	4621      	mov	r1, r4
 800953a:	f7ff ff59 	bl	80093f0 <__sflush_r>
 800953e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009540:	07da      	lsls	r2, r3, #31
 8009542:	4605      	mov	r5, r0
 8009544:	d4e0      	bmi.n	8009508 <_fflush_r+0xc>
 8009546:	89a3      	ldrh	r3, [r4, #12]
 8009548:	059b      	lsls	r3, r3, #22
 800954a:	d4dd      	bmi.n	8009508 <_fflush_r+0xc>
 800954c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800954e:	f000 f908 	bl	8009762 <__retarget_lock_release_recursive>
 8009552:	e7d9      	b.n	8009508 <_fflush_r+0xc>
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <_fflush_r+0x70>)
 8009556:	429c      	cmp	r4, r3
 8009558:	d101      	bne.n	800955e <_fflush_r+0x62>
 800955a:	68ac      	ldr	r4, [r5, #8]
 800955c:	e7df      	b.n	800951e <_fflush_r+0x22>
 800955e:	4b04      	ldr	r3, [pc, #16]	; (8009570 <_fflush_r+0x74>)
 8009560:	429c      	cmp	r4, r3
 8009562:	bf08      	it	eq
 8009564:	68ec      	ldreq	r4, [r5, #12]
 8009566:	e7da      	b.n	800951e <_fflush_r+0x22>
 8009568:	0800ac74 	.word	0x0800ac74
 800956c:	0800ac94 	.word	0x0800ac94
 8009570:	0800ac54 	.word	0x0800ac54

08009574 <std>:
 8009574:	2300      	movs	r3, #0
 8009576:	b510      	push	{r4, lr}
 8009578:	4604      	mov	r4, r0
 800957a:	e9c0 3300 	strd	r3, r3, [r0]
 800957e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009582:	6083      	str	r3, [r0, #8]
 8009584:	8181      	strh	r1, [r0, #12]
 8009586:	6643      	str	r3, [r0, #100]	; 0x64
 8009588:	81c2      	strh	r2, [r0, #14]
 800958a:	6183      	str	r3, [r0, #24]
 800958c:	4619      	mov	r1, r3
 800958e:	2208      	movs	r2, #8
 8009590:	305c      	adds	r0, #92	; 0x5c
 8009592:	f7fd fb5b 	bl	8006c4c <memset>
 8009596:	4b05      	ldr	r3, [pc, #20]	; (80095ac <std+0x38>)
 8009598:	6263      	str	r3, [r4, #36]	; 0x24
 800959a:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <std+0x3c>)
 800959c:	62a3      	str	r3, [r4, #40]	; 0x28
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <std+0x40>)
 80095a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <std+0x44>)
 80095a4:	6224      	str	r4, [r4, #32]
 80095a6:	6323      	str	r3, [r4, #48]	; 0x30
 80095a8:	bd10      	pop	{r4, pc}
 80095aa:	bf00      	nop
 80095ac:	080098c9 	.word	0x080098c9
 80095b0:	080098eb 	.word	0x080098eb
 80095b4:	08009923 	.word	0x08009923
 80095b8:	08009947 	.word	0x08009947

080095bc <_cleanup_r>:
 80095bc:	4901      	ldr	r1, [pc, #4]	; (80095c4 <_cleanup_r+0x8>)
 80095be:	f000 b8af 	b.w	8009720 <_fwalk_reent>
 80095c2:	bf00      	nop
 80095c4:	080094fd 	.word	0x080094fd

080095c8 <__sfmoreglue>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	2268      	movs	r2, #104	; 0x68
 80095cc:	1e4d      	subs	r5, r1, #1
 80095ce:	4355      	muls	r5, r2
 80095d0:	460e      	mov	r6, r1
 80095d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095d6:	f7ff fa65 	bl	8008aa4 <_malloc_r>
 80095da:	4604      	mov	r4, r0
 80095dc:	b140      	cbz	r0, 80095f0 <__sfmoreglue+0x28>
 80095de:	2100      	movs	r1, #0
 80095e0:	e9c0 1600 	strd	r1, r6, [r0]
 80095e4:	300c      	adds	r0, #12
 80095e6:	60a0      	str	r0, [r4, #8]
 80095e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095ec:	f7fd fb2e 	bl	8006c4c <memset>
 80095f0:	4620      	mov	r0, r4
 80095f2:	bd70      	pop	{r4, r5, r6, pc}

080095f4 <__sfp_lock_acquire>:
 80095f4:	4801      	ldr	r0, [pc, #4]	; (80095fc <__sfp_lock_acquire+0x8>)
 80095f6:	f000 b8b3 	b.w	8009760 <__retarget_lock_acquire_recursive>
 80095fa:	bf00      	nop
 80095fc:	20000579 	.word	0x20000579

08009600 <__sfp_lock_release>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__sfp_lock_release+0x8>)
 8009602:	f000 b8ae 	b.w	8009762 <__retarget_lock_release_recursive>
 8009606:	bf00      	nop
 8009608:	20000579 	.word	0x20000579

0800960c <__sinit_lock_acquire>:
 800960c:	4801      	ldr	r0, [pc, #4]	; (8009614 <__sinit_lock_acquire+0x8>)
 800960e:	f000 b8a7 	b.w	8009760 <__retarget_lock_acquire_recursive>
 8009612:	bf00      	nop
 8009614:	2000057a 	.word	0x2000057a

08009618 <__sinit_lock_release>:
 8009618:	4801      	ldr	r0, [pc, #4]	; (8009620 <__sinit_lock_release+0x8>)
 800961a:	f000 b8a2 	b.w	8009762 <__retarget_lock_release_recursive>
 800961e:	bf00      	nop
 8009620:	2000057a 	.word	0x2000057a

08009624 <__sinit>:
 8009624:	b510      	push	{r4, lr}
 8009626:	4604      	mov	r4, r0
 8009628:	f7ff fff0 	bl	800960c <__sinit_lock_acquire>
 800962c:	69a3      	ldr	r3, [r4, #24]
 800962e:	b11b      	cbz	r3, 8009638 <__sinit+0x14>
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009634:	f7ff bff0 	b.w	8009618 <__sinit_lock_release>
 8009638:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800963c:	6523      	str	r3, [r4, #80]	; 0x50
 800963e:	4b13      	ldr	r3, [pc, #76]	; (800968c <__sinit+0x68>)
 8009640:	4a13      	ldr	r2, [pc, #76]	; (8009690 <__sinit+0x6c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	62a2      	str	r2, [r4, #40]	; 0x28
 8009646:	42a3      	cmp	r3, r4
 8009648:	bf04      	itt	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	61a3      	streq	r3, [r4, #24]
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f820 	bl	8009694 <__sfp>
 8009654:	6060      	str	r0, [r4, #4]
 8009656:	4620      	mov	r0, r4
 8009658:	f000 f81c 	bl	8009694 <__sfp>
 800965c:	60a0      	str	r0, [r4, #8]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f818 	bl	8009694 <__sfp>
 8009664:	2200      	movs	r2, #0
 8009666:	60e0      	str	r0, [r4, #12]
 8009668:	2104      	movs	r1, #4
 800966a:	6860      	ldr	r0, [r4, #4]
 800966c:	f7ff ff82 	bl	8009574 <std>
 8009670:	68a0      	ldr	r0, [r4, #8]
 8009672:	2201      	movs	r2, #1
 8009674:	2109      	movs	r1, #9
 8009676:	f7ff ff7d 	bl	8009574 <std>
 800967a:	68e0      	ldr	r0, [r4, #12]
 800967c:	2202      	movs	r2, #2
 800967e:	2112      	movs	r1, #18
 8009680:	f7ff ff78 	bl	8009574 <std>
 8009684:	2301      	movs	r3, #1
 8009686:	61a3      	str	r3, [r4, #24]
 8009688:	e7d2      	b.n	8009630 <__sinit+0xc>
 800968a:	bf00      	nop
 800968c:	0800a8d8 	.word	0x0800a8d8
 8009690:	080095bd 	.word	0x080095bd

08009694 <__sfp>:
 8009694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009696:	4607      	mov	r7, r0
 8009698:	f7ff ffac 	bl	80095f4 <__sfp_lock_acquire>
 800969c:	4b1e      	ldr	r3, [pc, #120]	; (8009718 <__sfp+0x84>)
 800969e:	681e      	ldr	r6, [r3, #0]
 80096a0:	69b3      	ldr	r3, [r6, #24]
 80096a2:	b913      	cbnz	r3, 80096aa <__sfp+0x16>
 80096a4:	4630      	mov	r0, r6
 80096a6:	f7ff ffbd 	bl	8009624 <__sinit>
 80096aa:	3648      	adds	r6, #72	; 0x48
 80096ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	d503      	bpl.n	80096bc <__sfp+0x28>
 80096b4:	6833      	ldr	r3, [r6, #0]
 80096b6:	b30b      	cbz	r3, 80096fc <__sfp+0x68>
 80096b8:	6836      	ldr	r6, [r6, #0]
 80096ba:	e7f7      	b.n	80096ac <__sfp+0x18>
 80096bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096c0:	b9d5      	cbnz	r5, 80096f8 <__sfp+0x64>
 80096c2:	4b16      	ldr	r3, [pc, #88]	; (800971c <__sfp+0x88>)
 80096c4:	60e3      	str	r3, [r4, #12]
 80096c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096ca:	6665      	str	r5, [r4, #100]	; 0x64
 80096cc:	f000 f847 	bl	800975e <__retarget_lock_init_recursive>
 80096d0:	f7ff ff96 	bl	8009600 <__sfp_lock_release>
 80096d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096dc:	6025      	str	r5, [r4, #0]
 80096de:	61a5      	str	r5, [r4, #24]
 80096e0:	2208      	movs	r2, #8
 80096e2:	4629      	mov	r1, r5
 80096e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096e8:	f7fd fab0 	bl	8006c4c <memset>
 80096ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096f4:	4620      	mov	r0, r4
 80096f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f8:	3468      	adds	r4, #104	; 0x68
 80096fa:	e7d9      	b.n	80096b0 <__sfp+0x1c>
 80096fc:	2104      	movs	r1, #4
 80096fe:	4638      	mov	r0, r7
 8009700:	f7ff ff62 	bl	80095c8 <__sfmoreglue>
 8009704:	4604      	mov	r4, r0
 8009706:	6030      	str	r0, [r6, #0]
 8009708:	2800      	cmp	r0, #0
 800970a:	d1d5      	bne.n	80096b8 <__sfp+0x24>
 800970c:	f7ff ff78 	bl	8009600 <__sfp_lock_release>
 8009710:	230c      	movs	r3, #12
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	e7ee      	b.n	80096f4 <__sfp+0x60>
 8009716:	bf00      	nop
 8009718:	0800a8d8 	.word	0x0800a8d8
 800971c:	ffff0001 	.word	0xffff0001

08009720 <_fwalk_reent>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4606      	mov	r6, r0
 8009726:	4688      	mov	r8, r1
 8009728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800972c:	2700      	movs	r7, #0
 800972e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009732:	f1b9 0901 	subs.w	r9, r9, #1
 8009736:	d505      	bpl.n	8009744 <_fwalk_reent+0x24>
 8009738:	6824      	ldr	r4, [r4, #0]
 800973a:	2c00      	cmp	r4, #0
 800973c:	d1f7      	bne.n	800972e <_fwalk_reent+0xe>
 800973e:	4638      	mov	r0, r7
 8009740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009744:	89ab      	ldrh	r3, [r5, #12]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d907      	bls.n	800975a <_fwalk_reent+0x3a>
 800974a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800974e:	3301      	adds	r3, #1
 8009750:	d003      	beq.n	800975a <_fwalk_reent+0x3a>
 8009752:	4629      	mov	r1, r5
 8009754:	4630      	mov	r0, r6
 8009756:	47c0      	blx	r8
 8009758:	4307      	orrs	r7, r0
 800975a:	3568      	adds	r5, #104	; 0x68
 800975c:	e7e9      	b.n	8009732 <_fwalk_reent+0x12>

0800975e <__retarget_lock_init_recursive>:
 800975e:	4770      	bx	lr

08009760 <__retarget_lock_acquire_recursive>:
 8009760:	4770      	bx	lr

08009762 <__retarget_lock_release_recursive>:
 8009762:	4770      	bx	lr

08009764 <__swhatbuf_r>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	460e      	mov	r6, r1
 8009768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976c:	2900      	cmp	r1, #0
 800976e:	b096      	sub	sp, #88	; 0x58
 8009770:	4614      	mov	r4, r2
 8009772:	461d      	mov	r5, r3
 8009774:	da08      	bge.n	8009788 <__swhatbuf_r+0x24>
 8009776:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	602a      	str	r2, [r5, #0]
 800977e:	061a      	lsls	r2, r3, #24
 8009780:	d410      	bmi.n	80097a4 <__swhatbuf_r+0x40>
 8009782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009786:	e00e      	b.n	80097a6 <__swhatbuf_r+0x42>
 8009788:	466a      	mov	r2, sp
 800978a:	f000 f903 	bl	8009994 <_fstat_r>
 800978e:	2800      	cmp	r0, #0
 8009790:	dbf1      	blt.n	8009776 <__swhatbuf_r+0x12>
 8009792:	9a01      	ldr	r2, [sp, #4]
 8009794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800979c:	425a      	negs	r2, r3
 800979e:	415a      	adcs	r2, r3
 80097a0:	602a      	str	r2, [r5, #0]
 80097a2:	e7ee      	b.n	8009782 <__swhatbuf_r+0x1e>
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	2000      	movs	r0, #0
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	b016      	add	sp, #88	; 0x58
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080097b0 <__smakebuf_r>:
 80097b0:	898b      	ldrh	r3, [r1, #12]
 80097b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097b4:	079d      	lsls	r5, r3, #30
 80097b6:	4606      	mov	r6, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	d507      	bpl.n	80097cc <__smakebuf_r+0x1c>
 80097bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	2301      	movs	r3, #1
 80097c6:	6163      	str	r3, [r4, #20]
 80097c8:	b002      	add	sp, #8
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	ab01      	add	r3, sp, #4
 80097ce:	466a      	mov	r2, sp
 80097d0:	f7ff ffc8 	bl	8009764 <__swhatbuf_r>
 80097d4:	9900      	ldr	r1, [sp, #0]
 80097d6:	4605      	mov	r5, r0
 80097d8:	4630      	mov	r0, r6
 80097da:	f7ff f963 	bl	8008aa4 <_malloc_r>
 80097de:	b948      	cbnz	r0, 80097f4 <__smakebuf_r+0x44>
 80097e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e4:	059a      	lsls	r2, r3, #22
 80097e6:	d4ef      	bmi.n	80097c8 <__smakebuf_r+0x18>
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	f043 0302 	orr.w	r3, r3, #2
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	e7e3      	b.n	80097bc <__smakebuf_r+0xc>
 80097f4:	4b0d      	ldr	r3, [pc, #52]	; (800982c <__smakebuf_r+0x7c>)
 80097f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	6163      	str	r3, [r4, #20]
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	6120      	str	r0, [r4, #16]
 800980a:	b15b      	cbz	r3, 8009824 <__smakebuf_r+0x74>
 800980c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009810:	4630      	mov	r0, r6
 8009812:	f000 f8d1 	bl	80099b8 <_isatty_r>
 8009816:	b128      	cbz	r0, 8009824 <__smakebuf_r+0x74>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	89a0      	ldrh	r0, [r4, #12]
 8009826:	4305      	orrs	r5, r0
 8009828:	81a5      	strh	r5, [r4, #12]
 800982a:	e7cd      	b.n	80097c8 <__smakebuf_r+0x18>
 800982c:	080095bd 	.word	0x080095bd

08009830 <_malloc_usable_size_r>:
 8009830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009834:	1f18      	subs	r0, r3, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	bfbc      	itt	lt
 800983a:	580b      	ldrlt	r3, [r1, r0]
 800983c:	18c0      	addlt	r0, r0, r3
 800983e:	4770      	bx	lr

08009840 <_raise_r>:
 8009840:	291f      	cmp	r1, #31
 8009842:	b538      	push	{r3, r4, r5, lr}
 8009844:	4604      	mov	r4, r0
 8009846:	460d      	mov	r5, r1
 8009848:	d904      	bls.n	8009854 <_raise_r+0x14>
 800984a:	2316      	movs	r3, #22
 800984c:	6003      	str	r3, [r0, #0]
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009856:	b112      	cbz	r2, 800985e <_raise_r+0x1e>
 8009858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800985c:	b94b      	cbnz	r3, 8009872 <_raise_r+0x32>
 800985e:	4620      	mov	r0, r4
 8009860:	f000 f830 	bl	80098c4 <_getpid_r>
 8009864:	462a      	mov	r2, r5
 8009866:	4601      	mov	r1, r0
 8009868:	4620      	mov	r0, r4
 800986a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986e:	f000 b817 	b.w	80098a0 <_kill_r>
 8009872:	2b01      	cmp	r3, #1
 8009874:	d00a      	beq.n	800988c <_raise_r+0x4c>
 8009876:	1c59      	adds	r1, r3, #1
 8009878:	d103      	bne.n	8009882 <_raise_r+0x42>
 800987a:	2316      	movs	r3, #22
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	2001      	movs	r0, #1
 8009880:	e7e7      	b.n	8009852 <_raise_r+0x12>
 8009882:	2400      	movs	r4, #0
 8009884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009888:	4628      	mov	r0, r5
 800988a:	4798      	blx	r3
 800988c:	2000      	movs	r0, #0
 800988e:	e7e0      	b.n	8009852 <_raise_r+0x12>

08009890 <raise>:
 8009890:	4b02      	ldr	r3, [pc, #8]	; (800989c <raise+0xc>)
 8009892:	4601      	mov	r1, r0
 8009894:	6818      	ldr	r0, [r3, #0]
 8009896:	f7ff bfd3 	b.w	8009840 <_raise_r>
 800989a:	bf00      	nop
 800989c:	2000000c 	.word	0x2000000c

080098a0 <_kill_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d07      	ldr	r5, [pc, #28]	; (80098c0 <_kill_r+0x20>)
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	f7f8 fe20 	bl	80024f2 <_kill>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	d102      	bne.n	80098bc <_kill_r+0x1c>
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	b103      	cbz	r3, 80098bc <_kill_r+0x1c>
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	20000574 	.word	0x20000574

080098c4 <_getpid_r>:
 80098c4:	f7f8 be0d 	b.w	80024e2 <_getpid>

080098c8 <__sread>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	460c      	mov	r4, r1
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	f000 f894 	bl	80099fc <_read_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	bfab      	itete	ge
 80098d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098da:	89a3      	ldrhlt	r3, [r4, #12]
 80098dc:	181b      	addge	r3, r3, r0
 80098de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098e2:	bfac      	ite	ge
 80098e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098e6:	81a3      	strhlt	r3, [r4, #12]
 80098e8:	bd10      	pop	{r4, pc}

080098ea <__swrite>:
 80098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	461f      	mov	r7, r3
 80098f0:	898b      	ldrh	r3, [r1, #12]
 80098f2:	05db      	lsls	r3, r3, #23
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4616      	mov	r6, r2
 80098fa:	d505      	bpl.n	8009908 <__swrite+0x1e>
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2302      	movs	r3, #2
 8009902:	2200      	movs	r2, #0
 8009904:	f000 f868 	bl	80099d8 <_lseek_r>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	4628      	mov	r0, r5
 800991a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	f000 b817 	b.w	8009950 <_write_r>

08009922 <__sseek>:
 8009922:	b510      	push	{r4, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 f855 	bl	80099d8 <_lseek_r>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	bf15      	itete	ne
 8009934:	6560      	strne	r0, [r4, #84]	; 0x54
 8009936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800993a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800993e:	81a3      	strheq	r3, [r4, #12]
 8009940:	bf18      	it	ne
 8009942:	81a3      	strhne	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__sclose>:
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 b813 	b.w	8009974 <_close_r>
	...

08009950 <_write_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d07      	ldr	r5, [pc, #28]	; (8009970 <_write_r+0x20>)
 8009954:	4604      	mov	r4, r0
 8009956:	4608      	mov	r0, r1
 8009958:	4611      	mov	r1, r2
 800995a:	2200      	movs	r2, #0
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f7f8 fdfe 	bl	8002560 <_write>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_write_r+0x1e>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_write_r+0x1e>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20000574 	.word	0x20000574

08009974 <_close_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d06      	ldr	r5, [pc, #24]	; (8009990 <_close_r+0x1c>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	f7f8 fe0a 	bl	8002598 <_close>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_close_r+0x1a>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_close_r+0x1a>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	20000574 	.word	0x20000574

08009994 <_fstat_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d07      	ldr	r5, [pc, #28]	; (80099b4 <_fstat_r+0x20>)
 8009998:	2300      	movs	r3, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	f7f8 fe05 	bl	80025b0 <_fstat>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d102      	bne.n	80099b0 <_fstat_r+0x1c>
 80099aa:	682b      	ldr	r3, [r5, #0]
 80099ac:	b103      	cbz	r3, 80099b0 <_fstat_r+0x1c>
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
 80099b2:	bf00      	nop
 80099b4:	20000574 	.word	0x20000574

080099b8 <_isatty_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d06      	ldr	r5, [pc, #24]	; (80099d4 <_isatty_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	602b      	str	r3, [r5, #0]
 80099c4:	f7f8 fe04 	bl	80025d0 <_isatty>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_isatty_r+0x1a>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_isatty_r+0x1a>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000574 	.word	0x20000574

080099d8 <_lseek_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	; (80099f8 <_lseek_r+0x20>)
 80099dc:	4604      	mov	r4, r0
 80099de:	4608      	mov	r0, r1
 80099e0:	4611      	mov	r1, r2
 80099e2:	2200      	movs	r2, #0
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f7f8 fdfd 	bl	80025e6 <_lseek>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_lseek_r+0x1e>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_lseek_r+0x1e>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	20000574 	.word	0x20000574

080099fc <_read_r>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4d07      	ldr	r5, [pc, #28]	; (8009a1c <_read_r+0x20>)
 8009a00:	4604      	mov	r4, r0
 8009a02:	4608      	mov	r0, r1
 8009a04:	4611      	mov	r1, r2
 8009a06:	2200      	movs	r2, #0
 8009a08:	602a      	str	r2, [r5, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	f7f8 fd8b 	bl	8002526 <_read>
 8009a10:	1c43      	adds	r3, r0, #1
 8009a12:	d102      	bne.n	8009a1a <_read_r+0x1e>
 8009a14:	682b      	ldr	r3, [r5, #0]
 8009a16:	b103      	cbz	r3, 8009a1a <_read_r+0x1e>
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	bd38      	pop	{r3, r4, r5, pc}
 8009a1c:	20000574 	.word	0x20000574

08009a20 <pow>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	ed2d 8b02 	vpush	{d8}
 8009a26:	eeb0 8a40 	vmov.f32	s16, s0
 8009a2a:	eef0 8a60 	vmov.f32	s17, s1
 8009a2e:	ec55 4b11 	vmov	r4, r5, d1
 8009a32:	f000 f865 	bl	8009b00 <__ieee754_pow>
 8009a36:	4622      	mov	r2, r4
 8009a38:	462b      	mov	r3, r5
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	ec57 6b10 	vmov	r6, r7, d0
 8009a42:	f7f7 f893 	bl	8000b6c <__aeabi_dcmpun>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d13b      	bne.n	8009ac2 <pow+0xa2>
 8009a4a:	ec51 0b18 	vmov	r0, r1, d8
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2300      	movs	r3, #0
 8009a52:	f7f7 f859 	bl	8000b08 <__aeabi_dcmpeq>
 8009a56:	b1b8      	cbz	r0, 8009a88 <pow+0x68>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f7 f852 	bl	8000b08 <__aeabi_dcmpeq>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d146      	bne.n	8009af6 <pow+0xd6>
 8009a68:	ec45 4b10 	vmov	d0, r4, r5
 8009a6c:	f000 fe61 	bl	800a732 <finite>
 8009a70:	b338      	cbz	r0, 8009ac2 <pow+0xa2>
 8009a72:	2200      	movs	r2, #0
 8009a74:	2300      	movs	r3, #0
 8009a76:	4620      	mov	r0, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	f7f7 f84f 	bl	8000b1c <__aeabi_dcmplt>
 8009a7e:	b300      	cbz	r0, 8009ac2 <pow+0xa2>
 8009a80:	f7fd f8ba 	bl	8006bf8 <__errno>
 8009a84:	2322      	movs	r3, #34	; 0x22
 8009a86:	e01b      	b.n	8009ac0 <pow+0xa0>
 8009a88:	ec47 6b10 	vmov	d0, r6, r7
 8009a8c:	f000 fe51 	bl	800a732 <finite>
 8009a90:	b9e0      	cbnz	r0, 8009acc <pow+0xac>
 8009a92:	eeb0 0a48 	vmov.f32	s0, s16
 8009a96:	eef0 0a68 	vmov.f32	s1, s17
 8009a9a:	f000 fe4a 	bl	800a732 <finite>
 8009a9e:	b1a8      	cbz	r0, 8009acc <pow+0xac>
 8009aa0:	ec45 4b10 	vmov	d0, r4, r5
 8009aa4:	f000 fe45 	bl	800a732 <finite>
 8009aa8:	b180      	cbz	r0, 8009acc <pow+0xac>
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	f7f7 f85b 	bl	8000b6c <__aeabi_dcmpun>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d0e2      	beq.n	8009a80 <pow+0x60>
 8009aba:	f7fd f89d 	bl	8006bf8 <__errno>
 8009abe:	2321      	movs	r3, #33	; 0x21
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	ecbd 8b02 	vpop	{d8}
 8009ac6:	ec47 6b10 	vmov	d0, r6, r7
 8009aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	f7f7 f818 	bl	8000b08 <__aeabi_dcmpeq>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d0f2      	beq.n	8009ac2 <pow+0xa2>
 8009adc:	eeb0 0a48 	vmov.f32	s0, s16
 8009ae0:	eef0 0a68 	vmov.f32	s1, s17
 8009ae4:	f000 fe25 	bl	800a732 <finite>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d0ea      	beq.n	8009ac2 <pow+0xa2>
 8009aec:	ec45 4b10 	vmov	d0, r4, r5
 8009af0:	f000 fe1f 	bl	800a732 <finite>
 8009af4:	e7c3      	b.n	8009a7e <pow+0x5e>
 8009af6:	4f01      	ldr	r7, [pc, #4]	; (8009afc <pow+0xdc>)
 8009af8:	2600      	movs	r6, #0
 8009afa:	e7e2      	b.n	8009ac2 <pow+0xa2>
 8009afc:	3ff00000 	.word	0x3ff00000

08009b00 <__ieee754_pow>:
 8009b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	ed2d 8b06 	vpush	{d8-d10}
 8009b08:	b089      	sub	sp, #36	; 0x24
 8009b0a:	ed8d 1b00 	vstr	d1, [sp]
 8009b0e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009b12:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009b16:	ea58 0102 	orrs.w	r1, r8, r2
 8009b1a:	ec57 6b10 	vmov	r6, r7, d0
 8009b1e:	d115      	bne.n	8009b4c <__ieee754_pow+0x4c>
 8009b20:	19b3      	adds	r3, r6, r6
 8009b22:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009b26:	4152      	adcs	r2, r2
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	4b89      	ldr	r3, [pc, #548]	; (8009d50 <__ieee754_pow+0x250>)
 8009b2c:	4193      	sbcs	r3, r2
 8009b2e:	f080 84d2 	bcs.w	800a4d6 <__ieee754_pow+0x9d6>
 8009b32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fbc7 	bl	80002cc <__adddf3>
 8009b3e:	ec41 0b10 	vmov	d0, r0, r1
 8009b42:	b009      	add	sp, #36	; 0x24
 8009b44:	ecbd 8b06 	vpop	{d8-d10}
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	4b81      	ldr	r3, [pc, #516]	; (8009d54 <__ieee754_pow+0x254>)
 8009b4e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009b52:	429c      	cmp	r4, r3
 8009b54:	ee10 aa10 	vmov	sl, s0
 8009b58:	463d      	mov	r5, r7
 8009b5a:	dc06      	bgt.n	8009b6a <__ieee754_pow+0x6a>
 8009b5c:	d101      	bne.n	8009b62 <__ieee754_pow+0x62>
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	d1e7      	bne.n	8009b32 <__ieee754_pow+0x32>
 8009b62:	4598      	cmp	r8, r3
 8009b64:	dc01      	bgt.n	8009b6a <__ieee754_pow+0x6a>
 8009b66:	d10f      	bne.n	8009b88 <__ieee754_pow+0x88>
 8009b68:	b172      	cbz	r2, 8009b88 <__ieee754_pow+0x88>
 8009b6a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009b6e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009b72:	ea55 050a 	orrs.w	r5, r5, sl
 8009b76:	d1dc      	bne.n	8009b32 <__ieee754_pow+0x32>
 8009b78:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b7c:	18db      	adds	r3, r3, r3
 8009b7e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009b82:	4152      	adcs	r2, r2
 8009b84:	429d      	cmp	r5, r3
 8009b86:	e7d0      	b.n	8009b2a <__ieee754_pow+0x2a>
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	da3b      	bge.n	8009c04 <__ieee754_pow+0x104>
 8009b8c:	4b72      	ldr	r3, [pc, #456]	; (8009d58 <__ieee754_pow+0x258>)
 8009b8e:	4598      	cmp	r8, r3
 8009b90:	dc51      	bgt.n	8009c36 <__ieee754_pow+0x136>
 8009b92:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009b96:	4598      	cmp	r8, r3
 8009b98:	f340 84ac 	ble.w	800a4f4 <__ieee754_pow+0x9f4>
 8009b9c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ba0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ba4:	2b14      	cmp	r3, #20
 8009ba6:	dd0f      	ble.n	8009bc8 <__ieee754_pow+0xc8>
 8009ba8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009bac:	fa22 f103 	lsr.w	r1, r2, r3
 8009bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	f040 849d 	bne.w	800a4f4 <__ieee754_pow+0x9f4>
 8009bba:	f001 0101 	and.w	r1, r1, #1
 8009bbe:	f1c1 0302 	rsb	r3, r1, #2
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	b182      	cbz	r2, 8009be8 <__ieee754_pow+0xe8>
 8009bc6:	e05f      	b.n	8009c88 <__ieee754_pow+0x188>
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	d15b      	bne.n	8009c84 <__ieee754_pow+0x184>
 8009bcc:	f1c3 0314 	rsb	r3, r3, #20
 8009bd0:	fa48 f103 	asr.w	r1, r8, r3
 8009bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bd8:	4543      	cmp	r3, r8
 8009bda:	f040 8488 	bne.w	800a4ee <__ieee754_pow+0x9ee>
 8009bde:	f001 0101 	and.w	r1, r1, #1
 8009be2:	f1c1 0302 	rsb	r3, r1, #2
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	4b5c      	ldr	r3, [pc, #368]	; (8009d5c <__ieee754_pow+0x25c>)
 8009bea:	4598      	cmp	r8, r3
 8009bec:	d132      	bne.n	8009c54 <__ieee754_pow+0x154>
 8009bee:	f1b9 0f00 	cmp.w	r9, #0
 8009bf2:	f280 8478 	bge.w	800a4e6 <__ieee754_pow+0x9e6>
 8009bf6:	4959      	ldr	r1, [pc, #356]	; (8009d5c <__ieee754_pow+0x25c>)
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	f7f6 fe45 	bl	800088c <__aeabi_ddiv>
 8009c02:	e79c      	b.n	8009b3e <__ieee754_pow+0x3e>
 8009c04:	2300      	movs	r3, #0
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	2a00      	cmp	r2, #0
 8009c0a:	d13d      	bne.n	8009c88 <__ieee754_pow+0x188>
 8009c0c:	4b51      	ldr	r3, [pc, #324]	; (8009d54 <__ieee754_pow+0x254>)
 8009c0e:	4598      	cmp	r8, r3
 8009c10:	d1ea      	bne.n	8009be8 <__ieee754_pow+0xe8>
 8009c12:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009c16:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c1a:	ea53 030a 	orrs.w	r3, r3, sl
 8009c1e:	f000 845a 	beq.w	800a4d6 <__ieee754_pow+0x9d6>
 8009c22:	4b4f      	ldr	r3, [pc, #316]	; (8009d60 <__ieee754_pow+0x260>)
 8009c24:	429c      	cmp	r4, r3
 8009c26:	dd08      	ble.n	8009c3a <__ieee754_pow+0x13a>
 8009c28:	f1b9 0f00 	cmp.w	r9, #0
 8009c2c:	f2c0 8457 	blt.w	800a4de <__ieee754_pow+0x9de>
 8009c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c34:	e783      	b.n	8009b3e <__ieee754_pow+0x3e>
 8009c36:	2302      	movs	r3, #2
 8009c38:	e7e5      	b.n	8009c06 <__ieee754_pow+0x106>
 8009c3a:	f1b9 0f00 	cmp.w	r9, #0
 8009c3e:	f04f 0000 	mov.w	r0, #0
 8009c42:	f04f 0100 	mov.w	r1, #0
 8009c46:	f6bf af7a 	bge.w	8009b3e <__ieee754_pow+0x3e>
 8009c4a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c52:	e774      	b.n	8009b3e <__ieee754_pow+0x3e>
 8009c54:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009c58:	d106      	bne.n	8009c68 <__ieee754_pow+0x168>
 8009c5a:	4632      	mov	r2, r6
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	4630      	mov	r0, r6
 8009c60:	4639      	mov	r1, r7
 8009c62:	f7f6 fce9 	bl	8000638 <__aeabi_dmul>
 8009c66:	e76a      	b.n	8009b3e <__ieee754_pow+0x3e>
 8009c68:	4b3e      	ldr	r3, [pc, #248]	; (8009d64 <__ieee754_pow+0x264>)
 8009c6a:	4599      	cmp	r9, r3
 8009c6c:	d10c      	bne.n	8009c88 <__ieee754_pow+0x188>
 8009c6e:	2d00      	cmp	r5, #0
 8009c70:	db0a      	blt.n	8009c88 <__ieee754_pow+0x188>
 8009c72:	ec47 6b10 	vmov	d0, r6, r7
 8009c76:	b009      	add	sp, #36	; 0x24
 8009c78:	ecbd 8b06 	vpop	{d8-d10}
 8009c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	f000 bc6c 	b.w	800a55c <__ieee754_sqrt>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9304      	str	r3, [sp, #16]
 8009c88:	ec47 6b10 	vmov	d0, r6, r7
 8009c8c:	f000 fd48 	bl	800a720 <fabs>
 8009c90:	ec51 0b10 	vmov	r0, r1, d0
 8009c94:	f1ba 0f00 	cmp.w	sl, #0
 8009c98:	d129      	bne.n	8009cee <__ieee754_pow+0x1ee>
 8009c9a:	b124      	cbz	r4, 8009ca6 <__ieee754_pow+0x1a6>
 8009c9c:	4b2f      	ldr	r3, [pc, #188]	; (8009d5c <__ieee754_pow+0x25c>)
 8009c9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d123      	bne.n	8009cee <__ieee754_pow+0x1ee>
 8009ca6:	f1b9 0f00 	cmp.w	r9, #0
 8009caa:	da05      	bge.n	8009cb8 <__ieee754_pow+0x1b8>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	492a      	ldr	r1, [pc, #168]	; (8009d5c <__ieee754_pow+0x25c>)
 8009cb4:	f7f6 fdea 	bl	800088c <__aeabi_ddiv>
 8009cb8:	2d00      	cmp	r5, #0
 8009cba:	f6bf af40 	bge.w	8009b3e <__ieee754_pow+0x3e>
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009cc4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009cc8:	4323      	orrs	r3, r4
 8009cca:	d108      	bne.n	8009cde <__ieee754_pow+0x1de>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f7f6 faf8 	bl	80002c8 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	e78f      	b.n	8009bfe <__ieee754_pow+0xfe>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	f47f af2c 	bne.w	8009b3e <__ieee754_pow+0x3e>
 8009ce6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cea:	4619      	mov	r1, r3
 8009cec:	e727      	b.n	8009b3e <__ieee754_pow+0x3e>
 8009cee:	0feb      	lsrs	r3, r5, #31
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	9306      	str	r3, [sp, #24]
 8009cf4:	9a06      	ldr	r2, [sp, #24]
 8009cf6:	9b04      	ldr	r3, [sp, #16]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	d102      	bne.n	8009d02 <__ieee754_pow+0x202>
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	e7e6      	b.n	8009cd0 <__ieee754_pow+0x1d0>
 8009d02:	4b19      	ldr	r3, [pc, #100]	; (8009d68 <__ieee754_pow+0x268>)
 8009d04:	4598      	cmp	r8, r3
 8009d06:	f340 80fb 	ble.w	8009f00 <__ieee754_pow+0x400>
 8009d0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009d0e:	4598      	cmp	r8, r3
 8009d10:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <__ieee754_pow+0x260>)
 8009d12:	dd0c      	ble.n	8009d2e <__ieee754_pow+0x22e>
 8009d14:	429c      	cmp	r4, r3
 8009d16:	dc0f      	bgt.n	8009d38 <__ieee754_pow+0x238>
 8009d18:	f1b9 0f00 	cmp.w	r9, #0
 8009d1c:	da0f      	bge.n	8009d3e <__ieee754_pow+0x23e>
 8009d1e:	2000      	movs	r0, #0
 8009d20:	b009      	add	sp, #36	; 0x24
 8009d22:	ecbd 8b06 	vpop	{d8-d10}
 8009d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	f000 bcf0 	b.w	800a70e <__math_oflow>
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	dbf2      	blt.n	8009d18 <__ieee754_pow+0x218>
 8009d32:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <__ieee754_pow+0x25c>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	dd19      	ble.n	8009d6c <__ieee754_pow+0x26c>
 8009d38:	f1b9 0f00 	cmp.w	r9, #0
 8009d3c:	dcef      	bgt.n	8009d1e <__ieee754_pow+0x21e>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	b009      	add	sp, #36	; 0x24
 8009d42:	ecbd 8b06 	vpop	{d8-d10}
 8009d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f000 bcd7 	b.w	800a6fc <__math_uflow>
 8009d4e:	bf00      	nop
 8009d50:	fff00000 	.word	0xfff00000
 8009d54:	7ff00000 	.word	0x7ff00000
 8009d58:	433fffff 	.word	0x433fffff
 8009d5c:	3ff00000 	.word	0x3ff00000
 8009d60:	3fefffff 	.word	0x3fefffff
 8009d64:	3fe00000 	.word	0x3fe00000
 8009d68:	41e00000 	.word	0x41e00000
 8009d6c:	4b60      	ldr	r3, [pc, #384]	; (8009ef0 <__ieee754_pow+0x3f0>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f7f6 faaa 	bl	80002c8 <__aeabi_dsub>
 8009d74:	a354      	add	r3, pc, #336	; (adr r3, 8009ec8 <__ieee754_pow+0x3c8>)
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	f7f6 fc5b 	bl	8000638 <__aeabi_dmul>
 8009d82:	a353      	add	r3, pc, #332	; (adr r3, 8009ed0 <__ieee754_pow+0x3d0>)
 8009d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d88:	4606      	mov	r6, r0
 8009d8a:	460f      	mov	r7, r1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fc52 	bl	8000638 <__aeabi_dmul>
 8009d94:	4b57      	ldr	r3, [pc, #348]	; (8009ef4 <__ieee754_pow+0x3f4>)
 8009d96:	4682      	mov	sl, r0
 8009d98:	468b      	mov	fp, r1
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	4629      	mov	r1, r5
 8009da0:	f7f6 fc4a 	bl	8000638 <__aeabi_dmul>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	a14b      	add	r1, pc, #300	; (adr r1, 8009ed8 <__ieee754_pow+0x3d8>)
 8009daa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dae:	f7f6 fa8b 	bl	80002c8 <__aeabi_dsub>
 8009db2:	4622      	mov	r2, r4
 8009db4:	462b      	mov	r3, r5
 8009db6:	f7f6 fc3f 	bl	8000638 <__aeabi_dmul>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	494d      	ldr	r1, [pc, #308]	; (8009ef8 <__ieee754_pow+0x3f8>)
 8009dc2:	f7f6 fa81 	bl	80002c8 <__aeabi_dsub>
 8009dc6:	4622      	mov	r2, r4
 8009dc8:	4680      	mov	r8, r0
 8009dca:	4689      	mov	r9, r1
 8009dcc:	462b      	mov	r3, r5
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fc31 	bl	8000638 <__aeabi_dmul>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4640      	mov	r0, r8
 8009ddc:	4649      	mov	r1, r9
 8009dde:	f7f6 fc2b 	bl	8000638 <__aeabi_dmul>
 8009de2:	a33f      	add	r3, pc, #252	; (adr r3, 8009ee0 <__ieee754_pow+0x3e0>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 fc26 	bl	8000638 <__aeabi_dmul>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4650      	mov	r0, sl
 8009df2:	4659      	mov	r1, fp
 8009df4:	f7f6 fa68 	bl	80002c8 <__aeabi_dsub>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	4689      	mov	r9, r1
 8009e00:	4630      	mov	r0, r6
 8009e02:	4639      	mov	r1, r7
 8009e04:	f7f6 fa62 	bl	80002cc <__adddf3>
 8009e08:	2000      	movs	r0, #0
 8009e0a:	4632      	mov	r2, r6
 8009e0c:	463b      	mov	r3, r7
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	f7f6 fa59 	bl	80002c8 <__aeabi_dsub>
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fa53 	bl	80002c8 <__aeabi_dsub>
 8009e22:	9b04      	ldr	r3, [sp, #16]
 8009e24:	9a06      	ldr	r2, [sp, #24]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	4682      	mov	sl, r0
 8009e2c:	468b      	mov	fp, r1
 8009e2e:	f040 81e7 	bne.w	800a200 <__ieee754_pow+0x700>
 8009e32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009ee8 <__ieee754_pow+0x3e8>
 8009e36:	eeb0 8a47 	vmov.f32	s16, s14
 8009e3a:	eef0 8a67 	vmov.f32	s17, s15
 8009e3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e42:	2600      	movs	r6, #0
 8009e44:	4632      	mov	r2, r6
 8009e46:	463b      	mov	r3, r7
 8009e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e4c:	f7f6 fa3c 	bl	80002c8 <__aeabi_dsub>
 8009e50:	4622      	mov	r2, r4
 8009e52:	462b      	mov	r3, r5
 8009e54:	f7f6 fbf0 	bl	8000638 <__aeabi_dmul>
 8009e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	4689      	mov	r9, r1
 8009e60:	4650      	mov	r0, sl
 8009e62:	4659      	mov	r1, fp
 8009e64:	f7f6 fbe8 	bl	8000638 <__aeabi_dmul>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4640      	mov	r0, r8
 8009e6e:	4649      	mov	r1, r9
 8009e70:	f7f6 fa2c 	bl	80002cc <__adddf3>
 8009e74:	4632      	mov	r2, r6
 8009e76:	463b      	mov	r3, r7
 8009e78:	4680      	mov	r8, r0
 8009e7a:	4689      	mov	r9, r1
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 fbda 	bl	8000638 <__aeabi_dmul>
 8009e84:	460b      	mov	r3, r1
 8009e86:	4604      	mov	r4, r0
 8009e88:	460d      	mov	r5, r1
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	4649      	mov	r1, r9
 8009e8e:	4640      	mov	r0, r8
 8009e90:	f7f6 fa1c 	bl	80002cc <__adddf3>
 8009e94:	4b19      	ldr	r3, [pc, #100]	; (8009efc <__ieee754_pow+0x3fc>)
 8009e96:	4299      	cmp	r1, r3
 8009e98:	ec45 4b19 	vmov	d9, r4, r5
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	460f      	mov	r7, r1
 8009ea0:	468b      	mov	fp, r1
 8009ea2:	f340 82f1 	ble.w	800a488 <__ieee754_pow+0x988>
 8009ea6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009eaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009eae:	4303      	orrs	r3, r0
 8009eb0:	f000 81e4 	beq.w	800a27c <__ieee754_pow+0x77c>
 8009eb4:	ec51 0b18 	vmov	r0, r1, d8
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f7f6 fe2e 	bl	8000b1c <__aeabi_dcmplt>
 8009ec0:	3800      	subs	r0, #0
 8009ec2:	bf18      	it	ne
 8009ec4:	2001      	movne	r0, #1
 8009ec6:	e72b      	b.n	8009d20 <__ieee754_pow+0x220>
 8009ec8:	60000000 	.word	0x60000000
 8009ecc:	3ff71547 	.word	0x3ff71547
 8009ed0:	f85ddf44 	.word	0xf85ddf44
 8009ed4:	3e54ae0b 	.word	0x3e54ae0b
 8009ed8:	55555555 	.word	0x55555555
 8009edc:	3fd55555 	.word	0x3fd55555
 8009ee0:	652b82fe 	.word	0x652b82fe
 8009ee4:	3ff71547 	.word	0x3ff71547
 8009ee8:	00000000 	.word	0x00000000
 8009eec:	bff00000 	.word	0xbff00000
 8009ef0:	3ff00000 	.word	0x3ff00000
 8009ef4:	3fd00000 	.word	0x3fd00000
 8009ef8:	3fe00000 	.word	0x3fe00000
 8009efc:	408fffff 	.word	0x408fffff
 8009f00:	4bd5      	ldr	r3, [pc, #852]	; (800a258 <__ieee754_pow+0x758>)
 8009f02:	402b      	ands	r3, r5
 8009f04:	2200      	movs	r2, #0
 8009f06:	b92b      	cbnz	r3, 8009f14 <__ieee754_pow+0x414>
 8009f08:	4bd4      	ldr	r3, [pc, #848]	; (800a25c <__ieee754_pow+0x75c>)
 8009f0a:	f7f6 fb95 	bl	8000638 <__aeabi_dmul>
 8009f0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009f12:	460c      	mov	r4, r1
 8009f14:	1523      	asrs	r3, r4, #20
 8009f16:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009f1a:	4413      	add	r3, r2
 8009f1c:	9305      	str	r3, [sp, #20]
 8009f1e:	4bd0      	ldr	r3, [pc, #832]	; (800a260 <__ieee754_pow+0x760>)
 8009f20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009f24:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009f28:	429c      	cmp	r4, r3
 8009f2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f2e:	dd08      	ble.n	8009f42 <__ieee754_pow+0x442>
 8009f30:	4bcc      	ldr	r3, [pc, #816]	; (800a264 <__ieee754_pow+0x764>)
 8009f32:	429c      	cmp	r4, r3
 8009f34:	f340 8162 	ble.w	800a1fc <__ieee754_pow+0x6fc>
 8009f38:	9b05      	ldr	r3, [sp, #20]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	9305      	str	r3, [sp, #20]
 8009f3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009f42:	2400      	movs	r4, #0
 8009f44:	00e3      	lsls	r3, r4, #3
 8009f46:	9307      	str	r3, [sp, #28]
 8009f48:	4bc7      	ldr	r3, [pc, #796]	; (800a268 <__ieee754_pow+0x768>)
 8009f4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f4e:	ed93 7b00 	vldr	d7, [r3]
 8009f52:	4629      	mov	r1, r5
 8009f54:	ec53 2b17 	vmov	r2, r3, d7
 8009f58:	eeb0 9a47 	vmov.f32	s18, s14
 8009f5c:	eef0 9a67 	vmov.f32	s19, s15
 8009f60:	4682      	mov	sl, r0
 8009f62:	f7f6 f9b1 	bl	80002c8 <__aeabi_dsub>
 8009f66:	4652      	mov	r2, sl
 8009f68:	4606      	mov	r6, r0
 8009f6a:	460f      	mov	r7, r1
 8009f6c:	462b      	mov	r3, r5
 8009f6e:	ec51 0b19 	vmov	r0, r1, d9
 8009f72:	f7f6 f9ab 	bl	80002cc <__adddf3>
 8009f76:	4602      	mov	r2, r0
 8009f78:	460b      	mov	r3, r1
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	49bb      	ldr	r1, [pc, #748]	; (800a26c <__ieee754_pow+0x76c>)
 8009f7e:	f7f6 fc85 	bl	800088c <__aeabi_ddiv>
 8009f82:	ec41 0b1a 	vmov	d10, r0, r1
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7f6 fb53 	bl	8000638 <__aeabi_dmul>
 8009f92:	2300      	movs	r3, #0
 8009f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f98:	9302      	str	r3, [sp, #8]
 8009f9a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f9e:	46ab      	mov	fp, r5
 8009fa0:	106d      	asrs	r5, r5, #1
 8009fa2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009fa6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009faa:	ec41 0b18 	vmov	d8, r0, r1
 8009fae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	4614      	mov	r4, r2
 8009fba:	461d      	mov	r5, r3
 8009fbc:	f7f6 fb3c 	bl	8000638 <__aeabi_dmul>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f97e 	bl	80002c8 <__aeabi_dsub>
 8009fcc:	ec53 2b19 	vmov	r2, r3, d9
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	f7f6 f976 	bl	80002c8 <__aeabi_dsub>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	4659      	mov	r1, fp
 8009fe4:	f7f6 f970 	bl	80002c8 <__aeabi_dsub>
 8009fe8:	4642      	mov	r2, r8
 8009fea:	464b      	mov	r3, r9
 8009fec:	f7f6 fb24 	bl	8000638 <__aeabi_dmul>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	f7f6 f966 	bl	80002c8 <__aeabi_dsub>
 8009ffc:	ec53 2b1a 	vmov	r2, r3, d10
 800a000:	f7f6 fb1a 	bl	8000638 <__aeabi_dmul>
 800a004:	ec53 2b18 	vmov	r2, r3, d8
 800a008:	ec41 0b19 	vmov	d9, r0, r1
 800a00c:	ec51 0b18 	vmov	r0, r1, d8
 800a010:	f7f6 fb12 	bl	8000638 <__aeabi_dmul>
 800a014:	a37c      	add	r3, pc, #496	; (adr r3, 800a208 <__ieee754_pow+0x708>)
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	4604      	mov	r4, r0
 800a01c:	460d      	mov	r5, r1
 800a01e:	f7f6 fb0b 	bl	8000638 <__aeabi_dmul>
 800a022:	a37b      	add	r3, pc, #492	; (adr r3, 800a210 <__ieee754_pow+0x710>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f7f6 f950 	bl	80002cc <__adddf3>
 800a02c:	4622      	mov	r2, r4
 800a02e:	462b      	mov	r3, r5
 800a030:	f7f6 fb02 	bl	8000638 <__aeabi_dmul>
 800a034:	a378      	add	r3, pc, #480	; (adr r3, 800a218 <__ieee754_pow+0x718>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 f947 	bl	80002cc <__adddf3>
 800a03e:	4622      	mov	r2, r4
 800a040:	462b      	mov	r3, r5
 800a042:	f7f6 faf9 	bl	8000638 <__aeabi_dmul>
 800a046:	a376      	add	r3, pc, #472	; (adr r3, 800a220 <__ieee754_pow+0x720>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 f93e 	bl	80002cc <__adddf3>
 800a050:	4622      	mov	r2, r4
 800a052:	462b      	mov	r3, r5
 800a054:	f7f6 faf0 	bl	8000638 <__aeabi_dmul>
 800a058:	a373      	add	r3, pc, #460	; (adr r3, 800a228 <__ieee754_pow+0x728>)
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	f7f6 f935 	bl	80002cc <__adddf3>
 800a062:	4622      	mov	r2, r4
 800a064:	462b      	mov	r3, r5
 800a066:	f7f6 fae7 	bl	8000638 <__aeabi_dmul>
 800a06a:	a371      	add	r3, pc, #452	; (adr r3, 800a230 <__ieee754_pow+0x730>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 f92c 	bl	80002cc <__adddf3>
 800a074:	4622      	mov	r2, r4
 800a076:	4606      	mov	r6, r0
 800a078:	460f      	mov	r7, r1
 800a07a:	462b      	mov	r3, r5
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 fada 	bl	8000638 <__aeabi_dmul>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 fad4 	bl	8000638 <__aeabi_dmul>
 800a090:	4642      	mov	r2, r8
 800a092:	4604      	mov	r4, r0
 800a094:	460d      	mov	r5, r1
 800a096:	464b      	mov	r3, r9
 800a098:	ec51 0b18 	vmov	r0, r1, d8
 800a09c:	f7f6 f916 	bl	80002cc <__adddf3>
 800a0a0:	ec53 2b19 	vmov	r2, r3, d9
 800a0a4:	f7f6 fac8 	bl	8000638 <__aeabi_dmul>
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	f7f6 f90e 	bl	80002cc <__adddf3>
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	4682      	mov	sl, r0
 800a0b4:	468b      	mov	fp, r1
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	4649      	mov	r1, r9
 800a0bc:	f7f6 fabc 	bl	8000638 <__aeabi_dmul>
 800a0c0:	4b6b      	ldr	r3, [pc, #428]	; (800a270 <__ieee754_pow+0x770>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	460f      	mov	r7, r1
 800a0c8:	f7f6 f900 	bl	80002cc <__adddf3>
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	465b      	mov	r3, fp
 800a0d0:	f7f6 f8fc 	bl	80002cc <__adddf3>
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	460d      	mov	r5, r1
 800a0da:	4602      	mov	r2, r0
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4640      	mov	r0, r8
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	f7f6 faa9 	bl	8000638 <__aeabi_dmul>
 800a0e6:	4b62      	ldr	r3, [pc, #392]	; (800a270 <__ieee754_pow+0x770>)
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	4689      	mov	r9, r1
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 f8e9 	bl	80002c8 <__aeabi_dsub>
 800a0f6:	4632      	mov	r2, r6
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	f7f6 f8e5 	bl	80002c8 <__aeabi_dsub>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4650      	mov	r0, sl
 800a104:	4659      	mov	r1, fp
 800a106:	f7f6 f8df 	bl	80002c8 <__aeabi_dsub>
 800a10a:	ec53 2b18 	vmov	r2, r3, d8
 800a10e:	f7f6 fa93 	bl	8000638 <__aeabi_dmul>
 800a112:	4622      	mov	r2, r4
 800a114:	4606      	mov	r6, r0
 800a116:	460f      	mov	r7, r1
 800a118:	462b      	mov	r3, r5
 800a11a:	ec51 0b19 	vmov	r0, r1, d9
 800a11e:	f7f6 fa8b 	bl	8000638 <__aeabi_dmul>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4630      	mov	r0, r6
 800a128:	4639      	mov	r1, r7
 800a12a:	f7f6 f8cf 	bl	80002cc <__adddf3>
 800a12e:	4606      	mov	r6, r0
 800a130:	460f      	mov	r7, r1
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	4640      	mov	r0, r8
 800a138:	4649      	mov	r1, r9
 800a13a:	f7f6 f8c7 	bl	80002cc <__adddf3>
 800a13e:	a33e      	add	r3, pc, #248	; (adr r3, 800a238 <__ieee754_pow+0x738>)
 800a140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a144:	2000      	movs	r0, #0
 800a146:	4604      	mov	r4, r0
 800a148:	460d      	mov	r5, r1
 800a14a:	f7f6 fa75 	bl	8000638 <__aeabi_dmul>
 800a14e:	4642      	mov	r2, r8
 800a150:	ec41 0b18 	vmov	d8, r0, r1
 800a154:	464b      	mov	r3, r9
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 f8b5 	bl	80002c8 <__aeabi_dsub>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4630      	mov	r0, r6
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 f8af 	bl	80002c8 <__aeabi_dsub>
 800a16a:	a335      	add	r3, pc, #212	; (adr r3, 800a240 <__ieee754_pow+0x740>)
 800a16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a170:	f7f6 fa62 	bl	8000638 <__aeabi_dmul>
 800a174:	a334      	add	r3, pc, #208	; (adr r3, 800a248 <__ieee754_pow+0x748>)
 800a176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fa59 	bl	8000638 <__aeabi_dmul>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 f89d 	bl	80002cc <__adddf3>
 800a192:	9a07      	ldr	r2, [sp, #28]
 800a194:	4b37      	ldr	r3, [pc, #220]	; (800a274 <__ieee754_pow+0x774>)
 800a196:	4413      	add	r3, r2
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 f896 	bl	80002cc <__adddf3>
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	9805      	ldr	r0, [sp, #20]
 800a1a4:	468b      	mov	fp, r1
 800a1a6:	f7f6 f9dd 	bl	8000564 <__aeabi_i2d>
 800a1aa:	9a07      	ldr	r2, [sp, #28]
 800a1ac:	4b32      	ldr	r3, [pc, #200]	; (800a278 <__ieee754_pow+0x778>)
 800a1ae:	4413      	add	r3, r2
 800a1b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	460f      	mov	r7, r1
 800a1b8:	4652      	mov	r2, sl
 800a1ba:	465b      	mov	r3, fp
 800a1bc:	ec51 0b18 	vmov	r0, r1, d8
 800a1c0:	f7f6 f884 	bl	80002cc <__adddf3>
 800a1c4:	4642      	mov	r2, r8
 800a1c6:	464b      	mov	r3, r9
 800a1c8:	f7f6 f880 	bl	80002cc <__adddf3>
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	463b      	mov	r3, r7
 800a1d0:	f7f6 f87c 	bl	80002cc <__adddf3>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	463b      	mov	r3, r7
 800a1da:	4604      	mov	r4, r0
 800a1dc:	460d      	mov	r5, r1
 800a1de:	f7f6 f873 	bl	80002c8 <__aeabi_dsub>
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	f7f6 f86f 	bl	80002c8 <__aeabi_dsub>
 800a1ea:	ec53 2b18 	vmov	r2, r3, d8
 800a1ee:	f7f6 f86b 	bl	80002c8 <__aeabi_dsub>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	e610      	b.n	8009e1e <__ieee754_pow+0x31e>
 800a1fc:	2401      	movs	r4, #1
 800a1fe:	e6a1      	b.n	8009f44 <__ieee754_pow+0x444>
 800a200:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a250 <__ieee754_pow+0x750>
 800a204:	e617      	b.n	8009e36 <__ieee754_pow+0x336>
 800a206:	bf00      	nop
 800a208:	4a454eef 	.word	0x4a454eef
 800a20c:	3fca7e28 	.word	0x3fca7e28
 800a210:	93c9db65 	.word	0x93c9db65
 800a214:	3fcd864a 	.word	0x3fcd864a
 800a218:	a91d4101 	.word	0xa91d4101
 800a21c:	3fd17460 	.word	0x3fd17460
 800a220:	518f264d 	.word	0x518f264d
 800a224:	3fd55555 	.word	0x3fd55555
 800a228:	db6fabff 	.word	0xdb6fabff
 800a22c:	3fdb6db6 	.word	0x3fdb6db6
 800a230:	33333303 	.word	0x33333303
 800a234:	3fe33333 	.word	0x3fe33333
 800a238:	e0000000 	.word	0xe0000000
 800a23c:	3feec709 	.word	0x3feec709
 800a240:	dc3a03fd 	.word	0xdc3a03fd
 800a244:	3feec709 	.word	0x3feec709
 800a248:	145b01f5 	.word	0x145b01f5
 800a24c:	be3e2fe0 	.word	0xbe3e2fe0
 800a250:	00000000 	.word	0x00000000
 800a254:	3ff00000 	.word	0x3ff00000
 800a258:	7ff00000 	.word	0x7ff00000
 800a25c:	43400000 	.word	0x43400000
 800a260:	0003988e 	.word	0x0003988e
 800a264:	000bb679 	.word	0x000bb679
 800a268:	0800acb8 	.word	0x0800acb8
 800a26c:	3ff00000 	.word	0x3ff00000
 800a270:	40080000 	.word	0x40080000
 800a274:	0800acd8 	.word	0x0800acd8
 800a278:	0800acc8 	.word	0x0800acc8
 800a27c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a554 <__ieee754_pow+0xa54>)
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	4640      	mov	r0, r8
 800a284:	4649      	mov	r1, r9
 800a286:	f7f6 f821 	bl	80002cc <__adddf3>
 800a28a:	4622      	mov	r2, r4
 800a28c:	ec41 0b1a 	vmov	d10, r0, r1
 800a290:	462b      	mov	r3, r5
 800a292:	4630      	mov	r0, r6
 800a294:	4639      	mov	r1, r7
 800a296:	f7f6 f817 	bl	80002c8 <__aeabi_dsub>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	ec51 0b1a 	vmov	r0, r1, d10
 800a2a2:	f7f6 fc59 	bl	8000b58 <__aeabi_dcmpgt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	f47f ae04 	bne.w	8009eb4 <__ieee754_pow+0x3b4>
 800a2ac:	4aa4      	ldr	r2, [pc, #656]	; (800a540 <__ieee754_pow+0xa40>)
 800a2ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	f340 8108 	ble.w	800a4c8 <__ieee754_pow+0x9c8>
 800a2b8:	151b      	asrs	r3, r3, #20
 800a2ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a2be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a2c2:	fa4a f303 	asr.w	r3, sl, r3
 800a2c6:	445b      	add	r3, fp
 800a2c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a2cc:	4e9d      	ldr	r6, [pc, #628]	; (800a544 <__ieee754_pow+0xa44>)
 800a2ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a2d2:	4116      	asrs	r6, r2
 800a2d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a2d8:	2000      	movs	r0, #0
 800a2da:	ea23 0106 	bic.w	r1, r3, r6
 800a2de:	f1c2 0214 	rsb	r2, r2, #20
 800a2e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a2e6:	fa4a fa02 	asr.w	sl, sl, r2
 800a2ea:	f1bb 0f00 	cmp.w	fp, #0
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	bfb8      	it	lt
 800a2f8:	f1ca 0a00 	rsblt	sl, sl, #0
 800a2fc:	f7f5 ffe4 	bl	80002c8 <__aeabi_dsub>
 800a300:	ec41 0b19 	vmov	d9, r0, r1
 800a304:	4642      	mov	r2, r8
 800a306:	464b      	mov	r3, r9
 800a308:	ec51 0b19 	vmov	r0, r1, d9
 800a30c:	f7f5 ffde 	bl	80002cc <__adddf3>
 800a310:	a37b      	add	r3, pc, #492	; (adr r3, 800a500 <__ieee754_pow+0xa00>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	2000      	movs	r0, #0
 800a318:	4604      	mov	r4, r0
 800a31a:	460d      	mov	r5, r1
 800a31c:	f7f6 f98c 	bl	8000638 <__aeabi_dmul>
 800a320:	ec53 2b19 	vmov	r2, r3, d9
 800a324:	4606      	mov	r6, r0
 800a326:	460f      	mov	r7, r1
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7f5 ffcc 	bl	80002c8 <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4640      	mov	r0, r8
 800a336:	4649      	mov	r1, r9
 800a338:	f7f5 ffc6 	bl	80002c8 <__aeabi_dsub>
 800a33c:	a372      	add	r3, pc, #456	; (adr r3, 800a508 <__ieee754_pow+0xa08>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f6 f979 	bl	8000638 <__aeabi_dmul>
 800a346:	a372      	add	r3, pc, #456	; (adr r3, 800a510 <__ieee754_pow+0xa10>)
 800a348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34c:	4680      	mov	r8, r0
 800a34e:	4689      	mov	r9, r1
 800a350:	4620      	mov	r0, r4
 800a352:	4629      	mov	r1, r5
 800a354:	f7f6 f970 	bl	8000638 <__aeabi_dmul>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4640      	mov	r0, r8
 800a35e:	4649      	mov	r1, r9
 800a360:	f7f5 ffb4 	bl	80002cc <__adddf3>
 800a364:	4604      	mov	r4, r0
 800a366:	460d      	mov	r5, r1
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4630      	mov	r0, r6
 800a36e:	4639      	mov	r1, r7
 800a370:	f7f5 ffac 	bl	80002cc <__adddf3>
 800a374:	4632      	mov	r2, r6
 800a376:	463b      	mov	r3, r7
 800a378:	4680      	mov	r8, r0
 800a37a:	4689      	mov	r9, r1
 800a37c:	f7f5 ffa4 	bl	80002c8 <__aeabi_dsub>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4620      	mov	r0, r4
 800a386:	4629      	mov	r1, r5
 800a388:	f7f5 ff9e 	bl	80002c8 <__aeabi_dsub>
 800a38c:	4642      	mov	r2, r8
 800a38e:	4606      	mov	r6, r0
 800a390:	460f      	mov	r7, r1
 800a392:	464b      	mov	r3, r9
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f6 f94e 	bl	8000638 <__aeabi_dmul>
 800a39c:	a35e      	add	r3, pc, #376	; (adr r3, 800a518 <__ieee754_pow+0xa18>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	4604      	mov	r4, r0
 800a3a4:	460d      	mov	r5, r1
 800a3a6:	f7f6 f947 	bl	8000638 <__aeabi_dmul>
 800a3aa:	a35d      	add	r3, pc, #372	; (adr r3, 800a520 <__ieee754_pow+0xa20>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	f7f5 ff8a 	bl	80002c8 <__aeabi_dsub>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f7f6 f93e 	bl	8000638 <__aeabi_dmul>
 800a3bc:	a35a      	add	r3, pc, #360	; (adr r3, 800a528 <__ieee754_pow+0xa28>)
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	f7f5 ff83 	bl	80002cc <__adddf3>
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	462b      	mov	r3, r5
 800a3ca:	f7f6 f935 	bl	8000638 <__aeabi_dmul>
 800a3ce:	a358      	add	r3, pc, #352	; (adr r3, 800a530 <__ieee754_pow+0xa30>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	f7f5 ff78 	bl	80002c8 <__aeabi_dsub>
 800a3d8:	4622      	mov	r2, r4
 800a3da:	462b      	mov	r3, r5
 800a3dc:	f7f6 f92c 	bl	8000638 <__aeabi_dmul>
 800a3e0:	a355      	add	r3, pc, #340	; (adr r3, 800a538 <__ieee754_pow+0xa38>)
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f7f5 ff71 	bl	80002cc <__adddf3>
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	f7f6 f923 	bl	8000638 <__aeabi_dmul>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4649      	mov	r1, r9
 800a3fa:	f7f5 ff65 	bl	80002c8 <__aeabi_dsub>
 800a3fe:	4604      	mov	r4, r0
 800a400:	460d      	mov	r5, r1
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f6 f915 	bl	8000638 <__aeabi_dmul>
 800a40e:	2200      	movs	r2, #0
 800a410:	ec41 0b19 	vmov	d9, r0, r1
 800a414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a418:	4620      	mov	r0, r4
 800a41a:	4629      	mov	r1, r5
 800a41c:	f7f5 ff54 	bl	80002c8 <__aeabi_dsub>
 800a420:	4602      	mov	r2, r0
 800a422:	460b      	mov	r3, r1
 800a424:	ec51 0b19 	vmov	r0, r1, d9
 800a428:	f7f6 fa30 	bl	800088c <__aeabi_ddiv>
 800a42c:	4632      	mov	r2, r6
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
 800a432:	463b      	mov	r3, r7
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	f7f6 f8fe 	bl	8000638 <__aeabi_dmul>
 800a43c:	4632      	mov	r2, r6
 800a43e:	463b      	mov	r3, r7
 800a440:	f7f5 ff44 	bl	80002cc <__adddf3>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f5 ff3c 	bl	80002c8 <__aeabi_dsub>
 800a450:	4642      	mov	r2, r8
 800a452:	464b      	mov	r3, r9
 800a454:	f7f5 ff38 	bl	80002c8 <__aeabi_dsub>
 800a458:	460b      	mov	r3, r1
 800a45a:	4602      	mov	r2, r0
 800a45c:	493a      	ldr	r1, [pc, #232]	; (800a548 <__ieee754_pow+0xa48>)
 800a45e:	2000      	movs	r0, #0
 800a460:	f7f5 ff32 	bl	80002c8 <__aeabi_dsub>
 800a464:	ec41 0b10 	vmov	d0, r0, r1
 800a468:	ee10 3a90 	vmov	r3, s1
 800a46c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a474:	da2b      	bge.n	800a4ce <__ieee754_pow+0x9ce>
 800a476:	4650      	mov	r0, sl
 800a478:	f000 f966 	bl	800a748 <scalbn>
 800a47c:	ec51 0b10 	vmov	r0, r1, d0
 800a480:	ec53 2b18 	vmov	r2, r3, d8
 800a484:	f7ff bbed 	b.w	8009c62 <__ieee754_pow+0x162>
 800a488:	4b30      	ldr	r3, [pc, #192]	; (800a54c <__ieee754_pow+0xa4c>)
 800a48a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a48e:	429e      	cmp	r6, r3
 800a490:	f77f af0c 	ble.w	800a2ac <__ieee754_pow+0x7ac>
 800a494:	4b2e      	ldr	r3, [pc, #184]	; (800a550 <__ieee754_pow+0xa50>)
 800a496:	440b      	add	r3, r1
 800a498:	4303      	orrs	r3, r0
 800a49a:	d009      	beq.n	800a4b0 <__ieee754_pow+0x9b0>
 800a49c:	ec51 0b18 	vmov	r0, r1, d8
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f7f6 fb3a 	bl	8000b1c <__aeabi_dcmplt>
 800a4a8:	3800      	subs	r0, #0
 800a4aa:	bf18      	it	ne
 800a4ac:	2001      	movne	r0, #1
 800a4ae:	e447      	b.n	8009d40 <__ieee754_pow+0x240>
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	f7f5 ff08 	bl	80002c8 <__aeabi_dsub>
 800a4b8:	4642      	mov	r2, r8
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	f7f6 fb42 	bl	8000b44 <__aeabi_dcmpge>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f43f aef3 	beq.w	800a2ac <__ieee754_pow+0x7ac>
 800a4c6:	e7e9      	b.n	800a49c <__ieee754_pow+0x99c>
 800a4c8:	f04f 0a00 	mov.w	sl, #0
 800a4cc:	e71a      	b.n	800a304 <__ieee754_pow+0x804>
 800a4ce:	ec51 0b10 	vmov	r0, r1, d0
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	e7d4      	b.n	800a480 <__ieee754_pow+0x980>
 800a4d6:	491c      	ldr	r1, [pc, #112]	; (800a548 <__ieee754_pow+0xa48>)
 800a4d8:	2000      	movs	r0, #0
 800a4da:	f7ff bb30 	b.w	8009b3e <__ieee754_pow+0x3e>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	f7ff bb2c 	b.w	8009b3e <__ieee754_pow+0x3e>
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7ff bb28 	b.w	8009b3e <__ieee754_pow+0x3e>
 800a4ee:	9204      	str	r2, [sp, #16]
 800a4f0:	f7ff bb7a 	b.w	8009be8 <__ieee754_pow+0xe8>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f7ff bb64 	b.w	8009bc2 <__ieee754_pow+0xc2>
 800a4fa:	bf00      	nop
 800a4fc:	f3af 8000 	nop.w
 800a500:	00000000 	.word	0x00000000
 800a504:	3fe62e43 	.word	0x3fe62e43
 800a508:	fefa39ef 	.word	0xfefa39ef
 800a50c:	3fe62e42 	.word	0x3fe62e42
 800a510:	0ca86c39 	.word	0x0ca86c39
 800a514:	be205c61 	.word	0xbe205c61
 800a518:	72bea4d0 	.word	0x72bea4d0
 800a51c:	3e663769 	.word	0x3e663769
 800a520:	c5d26bf1 	.word	0xc5d26bf1
 800a524:	3ebbbd41 	.word	0x3ebbbd41
 800a528:	af25de2c 	.word	0xaf25de2c
 800a52c:	3f11566a 	.word	0x3f11566a
 800a530:	16bebd93 	.word	0x16bebd93
 800a534:	3f66c16c 	.word	0x3f66c16c
 800a538:	5555553e 	.word	0x5555553e
 800a53c:	3fc55555 	.word	0x3fc55555
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	000fffff 	.word	0x000fffff
 800a548:	3ff00000 	.word	0x3ff00000
 800a54c:	4090cbff 	.word	0x4090cbff
 800a550:	3f6f3400 	.word	0x3f6f3400
 800a554:	652b82fe 	.word	0x652b82fe
 800a558:	3c971547 	.word	0x3c971547

0800a55c <__ieee754_sqrt>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	ec55 4b10 	vmov	r4, r5, d0
 800a564:	4e55      	ldr	r6, [pc, #340]	; (800a6bc <__ieee754_sqrt+0x160>)
 800a566:	43ae      	bics	r6, r5
 800a568:	ee10 0a10 	vmov	r0, s0
 800a56c:	ee10 3a10 	vmov	r3, s0
 800a570:	462a      	mov	r2, r5
 800a572:	4629      	mov	r1, r5
 800a574:	d110      	bne.n	800a598 <__ieee754_sqrt+0x3c>
 800a576:	ee10 2a10 	vmov	r2, s0
 800a57a:	462b      	mov	r3, r5
 800a57c:	f7f6 f85c 	bl	8000638 <__aeabi_dmul>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4620      	mov	r0, r4
 800a586:	4629      	mov	r1, r5
 800a588:	f7f5 fea0 	bl	80002cc <__adddf3>
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	ec45 4b10 	vmov	d0, r4, r5
 800a594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a598:	2d00      	cmp	r5, #0
 800a59a:	dc10      	bgt.n	800a5be <__ieee754_sqrt+0x62>
 800a59c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a5a0:	4330      	orrs	r0, r6
 800a5a2:	d0f5      	beq.n	800a590 <__ieee754_sqrt+0x34>
 800a5a4:	b15d      	cbz	r5, 800a5be <__ieee754_sqrt+0x62>
 800a5a6:	ee10 2a10 	vmov	r2, s0
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	ee10 0a10 	vmov	r0, s0
 800a5b0:	f7f5 fe8a 	bl	80002c8 <__aeabi_dsub>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	f7f6 f968 	bl	800088c <__aeabi_ddiv>
 800a5bc:	e7e6      	b.n	800a58c <__ieee754_sqrt+0x30>
 800a5be:	1512      	asrs	r2, r2, #20
 800a5c0:	d074      	beq.n	800a6ac <__ieee754_sqrt+0x150>
 800a5c2:	07d4      	lsls	r4, r2, #31
 800a5c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a5c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a5d0:	bf5e      	ittt	pl
 800a5d2:	0fda      	lsrpl	r2, r3, #31
 800a5d4:	005b      	lslpl	r3, r3, #1
 800a5d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a5da:	2400      	movs	r4, #0
 800a5dc:	0fda      	lsrs	r2, r3, #31
 800a5de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a5e2:	107f      	asrs	r7, r7, #1
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	2516      	movs	r5, #22
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a5ee:	1886      	adds	r6, r0, r2
 800a5f0:	428e      	cmp	r6, r1
 800a5f2:	bfde      	ittt	le
 800a5f4:	1b89      	suble	r1, r1, r6
 800a5f6:	18b0      	addle	r0, r6, r2
 800a5f8:	18a4      	addle	r4, r4, r2
 800a5fa:	0049      	lsls	r1, r1, #1
 800a5fc:	3d01      	subs	r5, #1
 800a5fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a602:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a606:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a60a:	d1f0      	bne.n	800a5ee <__ieee754_sqrt+0x92>
 800a60c:	462a      	mov	r2, r5
 800a60e:	f04f 0e20 	mov.w	lr, #32
 800a612:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a616:	4281      	cmp	r1, r0
 800a618:	eb06 0c05 	add.w	ip, r6, r5
 800a61c:	dc02      	bgt.n	800a624 <__ieee754_sqrt+0xc8>
 800a61e:	d113      	bne.n	800a648 <__ieee754_sqrt+0xec>
 800a620:	459c      	cmp	ip, r3
 800a622:	d811      	bhi.n	800a648 <__ieee754_sqrt+0xec>
 800a624:	f1bc 0f00 	cmp.w	ip, #0
 800a628:	eb0c 0506 	add.w	r5, ip, r6
 800a62c:	da43      	bge.n	800a6b6 <__ieee754_sqrt+0x15a>
 800a62e:	2d00      	cmp	r5, #0
 800a630:	db41      	blt.n	800a6b6 <__ieee754_sqrt+0x15a>
 800a632:	f100 0801 	add.w	r8, r0, #1
 800a636:	1a09      	subs	r1, r1, r0
 800a638:	459c      	cmp	ip, r3
 800a63a:	bf88      	it	hi
 800a63c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a640:	eba3 030c 	sub.w	r3, r3, ip
 800a644:	4432      	add	r2, r6
 800a646:	4640      	mov	r0, r8
 800a648:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a64c:	f1be 0e01 	subs.w	lr, lr, #1
 800a650:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a654:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a658:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a65c:	d1db      	bne.n	800a616 <__ieee754_sqrt+0xba>
 800a65e:	430b      	orrs	r3, r1
 800a660:	d006      	beq.n	800a670 <__ieee754_sqrt+0x114>
 800a662:	1c50      	adds	r0, r2, #1
 800a664:	bf13      	iteet	ne
 800a666:	3201      	addne	r2, #1
 800a668:	3401      	addeq	r4, #1
 800a66a:	4672      	moveq	r2, lr
 800a66c:	f022 0201 	bicne.w	r2, r2, #1
 800a670:	1063      	asrs	r3, r4, #1
 800a672:	0852      	lsrs	r2, r2, #1
 800a674:	07e1      	lsls	r1, r4, #31
 800a676:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a67a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a67e:	bf48      	it	mi
 800a680:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a684:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a688:	4614      	mov	r4, r2
 800a68a:	e781      	b.n	800a590 <__ieee754_sqrt+0x34>
 800a68c:	0ad9      	lsrs	r1, r3, #11
 800a68e:	3815      	subs	r0, #21
 800a690:	055b      	lsls	r3, r3, #21
 800a692:	2900      	cmp	r1, #0
 800a694:	d0fa      	beq.n	800a68c <__ieee754_sqrt+0x130>
 800a696:	02cd      	lsls	r5, r1, #11
 800a698:	d50a      	bpl.n	800a6b0 <__ieee754_sqrt+0x154>
 800a69a:	f1c2 0420 	rsb	r4, r2, #32
 800a69e:	fa23 f404 	lsr.w	r4, r3, r4
 800a6a2:	1e55      	subs	r5, r2, #1
 800a6a4:	4093      	lsls	r3, r2
 800a6a6:	4321      	orrs	r1, r4
 800a6a8:	1b42      	subs	r2, r0, r5
 800a6aa:	e78a      	b.n	800a5c2 <__ieee754_sqrt+0x66>
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	e7f0      	b.n	800a692 <__ieee754_sqrt+0x136>
 800a6b0:	0049      	lsls	r1, r1, #1
 800a6b2:	3201      	adds	r2, #1
 800a6b4:	e7ef      	b.n	800a696 <__ieee754_sqrt+0x13a>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	e7bd      	b.n	800a636 <__ieee754_sqrt+0xda>
 800a6ba:	bf00      	nop
 800a6bc:	7ff00000 	.word	0x7ff00000

0800a6c0 <with_errno>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	460d      	mov	r5, r1
 800a6c6:	4616      	mov	r6, r2
 800a6c8:	f7fc fa96 	bl	8006bf8 <__errno>
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	6006      	str	r6, [r0, #0]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	bd70      	pop	{r4, r5, r6, pc}

0800a6d4 <xflow>:
 800a6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6d6:	4614      	mov	r4, r2
 800a6d8:	461d      	mov	r5, r3
 800a6da:	b108      	cbz	r0, 800a6e0 <xflow+0xc>
 800a6dc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6e0:	e9cd 2300 	strd	r2, r3, [sp]
 800a6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f7f5 ffa4 	bl	8000638 <__aeabi_dmul>
 800a6f0:	2222      	movs	r2, #34	; 0x22
 800a6f2:	b003      	add	sp, #12
 800a6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6f8:	f7ff bfe2 	b.w	800a6c0 <with_errno>

0800a6fc <__math_uflow>:
 800a6fc:	b508      	push	{r3, lr}
 800a6fe:	2200      	movs	r2, #0
 800a700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a704:	f7ff ffe6 	bl	800a6d4 <xflow>
 800a708:	ec41 0b10 	vmov	d0, r0, r1
 800a70c:	bd08      	pop	{r3, pc}

0800a70e <__math_oflow>:
 800a70e:	b508      	push	{r3, lr}
 800a710:	2200      	movs	r2, #0
 800a712:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a716:	f7ff ffdd 	bl	800a6d4 <xflow>
 800a71a:	ec41 0b10 	vmov	d0, r0, r1
 800a71e:	bd08      	pop	{r3, pc}

0800a720 <fabs>:
 800a720:	ec51 0b10 	vmov	r0, r1, d0
 800a724:	ee10 2a10 	vmov	r2, s0
 800a728:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a72c:	ec43 2b10 	vmov	d0, r2, r3
 800a730:	4770      	bx	lr

0800a732 <finite>:
 800a732:	b082      	sub	sp, #8
 800a734:	ed8d 0b00 	vstr	d0, [sp]
 800a738:	9801      	ldr	r0, [sp, #4]
 800a73a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a73e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a742:	0fc0      	lsrs	r0, r0, #31
 800a744:	b002      	add	sp, #8
 800a746:	4770      	bx	lr

0800a748 <scalbn>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	ec55 4b10 	vmov	r4, r5, d0
 800a74e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a752:	4606      	mov	r6, r0
 800a754:	462b      	mov	r3, r5
 800a756:	b99a      	cbnz	r2, 800a780 <scalbn+0x38>
 800a758:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a75c:	4323      	orrs	r3, r4
 800a75e:	d036      	beq.n	800a7ce <scalbn+0x86>
 800a760:	4b39      	ldr	r3, [pc, #228]	; (800a848 <scalbn+0x100>)
 800a762:	4629      	mov	r1, r5
 800a764:	ee10 0a10 	vmov	r0, s0
 800a768:	2200      	movs	r2, #0
 800a76a:	f7f5 ff65 	bl	8000638 <__aeabi_dmul>
 800a76e:	4b37      	ldr	r3, [pc, #220]	; (800a84c <scalbn+0x104>)
 800a770:	429e      	cmp	r6, r3
 800a772:	4604      	mov	r4, r0
 800a774:	460d      	mov	r5, r1
 800a776:	da10      	bge.n	800a79a <scalbn+0x52>
 800a778:	a32b      	add	r3, pc, #172	; (adr r3, 800a828 <scalbn+0xe0>)
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	e03a      	b.n	800a7f6 <scalbn+0xae>
 800a780:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a784:	428a      	cmp	r2, r1
 800a786:	d10c      	bne.n	800a7a2 <scalbn+0x5a>
 800a788:	ee10 2a10 	vmov	r2, s0
 800a78c:	4620      	mov	r0, r4
 800a78e:	4629      	mov	r1, r5
 800a790:	f7f5 fd9c 	bl	80002cc <__adddf3>
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	e019      	b.n	800a7ce <scalbn+0x86>
 800a79a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a79e:	460b      	mov	r3, r1
 800a7a0:	3a36      	subs	r2, #54	; 0x36
 800a7a2:	4432      	add	r2, r6
 800a7a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a7a8:	428a      	cmp	r2, r1
 800a7aa:	dd08      	ble.n	800a7be <scalbn+0x76>
 800a7ac:	2d00      	cmp	r5, #0
 800a7ae:	a120      	add	r1, pc, #128	; (adr r1, 800a830 <scalbn+0xe8>)
 800a7b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b4:	da1c      	bge.n	800a7f0 <scalbn+0xa8>
 800a7b6:	a120      	add	r1, pc, #128	; (adr r1, 800a838 <scalbn+0xf0>)
 800a7b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7bc:	e018      	b.n	800a7f0 <scalbn+0xa8>
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	dd08      	ble.n	800a7d4 <scalbn+0x8c>
 800a7c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7ce:	ec45 4b10 	vmov	d0, r4, r5
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a7d8:	da19      	bge.n	800a80e <scalbn+0xc6>
 800a7da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a7de:	429e      	cmp	r6, r3
 800a7e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a7e4:	dd0a      	ble.n	800a7fc <scalbn+0xb4>
 800a7e6:	a112      	add	r1, pc, #72	; (adr r1, 800a830 <scalbn+0xe8>)
 800a7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e2      	bne.n	800a7b6 <scalbn+0x6e>
 800a7f0:	a30f      	add	r3, pc, #60	; (adr r3, 800a830 <scalbn+0xe8>)
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 ff1f 	bl	8000638 <__aeabi_dmul>
 800a7fa:	e7cb      	b.n	800a794 <scalbn+0x4c>
 800a7fc:	a10a      	add	r1, pc, #40	; (adr r1, 800a828 <scalbn+0xe0>)
 800a7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0b8      	beq.n	800a778 <scalbn+0x30>
 800a806:	a10e      	add	r1, pc, #56	; (adr r1, 800a840 <scalbn+0xf8>)
 800a808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80c:	e7b4      	b.n	800a778 <scalbn+0x30>
 800a80e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a812:	3236      	adds	r2, #54	; 0x36
 800a814:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a818:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a81c:	4620      	mov	r0, r4
 800a81e:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <scalbn+0x108>)
 800a820:	2200      	movs	r2, #0
 800a822:	e7e8      	b.n	800a7f6 <scalbn+0xae>
 800a824:	f3af 8000 	nop.w
 800a828:	c2f8f359 	.word	0xc2f8f359
 800a82c:	01a56e1f 	.word	0x01a56e1f
 800a830:	8800759c 	.word	0x8800759c
 800a834:	7e37e43c 	.word	0x7e37e43c
 800a838:	8800759c 	.word	0x8800759c
 800a83c:	fe37e43c 	.word	0xfe37e43c
 800a840:	c2f8f359 	.word	0xc2f8f359
 800a844:	81a56e1f 	.word	0x81a56e1f
 800a848:	43500000 	.word	0x43500000
 800a84c:	ffff3cb0 	.word	0xffff3cb0
 800a850:	3c900000 	.word	0x3c900000

0800a854 <_init>:
 800a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a856:	bf00      	nop
 800a858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85a:	bc08      	pop	{r3}
 800a85c:	469e      	mov	lr, r3
 800a85e:	4770      	bx	lr

0800a860 <_fini>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	bf00      	nop
 800a864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a866:	bc08      	pop	{r3}
 800a868:	469e      	mov	lr, r3
 800a86a:	4770      	bx	lr
